{"version":3,"file":"js/app.b76c875b.js","mappings":"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","sources":["webpack://schematic-map-rwd/./src/App.vue","webpack://schematic-map-rwd/./src/App.vue?7ccd","webpack://schematic-map-rwd/./src/views/HomeView.vue","webpack://schematic-map-rwd/./src/utils/dataProcessor.js","webpack://schematic-map-rwd/./src/stores/dataStore.js","webpack://schematic-map-rwd/./src/components/LoadingOverlay.vue","webpack://schematic-map-rwd/./src/components/LoadingOverlay.vue?68e9","webpack://schematic-map-rwd/./src/views/LeftView.vue","webpack://schematic-map-rwd/./src/tabs/LayersTab.vue","webpack://schematic-map-rwd/./src/tabs/LayersTab.vue?5c59","webpack://schematic-map-rwd/./src/views/LeftView.vue?577f","webpack://schematic-map-rwd/./src/views/RightView.vue","webpack://schematic-map-rwd/./src/tabs/PropertiesTab.vue","webpack://schematic-map-rwd/./src/components/DetailItem.vue","webpack://schematic-map-rwd/./src/components/DetailItem.vue?6bde","webpack://schematic-map-rwd/./src/tabs/PropertiesTab.vue?57c5","webpack://schematic-map-rwd/./src/utils/utils.js","webpack://schematic-map-rwd/./src/tabs/layerInfoTab.vue","webpack://schematic-map-rwd/./src/tabs/layerInfoTab.vue?bd97","webpack://schematic-map-rwd/./src/views/RightView.vue?c29a","webpack://schematic-map-rwd/./src/views/UpperView.vue","webpack://schematic-map-rwd/./src/tabs/DashboardTab.vue","webpack://schematic-map-rwd/./src/tabs/DashboardTab.vue?3301","webpack://schematic-map-rwd/./src/tabs/D3jsTab.vue","webpack://schematic-map-rwd/./src/tabs/D3jsTab.vue?dc11","webpack://schematic-map-rwd/./src/tabs/processedJsonDataTab.vue","webpack://schematic-map-rwd/./src/tabs/processedJsonDataTab.vue?1e37","webpack://schematic-map-rwd/./src/tabs/jsonDataTab.vue","webpack://schematic-map-rwd/./src/tabs/jsonDataTab.vue?8ef2","webpack://schematic-map-rwd/./src/views/UpperView.vue?e2e7","webpack://schematic-map-rwd/./src/views/BottomView.vue","webpack://schematic-map-rwd/./src/tabs/DataTableTab.vue","webpack://schematic-map-rwd/./src/tabs/DataTableTab.vue?e5ab","webpack://schematic-map-rwd/./src/views/BottomView.vue?8dbb","webpack://schematic-map-rwd/./src/views/MiddleView.vue","webpack://schematic-map-rwd/./src/views/MiddleView.vue?3897","webpack://schematic-map-rwd/./src/views/ResponsiveLowerView.vue","webpack://schematic-map-rwd/./src/views/ResponsiveLowerView.vue?21f9","webpack://schematic-map-rwd/./src/views/HomeView.vue?1da1","webpack://schematic-map-rwd/./src/router/index.js","webpack://schematic-map-rwd/./src/main.js","webpack://schematic-map-rwd/webpack/bootstrap","webpack://schematic-map-rwd/webpack/runtime/chunk loaded","webpack://schematic-map-rwd/webpack/runtime/compat get default export","webpack://schematic-map-rwd/webpack/runtime/define property getters","webpack://schematic-map-rwd/webpack/runtime/global","webpack://schematic-map-rwd/webpack/runtime/hasOwnProperty shorthand","webpack://schematic-map-rwd/webpack/runtime/jsonp chunk loading","webpack://schematic-map-rwd/webpack/startup"],"sourcesContent":["<script>\n  /**\n   * 🏠 App.vue - 應用程式主組件 (Main Application Component)\n   *\n   * 功能說明 (Features):\n   * 1. 🏗️ 提供應用程式整體框架和佈局結構\n   * 2. ⏳ 管理全域載入狀態和進度顯示\n   * 3. 🦶 提供應用程式頁腳，包含版權和技術資訊\n   * 4. 🚀 管理 Vue Router 的路由導航系統\n   * 5. 📱 實現響應式滿版佈局，無邊距和空隙\n   * 6. 🎨 整合全域樣式系統和主題配置\n   * 7. 🔧 提供全域錯誤處理和異常捕獲\n   *\n   * 架構說明 (Architecture):\n   * - 內容層：路由視圖容器，動態顯示不同頁面組件\n   * - 狀態層：整合 Pinia 狀態管理系統\n   * - 樣式層：統一管理全域樣式和主題\n   * - 路由層：處理頁面導航和路由切換\n   *\n   * 設計理念 (Design Principles):\n   * - 滿版無邊距佈局設計，最大化內容顯示空間\n   * - 模組化組件架構，便於維護和擴展\n   * - 響應式設計，適配多種設備尺寸\n   * - 統一的視覺風格和用戶體驗\n   *\n   * 技術特點 (Technical Features):\n   * - 使用 Vue 3 Composition API 提供更好的邏輯復用\n   * - 整合 Bootstrap 5 響應式佈局系統\n   * - 支援全域載入狀態管理\n   * - 提供完整的路由導航功能\n   *\n   * @component App\n   * @version 2.0.0\n   * @author Kevin Cheng\n   * @since 1.0.0\n   */\n\n  // ==================== 🔧 Vue Composition API 引入 (Vue Composition API Imports) ====================\n\n  /**\n   * Vue 3 Composition API 核心功能引入\n   * 使用 ref 創建響應式引用，用於管理組件狀態\n   */\n  import { ref } from 'vue';\n\n  export default {\n    /**\n     * 組件名稱\n     * 用於 Vue DevTools 調試和組件識別\n     */\n    name: 'App',\n\n    /**\n     * 🧩 組件註冊 (Component Registration)\n     * 註冊應用程式層級使用的組件\n     * 目前為空，所有子組件都在各自的路由視圖中註冊\n     */\n    components: {},\n\n    /**\n     * 🔧 組件設定函數 (Component Setup)\n     * 使用 Composition API 設定應用程式層級的狀態管理\n     *\n     * 功能說明：\n     * - 管理全域載入狀態和進度顯示\n     * - 提供統一的載入提示和進度反饋\n     * - 支援載入文字和進度條的動態更新\n     *\n     * @returns {Object} 返回響應式數據和函數供模板使用\n     */\n    setup() {\n      // ==================== ⏳ 全域載入狀態管理 (Global Loading State Management) ====================\n\n      /**\n       * 載入狀態控制變數\n       * 控制全域載入覆蓋層的顯示和隱藏\n       * 使用 Vue 3 的 ref() 函數創建響應式引用\n       * 當此值為 true 時，載入覆蓋層會顯示在應用程式上方\n       *\n       * @type {Ref<boolean>} 是否顯示載入覆蓋層\n       */\n      const isLoading = ref(false);\n\n      /**\n       * 載入主要文字提示\n       * 顯示在載入覆蓋層上的主要文字說明\n       * 預設為 '載入中...'，可根據載入內容動態更新\n       * 例如：'載入地圖數據中...'、'處理圖層數據中...'\n       *\n       * @type {Ref<string>} 載入文字提示\n       */\n      const loadingText = ref('載入中...');\n\n      /**\n       * 載入進度百分比\n       * 用於進度條顯示，範圍 0-100\n       * 0 表示載入開始，100 表示載入完成\n       * 配合 showLoadingProgress 控制進度條的顯示\n       *\n       * @type {Ref<number>} 載入進度百分比 (0-100)\n       */\n      const loadingProgress = ref(0);\n\n      /**\n       * 進度條顯示控制\n       * 控制是否顯示載入進度條\n       * 當載入過程需要顯示具體進度時設為 true\n       * 當只需要載入動畫時設為 false\n       *\n       * @type {Ref<boolean>} 是否顯示進度條\n       */\n      const showLoadingProgress = ref(false);\n\n      /**\n       * 載入輔助文字說明\n       * 顯示在載入覆蓋層上的輔助文字說明\n       * 提供更詳細的載入狀態信息\n       * 例如：'正在處理地理資訊...'、'數據已更新'\n       *\n       * @type {Ref<string>} 載入子文字說明\n       */\n      const loadingSubText = ref('');\n\n      // ==================== 📤 返回響應式數據和函數 (Return Reactive Data and Functions) ====================\n\n      /**\n       * 返回響應式數據和函數給模板使用\n       * 所有返回的變數都會在模板中可用\n       */\n      return {\n        // ⏳ 載入狀態相關變數\n        isLoading, // 載入狀態開關\n        loadingText, // 載入主要文字\n        loadingProgress, // 載入進度\n        showLoadingProgress, // 是否顯示進度條\n        loadingSubText, // 載入輔助文字\n      };\n    },\n  };\n</script>\n\n<template>\n  <!-- 🏠 App.vue - 主應用程式組件 (Main Application Component) -->\n  <!-- 提供應用程式整體框架，使用 Bootstrap 實現滿版無空隙佈局 -->\n  <div id=\"app\" class=\"d-flex flex-column vh-100\">\n    <!--\n      📱 主要內容區域 (Main Content Area)\n\n      功能說明：\n      - 使用 Bootstrap 的 flexbox 佈局系統\n      - 實現垂直方向的彈性佈局\n      - 隱藏溢出內容，保持整潔的視覺效果\n      - 包含路由視圖容器，動態顯示不同頁面組件\n\n      樣式說明：\n      - d-flex: 啟用 flexbox 佈局\n      - flex-column: 垂直方向排列子元素\n      - overflow-hidden: 隱藏溢出內容\n    -->\n    <div class=\"d-flex flex-column overflow-hidden\">\n      <!--\n        🗺️ 路由視圖容器 (Router View Container)\n\n        功能說明：\n        - 根據當前路由動態顯示對應的頁面組件\n        - 支援路由切換和頁面導航\n        - 自動處理組件的載入和卸載\n\n        路由配置：\n        - /: HomeView (首頁)\n        - /code: CodeView (程式碼查看頁面)\n      -->\n      <router-view />\n    </div>\n  </div>\n</template>\n\n<style>\n  /**\n   * 🎨 應用程式全域樣式 (Application Global Styles)\n   *\n   * 功能說明：\n   * - 引入共用 CSS 樣式表\n   * - 定義應用程式層級的樣式規則\n   * - 整合第三方庫樣式和自定義樣式\n   * - 提供統一的視覺風格和主題配置\n   *\n   * 樣式架構：\n   * - 第三方庫樣式：Bootstrap、Font Awesome\n   * - 自定義樣式：common.css 中的統一樣式定義\n   * - 組件樣式：各組件內部的 scoped 樣式\n   *\n   * 設計原則：\n   * - 模組化樣式管理，避免樣式衝突\n   * - 響應式設計，適配多種設備\n   * - 統一的顏色方案和字體系統\n   * - 良好的可維護性和擴展性\n   *\n   * 注意事項：\n   * - 大部分樣式已移至 common.css 中統一管理\n   * - 避免在此處定義過多的樣式規則\n   * - 優先使用 Bootstrap 的工具類\n   */\n\n  /* ==================== 📦 共用樣式表引入 (Common Stylesheets Import) ==================== */\n\n  /**\n   * 引入共用樣式表\n   * 包含所有自定義樣式、CSS 變數和主題配置\n   * 提供統一的樣式基礎和視覺規範\n   */\n  @import './assets/css/common.css';\n\n  /* ==================== 📱 應用程式特定樣式 (App-Specific Styles) ==================== */\n\n  /**\n   * 應用程式層級樣式\n   * 目前大部分樣式已整合至 common.css 中\n   * 此處僅保留必要的應用程式特定樣式\n   *\n   * 注意：避免在此處定義過多的樣式規則\n   * 優先使用 common.css 中的統一樣式定義\n   */\n</style>\n","import { render } from \"./App.vue?vue&type=template&id=3594f01e\"\nimport script from \"./App.vue?vue&type=script&lang=js\"\nexport * from \"./App.vue?vue&type=script&lang=js\"\n\nimport \"./App.vue?vue&type=style&index=0&id=3594f01e&lang=css\"\n\nimport exportComponent from \"../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","<script>\n  /**\n   * 🏠 HomeView.vue - Schematic Map系統主頁面\n   *\n   * 功能說明：\n   * 1. 🗺️ 提供地圖視覺化和資料分析的主要介面\n   * 2. 📊 管理多面板響應式佈局系統\n   * 3. 🔄 協調各子組件間的資料流和狀態同步\n   * 4. 📱 實現桌面版和行動版的適應性佈局\n   * 5. ⏳ 統一管理載入狀態和進度顯示\n   * 6. 🎛️ 提供面板拖拉調整大小功能\n   *\n   * 架構說明：\n   * - 左側面板 (LeftView)：圖層管理和控制項\n   * - 中間面板 (MiddleView/UpperView)：地圖顯示和儀表板\n   * - 右側面板 (RightView)：屬性資訊和圖層資訊\n   * - 下方面板 (ResponsiveLowerView)：資料表格和樣式設定\n   *\n   * 響應式設計：\n   * - 桌面版 (xl+)：四面板佈局，可拖拉調整大小\n   * - 平板版 (md-lg)：上下兩層佈局，分頁式導航\n   * - 手機版 (sm-)：單欄佈局，分頁式導航\n   *\n   * @component HomeView\n   * @version 2.0.0\n   */\n\n  // 🔧 Vue Composition API 核心功能引入\n  import { ref, onMounted, onUnmounted, computed, nextTick, watch } from 'vue';\n\n  // 📦 Pinia 狀態管理引入\n  import { useDataStore } from '@/stores/dataStore';\n\n  // 🧩 子組件引入 (Subcomponent Imports)\n  import LoadingOverlay from '../components/LoadingOverlay.vue'; // ⏳ 載入覆蓋層組件\n  import LeftView from './LeftView.vue'; // 📋 左側控制面板組件\n  import RightView from './RightView.vue'; // 📊 右側分析面板組件\n  import MiddleView from './MiddleView.vue'; // 🗺️ 中間主要內容面板組件\n  import UpperView from './UpperView.vue'; // 🌟 上半部區域組件\n  import ResponsiveLowerView from './ResponsiveLowerView.vue'; // 📱 響應式下半部區域組件\n\n  export default {\n    name: 'HomeView',\n\n    /**\n     * 🧩 組件註冊 (Component Registration)\n     * 註冊首頁使用的所有子組件\n     */\n    components: {\n      LoadingOverlay, // 載入覆蓋層組件\n      LeftView, // 左側控制面板組件\n      RightView, // 右側面板組件\n      MiddleView, // 中間主要內容面板組件\n      UpperView, // 上半部區域組件\n      ResponsiveLowerView, // 下半部區域組件\n    },\n\n    /**\n     * 🔧 組件設定函數 (Component Setup)\n     * 使用 Composition API 設定組件邏輯和狀態管理\n     */\n    setup() {\n      // 📦 取得 Pinia 數據存儲實例\n      const dataStore = useDataStore();\n\n      // 📊 本地資料狀態 (Local Data State)\n      /** 📋 表格資料暫存 */\n      const dataTableData = ref([]);\n\n      // 📚 組件引用 (Component References)\n      /** 🌟 中間面板組件引用 */\n      const middlePanelRef = ref(null);\n      /** 📱 響應式上半部面板組件引用 */\n      const mobileUpperViewRef = ref(null);\n      /** 🦶 頁腳元素引用 */\n      const appFooterRef = ref(null);\n\n      // 📑 分頁狀態 (Tab States)\n      /** 🗺️ 主要分頁狀態（地圖/儀表板） */\n      const activeUpperTab = ref('d3js');\n      /** 📋 底部分頁狀態（表格/樣式） */\n      const activeBottomTab = ref('table');\n      /** 📊 右側分頁狀態（屬性/分析） */\n      const activeRightTab = ref('layer-info');\n      /** 📱 響應式下半部分頁狀態（行動版/平板版） */\n      const activeLowerTab = ref('layers');\n\n      // 📏 面板大小狀態 (Panel Size States)\n      // 使用百分比系統實現響應式佈局\n      const MIN_LEFT_PANEL_WIDTH_PERCENT = 5; // 左側面板最小寬度百分比\n      /** 📏 左側面板寬度百分比 (0-100%) */\n      const leftViewWidth = ref(20);\n      /** 📏 右側面板寬度百分比 (0-100%) */\n      const rightViewWidth = ref(20);\n      /** 📏 瀏覽器視窗寬度 */\n      const windowWidth = ref(window.innerWidth);\n      /** 📏 瀏覽器視窗高度 */\n      const windowHeight = ref(window.innerHeight);\n      /** 📏 頁腳高度 */\n      const footerHeight = ref(0);\n\n      // 🧮 計算屬性 - 面板尺寸 (Computed Properties - Panel Dimensions)\n      /** 📏 左側面板像素寬度 */\n      const leftViewWidthPx = computed(() => `${leftViewWidth.value}%`);\n      /** 📏 右側面板像素寬度 */\n      const rightViewWidthPx = computed(() => `${rightViewWidth.value}%`);\n      /** 📏 中間面板寬度百分比 */\n      const mainPanelWidth = computed(() => 100 - leftViewWidth.value - rightViewWidth.value);\n      /** 📏 中間面板像素寬度 */\n      const mainPanelWidthPx = computed(() => `${mainPanelWidth.value}%`);\n\n      /** 📏 中間面板計算高度 */\n      const calculatedMiddleViewHeight = computed(() => {\n        return windowHeight.value - footerHeight.value;\n      });\n\n      // ⏳ 載入狀態 (Loading States)\n      // 由 Pinia store 驅動的載入狀態管理\n      /** 📝 載入文字提示 */\n      const loadingText = ref('載入中...');\n      /** 📊 載入進度百分比 */\n      const loadingProgress = ref(0);\n      /** 📊 是否顯示進度條 */\n      const showLoadingProgress = ref(false);\n      /** 📝 載入子文字說明 */\n      const loadingSubText = ref('');\n\n      /** ⏳ 是否有任何圖層正在載入 */\n      const isAnyLayerLoading = computed(() =>\n        dataStore.getAllLayers().some((layer) => layer.isLoading)\n      );\n\n      /**\n       * 👀 監聽載入狀態變化 (Watch Loading State Changes)\n       * 根據 Pinia store 中的圖層載入狀態更新 UI 提示\n       */\n      watch(\n        isAnyLayerLoading,\n        (loading) => {\n          if (loading) {\n            const loadingLayer = dataStore.getAllLayers().find((l) => l.isLoading);\n            loadingText.value = `載入 ${loadingLayer.layerName} 數據中...`;\n            loadingSubText.value = '正在處理地理資訊...';\n          } else {\n            loadingText.value = '載入完成';\n            loadingSubText.value = `數據已更新`;\n          }\n        },\n        { deep: true }\n      );\n\n      // 🗺️ 地圖和圖層狀態 (Map and Layer States)\n      // 大部分狀態由 Pinia store 管理，此處保留 UI 控制相關狀態\n      /** 🔍 選定的資料篩選器 */\n      const selectedFilter = ref(null);\n      /** 🔍 地圖縮放等級 */\n      const zoomLevel = ref(11);\n      /** 📍 當前地圖座標 */\n      const currentCoords = ref({ lat: 25.033, lng: 121.5654 });\n      /** 📍 作用中的地圖標記數量 */\n      const activeMarkers = ref(0);\n\n      // 🔧 拖曳狀態 (Dragging States)\n      /** 🖱️ 側邊面板拖曳進行中狀態 */\n      const isSidePanelDragging = ref(false);\n\n      // 🗺️ 地圖互動函數 (Map Interaction Functions)\n\n      /**\n       * 🔄 重設地圖視圖 (Reset Map View)\n       * 將地圖恢復到初始狀態\n       */\n      const resetView = () => {\n        // MapTab已移除，此功能不再需要\n        console.log('MapTab已移除，resetView功能已停用');\n      };\n\n      // 🔧 拖拽調整功能 (Drag Resize Functions)\n\n      /**\n       * 🔧 開始調整面板大小 (Start Panel Resize)\n       * 改進版本的拖曳系統，提供更流暢的體驗\n       *\n       * @param {string} direction - 拖曳方向（'left' 或 'right'）\n       * @param {MouseEvent} event - 滑鼠事件對象\n       */\n      const startResize = (direction, event) => {\n        event.preventDefault();\n        event.stopPropagation();\n\n        // 設定拖曳狀態和防止文字選取\n        isSidePanelDragging.value = true;\n        document.body.classList.add('my-no-select');\n\n        // 記錄初始位置和面板尺寸\n        const startX = event.clientX;\n        const startLeftWidth = leftViewWidth.value;\n        const startRightWidth = rightViewWidth.value;\n\n        // 獲取窗口尺寸以計算百分比\n        const currentWindowWidth = windowWidth.value;\n\n        console.log(`🔧 開始調整 ${direction} 方向，初始值:`, {\n          leftWidth: startLeftWidth,\n          rightWidth: startRightWidth,\n        });\n\n        /**\n         * 🖱️ 處理滑鼠移動事件 (Handle Mouse Move)\n         */\n        const handleMouseMove = (moveEvent) => {\n          moveEvent.preventDefault();\n\n          const deltaX = moveEvent.clientX - startX;\n          const deltaXPercent = (deltaX / currentWindowWidth) * 100;\n\n          if (direction === 'left') {\n            // 調整左側面板寬度\n            let newWidth = startLeftWidth + deltaXPercent;\n            // 限制寬度：最小值為 MIN_LEFT_PANEL_WIDTH_PERCENT，最大值確保主面板不為負\n            newWidth = Math.max(\n              MIN_LEFT_PANEL_WIDTH_PERCENT,\n              Math.min(100 - rightViewWidth.value, newWidth)\n            );\n            leftViewWidth.value = newWidth;\n          } else if (direction === 'right') {\n            // 調整右側面板寬度\n            let newWidth = startRightWidth - deltaXPercent;\n            // 限制寬度：最小值為 0，最大值確保主面板不為負\n            newWidth = Math.max(0, Math.min(100 - leftViewWidth.value, newWidth));\n            rightViewWidth.value = newWidth;\n          }\n        };\n\n        /**\n         * 🖱️ 處理滑鼠放開事件 (Handle Mouse Up)\n         */\n        const handleMouseUp = () => {\n          // 清除拖曳狀態\n          isSidePanelDragging.value = false;\n          document.body.classList.remove('my-no-select');\n          document.removeEventListener('mousemove', handleMouseMove);\n          document.removeEventListener('mouseup', handleMouseUp);\n\n          // 驗證最終尺寸\n          validatePanelSizes();\n\n          console.log('✅ 拖曳調整完成，最終值:', {\n            leftWidth: leftViewWidth.value,\n            rightWidth: rightViewWidth.value,\n            mainWidth: mainPanelWidth.value,\n          });\n        };\n\n        // 註冊事件監聽器\n        document.addEventListener('mousemove', handleMouseMove);\n        document.addEventListener('mouseup', handleMouseUp);\n      };\n\n      /**\n       * ✅ 驗證面板尺寸 (Validate Panel Sizes)\n       * 確保面板尺寸在合理範圍內 (0-100%)\n       */\n      const validatePanelSizes = () => {\n        // 確保各面板在合理範圍內\n        leftViewWidth.value = Math.max(\n          MIN_LEFT_PANEL_WIDTH_PERCENT,\n          Math.min(100, leftViewWidth.value)\n        );\n        rightViewWidth.value = Math.max(0, Math.min(100, rightViewWidth.value));\n\n        // 四捨五入到一位小數\n        leftViewWidth.value = Math.round(leftViewWidth.value * 10) / 10;\n        rightViewWidth.value = Math.round(rightViewWidth.value * 10) / 10;\n      };\n\n      // 📏 視窗大小變化處理 (Window Resize Handler)\n      /**\n       * 📏 處理瀏覽器視窗大小變化 (Handle Browser Window Resize)\n       */\n      const handleResize = () => {\n        const prevWidth = windowWidth.value;\n        const prevIsDesktop = prevWidth >= 1200;\n\n        windowWidth.value = window.innerWidth;\n        windowHeight.value = window.innerHeight;\n\n        const currentIsDesktop = window.innerWidth >= 1200;\n\n        // 檢查是否跨越了響應式斷點\n        if (prevIsDesktop !== currentIsDesktop) {\n          console.log(\n            `🔄 HomeView: 響應式斷點切換 ${prevIsDesktop ? '桌面版→響應式' : '響應式→桌面版'}`\n          );\n          handleScreenSizeChange();\n        } else {\n          // 同樣佈局模式下的大小變化，通知地圖重新計算尺寸\n          nextTick(() => {\n            setTimeout(() => {\n              if (currentIsDesktop && middlePanelRef.value) {\n                // 桌面版地圖尺寸調整\n                if (middlePanelRef.value.invalidateMapSize) {\n                  middlePanelRef.value.invalidateMapSize();\n                }\n              } else if (!currentIsDesktop && mobileUpperViewRef.value) {\n                // 響應式版本地圖尺寸調整\n                if (mobileUpperViewRef.value.invalidateMapSize) {\n                  mobileUpperViewRef.value.invalidateMapSize();\n                }\n              }\n            }, 100);\n          });\n        }\n\n        nextTick(() => {\n          // 只在 xl breakpoint 以上才計算 footer 高度\n          if (appFooterRef.value && window.innerWidth >= 1200) {\n            footerHeight.value = appFooterRef.value.offsetHeight;\n          } else {\n            footerHeight.value = 0;\n          }\n\n          // 檢查響應式底部面板高度是否仍然符合最小要求\n          if (!currentIsDesktop) {\n            const minHeight = calculateMinBottomHeight();\n            if (mobileBottomViewHeight.value < minHeight) {\n              mobileBottomViewHeight.value = Math.round(minHeight);\n              console.log(\n                `🔧 HomeView: 視窗大小變化，調整底部面板最小高度至 ${mobileBottomViewHeight.value}vh`\n              );\n            }\n          }\n        });\n      };\n\n      /**\n       * 🚀 組件掛載事件 (Component Mounted Event)\n       * 初始化組件和事件監聽器\n       */\n      onMounted(() => {\n        console.log('🚀 Schematic Map平台已初始化');\n\n        // 添加視窗調整事件監聽\n        window.addEventListener('resize', handleResize);\n\n        // 初始化計算頁腳高度\n        nextTick(() => {\n          // 只在 xl breakpoint 以上才計算 footer 高度\n          if (appFooterRef.value && window.innerWidth >= 1200) {\n            footerHeight.value = appFooterRef.value.offsetHeight;\n          } else {\n            footerHeight.value = 0;\n          }\n        });\n\n        // 設置螢幕尺寸觀察器\n        if (window.ResizeObserver) {\n          screenSizeObserver = new ResizeObserver((entries) => {\n            for (let entry of entries) {\n              const { width } = entry.contentRect;\n              // 檢測是否跨越 xl breakpoint (1200px)\n              const isXlAndAbove = width >= 1200;\n              const wasXlAndAbove = entry.target.classList.contains('xl-and-above');\n\n              if (isXlAndAbove !== wasXlAndAbove) {\n                // 螢幕尺寸跨越了 xl breakpoint\n                entry.target.classList.toggle('xl-and-above', isXlAndAbove);\n                handleScreenSizeChange();\n              }\n            }\n          });\n\n          screenSizeObserver.observe(document.body);\n        }\n      });\n\n      // 📍 座標和標記更新函數 (Coordinate and Marker Update Functions)\n\n      /**\n       * 📍 更新作用中標記數量 (Update Active Markers Count)\n       * @param {number} count - 標記數量\n       */\n      const updateActiveMarkers = (count) => {\n        activeMarkers.value = count;\n      };\n\n      /**\n       * 🎯 處理特徵選中事件 (Handle Feature Selected Event)\n       * 當用戶在地圖上選中某個特徵時觸發\n       * @param {Object} feature - 選中的地理特徵對象\n       */\n      const handleFeatureSelected = (feature) => {\n        console.log('HomeView - handleFeatureSelected called with:', {\n          feature: feature,\n          properties: feature.properties,\n          store: dataStore,\n        });\n        // 將選中的特徵設定到 Pinia store\n        dataStore.setSelectedFeature(feature);\n        console.log('HomeView - After setting selectedFeature:', {\n          storeSelectedFeature: dataStore.selectedFeature,\n        });\n\n        // 檢查當前是桌面版還是響應式版本\n        const isDesktop = window.innerWidth >= 1200; // xl breakpoint\n\n        if (isDesktop) {\n          // 桌面版：切換到右側屬性分頁\n          activeRightTab.value = 'properties';\n        } else {\n          // 響應式版本：切換到底部屬性分頁\n          activeLowerTab.value = 'properties';\n\n          // 如果底部面板高度太小，自動調整到合適的高度\n          if (mobileBottomViewHeight.value < 30) {\n            mobileBottomViewHeight.value = 40; // 設定為 40vh，提供足夠空間顯示屬性\n          }\n        }\n      };\n\n      /**\n       * 🎯 處理高亮顯示事件 (Handle Highlight Event)\n       * 在地圖上高亮顯示指定的特徵\n       * @param {Object} highlightData - 包含 layerId 和 id 的物件\n       */\n      const handleHighlight = (highlightData) => {\n        console.log('🎯 HomeView 處理高亮顯示:', highlightData);\n\n        // 如果當前不在地圖視圖，先切換到地圖\n        if (activeUpperTab.value !== 'map') {\n          activeUpperTab.value = 'map';\n        }\n\n        // 使用 nextTick 確保地圖組件已渲染完成\n        nextTick(() => {\n          // 檢查當前是桌面版還是響應式版本\n          const isDesktop = window.innerWidth >= 1200; // xl breakpoint\n\n          if (isDesktop) {\n            // 桌面版：使用 MiddleView\n            if (middlePanelRef.value) {\n              middlePanelRef.value.highlightFeature(highlightData);\n            } else {\n              console.error('❌ 無法高亮顯示: middlePanelRef 不可用');\n            }\n          } else {\n            // 響應式版本：使用 UpperView\n            if (mobileUpperViewRef.value) {\n              mobileUpperViewRef.value.highlightFeature(highlightData);\n            } else {\n              console.error('❌ 無法高亮顯示: mobileUpperViewRef 不可用');\n            }\n          }\n        });\n      };\n\n      // 📏 響應式垂直調整狀態\n      /**\n       * 📏 計算底部面板最小高度百分比 (Calculate Minimum Bottom Panel Height Percentage)\n       * 確保底部導航按鈕始終可見\n       */\n      const calculateMinBottomHeight = () => {\n        const minNavigationHeight = 100; // px (基本高度 80px + 安全區域 20px)\n        const currentWindowHeight = window.innerHeight;\n        return Math.max(10, (minNavigationHeight / currentWindowHeight) * 100); // 最小 10vh，確保基本可用性\n      };\n\n      const mobileBottomViewHeight = ref(Math.max(40, calculateMinBottomHeight())); // vh 單位，確保不小於最小高度\n      const isVerticalDragging = ref(false);\n      const mobileMapKey = ref(0); // 強制重新渲染地圖的 key\n\n      /**\n       * 🔧 開始垂直調整大小 (Start Vertical Resize)\n       * 響應式布局中的垂直拖曳調整功能，支援滑鼠和觸控操作\n       * @param {MouseEvent|TouchEvent} event - 滑鼠或觸控事件對象\n       */\n      const startVerticalResize = (event) => {\n        event.preventDefault();\n        event.stopPropagation();\n\n        // 設定拖曳狀態\n        isVerticalDragging.value = true;\n        document.body.classList.add('my-no-select');\n\n        // 判斷是觸控還是滑鼠事件\n        const isTouch = event.type.startsWith('touch');\n        const clientY = isTouch ? event.touches[0].clientY : event.clientY;\n\n        // 記錄初始位置和狀態\n        const startY = clientY;\n        const startBottomHeight = mobileBottomViewHeight.value;\n        const windowHeight = window.innerHeight;\n\n        console.log('🔧 HomeView - 開始垂直調整', {\n          startY,\n          startBottomHeight,\n          windowHeight,\n          isTouch,\n        });\n\n        /**\n         * 🖱️ 處理移動事件（滑鼠或觸控）\n         */\n        const handleMove = (moveEvent) => {\n          moveEvent.preventDefault();\n\n          const currentY = moveEvent.type.startsWith('touch')\n            ? moveEvent.touches[0].clientY\n            : moveEvent.clientY;\n\n          const deltaY = currentY - startY;\n\n          // 計算新的底部高度百分比\n          const deltaPercent = (deltaY / windowHeight) * 100;\n          let newHeight = startBottomHeight - deltaPercent;\n\n          // 使用動態計算的最小高度，確保底部按鈕始終可見\n          const minHeightPercent = calculateMinBottomHeight();\n\n          // 限制在最小高度到100vh範圍內，確保底部按鈕始終可見\n          newHeight = Math.max(minHeightPercent, Math.min(100, newHeight));\n\n          mobileBottomViewHeight.value = Math.round(newHeight);\n        };\n\n        /**\n         * 🖱️ 處理結束事件（滑鼠放開或觸控結束）\n         */\n        const handleEnd = () => {\n          isVerticalDragging.value = false;\n          document.body.classList.remove('my-no-select');\n\n          // 移除滑鼠事件監聽器\n          document.removeEventListener('mousemove', handleMove);\n          document.removeEventListener('mouseup', handleEnd);\n\n          // 移除觸控事件監聽器\n          document.removeEventListener('touchmove', handleMove);\n          document.removeEventListener('touchend', handleEnd);\n          document.removeEventListener('touchcancel', handleEnd);\n\n          console.log('🔧 HomeView - 垂直調整結束', {\n            finalHeight: mobileBottomViewHeight.value,\n          });\n        };\n\n        // 註冊事件監聽器（同時支援滑鼠和觸控）\n        if (isTouch) {\n          document.addEventListener('touchmove', handleMove, { passive: false });\n          document.addEventListener('touchend', handleEnd);\n          document.addEventListener('touchcancel', handleEnd);\n        } else {\n          document.addEventListener('mousemove', handleMove);\n          document.addEventListener('mouseup', handleEnd);\n        }\n      };\n\n      // 🔄 監聽窗口大小變化並強制重新渲染響應式地圖\n      watch(windowHeight, () => {\n        // 延遲一點更新 key 來強制重新渲染地圖\n        setTimeout(() => {\n          mobileMapKey.value += 1;\n        }, 100);\n      });\n\n      // 🔄 監聽螢幕大小變化，在桌面版和響應式版本切換時重新渲染地圖\n      const handleScreenSizeChange = () => {\n        console.log('🔄 HomeView: 螢幕尺寸跨越斷點，重新初始化地圖');\n\n        // 強制重新渲染響應式地圖\n        mobileMapKey.value += 1;\n\n        // 延遲處理地圖尺寸重新計算，確保DOM完全更新\n        nextTick(() => {\n          setTimeout(() => {\n            const isDesktop = window.innerWidth >= 1200;\n\n            if (isDesktop) {\n              // 桌面版：處理 MiddleView 中的地圖\n              if (middlePanelRef.value) {\n                console.log('🖥️ HomeView: 切換到桌面版，處理 MiddleView 地圖');\n                // 通過 MiddleView 調用 UpperView 的地圖尺寸重新計算\n                if (middlePanelRef.value.invalidateMapSize) {\n                  middlePanelRef.value.invalidateMapSize();\n                }\n                // 觸發全域 resize 事件作為備用方案\n                setTimeout(() => {\n                  const event = new Event('resize');\n                  window.dispatchEvent(event);\n                }, 100);\n              }\n            } else {\n              // 響應式版本：處理 mobileUpperViewRef 中的地圖\n              if (mobileUpperViewRef.value) {\n                console.log('📱 HomeView: 切換到響應式版本，處理 UpperView 地圖');\n                // 直接調用 UpperView 的地圖尺寸重新計算\n                if (mobileUpperViewRef.value.invalidateMapSize) {\n                  mobileUpperViewRef.value.invalidateMapSize();\n                }\n              }\n            }\n          }, 300); // 增加延遲時間，確保佈局切換完成\n        });\n      };\n\n      // 🔄 使用 ResizeObserver 監聽螢幕尺寸變化\n      let screenSizeObserver = null;\n\n      onUnmounted(() => {\n        // 清理事件監聽器\n        window.removeEventListener('resize', handleResize);\n\n        // 清理螢幕尺寸觀察器\n        if (screenSizeObserver) {\n          screenSizeObserver.disconnect();\n        }\n      });\n\n      // 📤 返回響應式數據和函數給模板使用 (Return Reactive Data and Functions)\n      return {\n        // 📚 組件引用\n        middlePanelRef, // 中間面板引用\n\n        // 📑 分頁狀態\n        activeUpperTab, // 主要分頁狀態\n        activeBottomTab, // 底部分頁狀態\n        activeRightTab, // 右側分頁狀態\n        activeLowerTab, // 響應式下半部分頁狀態\n\n        // ⏳ 載入狀態\n        isAnyLayerLoading, // 是否有圖層正在載入\n        loadingText, // 載入文字\n        loadingProgress, // 載入進度\n        showLoadingProgress, // 是否顯示進度條\n        loadingSubText, // 載入子文字\n\n        // 🗺️ 圖層狀態\n        selectedFilter, // 選定篩選器\n\n        // 🗺️ 地圖狀態\n        zoomLevel, // 地圖縮放等級\n        currentCoords, // 當前地圖座標\n\n        // 📊 統計數據\n        activeMarkers, // 作用中標記數量\n\n        // 📏 面板尺寸（百分比系統）\n        leftViewWidth, // 左側面板寬度百分比\n        rightViewWidth, // 右側面板寬度百分比\n        leftViewWidthPx, // 左側面板像素寬度\n        rightViewWidthPx, // 右側面板像素寬度\n        mainPanelWidth, // 中間面板寬度百分比\n        mainPanelWidthPx, // 中間面板像素寬度\n\n        dataTableData, // 表格資料\n\n        // 📥 數據管理功能\n        resetView, // 重設視圖\n\n        // 🔧 拖拽調整功能\n        startResize, // 開始調整大小\n        startVerticalResize, // 開始垂直調整大小\n        isSidePanelDragging, // 側邊面板拖曳狀態\n        isVerticalDragging, // 垂直拖曳狀態\n        mobileBottomViewHeight, // 響應式底部面板高度\n        mobileMapKey, // 響應式地圖重新渲染 key\n        validatePanelSizes, // 驗證面板尺寸\n\n        // 🛠️ 工具函數\n        appFooterRef, // 頁腳引用\n        mobileUpperViewRef, // 響應式上半部面板引用\n        calculatedMiddleViewHeight, // 計算的中間面板高度\n        handleHighlight, // 處理高亮顯示\n\n        // 🎯 互動函數\n        updateActiveMarkers, // 更新作用中標記\n        handleFeatureSelected, // 處理特徵選中\n      };\n    },\n  };\n</script>\n\n<template>\n  <!-- 🏠 HomeView.vue - 首頁視圖組件 (Home View Component) -->\n  <!-- 提供長照資訊系統的主要用戶界面，包含響應式三面板佈局系統 -->\n  <div id=\"app\" class=\"d-flex flex-column vh-100\">\n    <!-- 📥 載入覆蓋層 (Loading Overlay) -->\n    <!-- 在資料載入時顯示，提供視覺化的載入進度回饋 -->\n    <LoadingOverlay\n      :isVisible=\"isAnyLayerLoading\"\n      :loadingText=\"loadingText\"\n      :progress=\"loadingProgress\"\n      :showProgress=\"showLoadingProgress\"\n      :subText=\"loadingSubText\"\n    />\n\n    <!-- 📱 主要內容區域 (Main Content Area) -->\n    <!-- 使用計算高度為 footer 留出空間，避免擋住滾動條 -->\n    <div class=\"d-flex flex-column overflow-hidden\">\n      <!-- 🚀 路由視圖區域 (Router View Area) -->\n      <!-- 顯示非首頁的路由組件內容 -->\n      <div v-if=\"$route.path !== '/'\" class=\"h-100\">\n        <router-view />\n      </div>\n\n      <!-- 🏠 首頁內容區域 (Home Page Content Area) -->\n      <!-- Schematic Map系統的主要功能界面，使用響應式三面板佈局 -->\n      <div v-if=\"$route.path === '/'\" class=\"h-100 d-flex flex-column overflow-hidden\">\n        <!-- 🖥️ 桌面版佈局 (Desktop Layout - xl and above) -->\n        <div class=\"d-none d-xl-flex flex-row overflow-hidden h-100\">\n          <!-- 🎛️ 左側控制面板容器 (Left Control Panel Container) -->\n          <!-- 包含圖層控制、資料載入等功能，支援動態寬度調整 -->\n          <div\n            class=\"h-100 overflow-y-auto overflow-x-hidden my-left-panel\"\n            :style=\"{ width: leftViewWidthPx }\"\n            v-if=\"leftViewWidth > 0\"\n          >\n            <LeftView />\n          </div>\n\n          <!-- 🔧 左側拖曳調整器 (Left Panel Resizer) -->\n          <!-- 提供滑鼠拖曳功能，動態調整左側面板寬度 -->\n          <div\n            class=\"my-resizer my-resizer-vertical my-resizer-left\"\n            :class=\"{ 'my-dragging': isSidePanelDragging }\"\n            @mousedown=\"startResize('left', $event)\"\n            title=\"拖曳調整左側面板寬度\"\n          ></div>\n\n          <!-- 🌟 中間主要顯示區域 (Main Display Area) -->\n          <!-- 包含地圖、儀表板、資料表格等核心功能組件 -->\n          <MiddleView\n            ref=\"middlePanelRef\"\n            class=\"d-flex flex-column overflow-hidden h-100 my-middle-panel\"\n            style=\"z-index: 1\"\n            :style=\"{ width: mainPanelWidthPx, 'min-width': '0px' }\"\n            :dynamicMainAreaHeight=\"calculatedMiddleViewHeight\"\n            :activeUpperTab=\"activeUpperTab\"\n            :activeBottomTab=\"activeBottomTab\"\n            :mainPanelWidth=\"mainPanelWidth\"\n            :selectedFilter=\"selectedFilter\"\n            :zoomLevel=\"zoomLevel\"\n            :currentCoords=\"currentCoords\"\n            :activeMarkers=\"activeMarkers\"\n            :isLoadingData=\"isAnyLayerLoading\"\n            :isSidePanelDragging=\"isSidePanelDragging\"\n            @update:activeUpperTab=\"activeUpperTab = $event\"\n            @update:activeBottomTab=\"activeBottomTab = $event\"\n            @update:zoomLevel=\"zoomLevel = $event\"\n            @update:currentCoords=\"currentCoords = $event\"\n            @update:activeMarkers=\"activeMarkers = $event\"\n            @reset-view=\"resetView\"\n            @highlight-on-map=\"handleHighlight\"\n            @highlight-feature=\"handleHighlight\"\n            @feature-selected=\"handleFeatureSelected\"\n          />\n\n          <!-- 🔧 右側拖曳調整器 (Right Panel Resizer) -->\n          <!-- 提供滑鼠拖曳功能，動態調整右側面板寬度 -->\n          <div\n            class=\"my-resizer my-resizer-vertical my-resizer-right\"\n            :class=\"{ 'my-dragging': isSidePanelDragging }\"\n            @mousedown=\"startResize('right', $event)\"\n            title=\"拖曳調整右側面板寬度\"\n          ></div>\n\n          <!-- 📈 右側控制面板容器 (Right Control Panel Container) -->\n          <!-- 包含物件屬性、分析清單等輔助功能，支援動態寬度調整 -->\n          <div\n            class=\"h-100 overflow-auto\"\n            :style=\"{ width: rightViewWidthPx }\"\n            v-if=\"rightViewWidth > 0\"\n          >\n            <RightView\n              :activeRightTab=\"activeRightTab\"\n              :activeMarkers=\"activeMarkers\"\n              :rightViewWidth=\"rightViewWidth\"\n              @update:activeRightTab=\"activeRightTab = $event\"\n              @highlight-feature=\"handleHighlight\"\n              :current-coords=\"currentCoords\"\n            />\n          </div>\n        </div>\n\n        <!-- 📱 行動版/平板版佈局 (Mobile/Tablet Layout - below xl) -->\n        <div class=\"d-flex d-xl-none flex-column overflow-hidden h-100\">\n          <!-- 🌟 上半部區域 (Upper Area) - 只包含地圖和儀表板 -->\n          <div\n            class=\"flex-shrink-0 overflow-hidden d-flex flex-column\"\n            :style=\"{ height: 100 - mobileBottomViewHeight + 'vh' }\"\n            v-if=\"mobileBottomViewHeight < 100\"\n          >\n            <UpperView\n              ref=\"mobileUpperViewRef\"\n              :key=\"mobileMapKey\"\n              :activeUpperTab=\"activeUpperTab\"\n              :mainPanelWidth=\"100\"\n              :contentHeight=\"Math.max(400, (100 - mobileBottomViewHeight) * windowHeight * 0.01)\"\n              :selectedFilter=\"selectedFilter\"\n              :zoomLevel=\"zoomLevel\"\n              :isPanelDragging=\"isVerticalDragging\"\n              :activeMarkers=\"activeMarkers\"\n              @update:activeUpperTab=\"activeUpperTab = $event\"\n              @update:zoomLevel=\"zoomLevel = $event\"\n              @update:currentCoords=\"currentCoords = $event\"\n              @update:activeMarkers=\"activeMarkers = $event\"\n              @feature-selected=\"handleFeatureSelected\"\n            />\n          </div>\n\n          <!-- 🔧 水平拖曳調整器 (Horizontal Resizer) -->\n          <div\n            class=\"my-resizer my-resizer-horizontal my-resizer-middle\"\n            :class=\"{ 'my-dragging': isVerticalDragging }\"\n            @mousedown=\"startVerticalResize\"\n            @touchstart=\"startVerticalResize\"\n            title=\"拖曳調整底部面板高度\"\n            v-if=\"mobileBottomViewHeight > 0 && mobileBottomViewHeight < 100\"\n          ></div>\n\n          <!-- 📋 下半部區域 (Lower Area) - 包含所有其他 tabs -->\n          <div\n            class=\"flex-shrink-0 overflow-hidden\"\n            :style=\"{ height: mobileBottomViewHeight + 'vh' }\"\n            v-if=\"mobileBottomViewHeight > 0\"\n          >\n            <ResponsiveLowerView\n              :activeTab=\"activeLowerTab\"\n              :activeRightTab=\"activeRightTab\"\n              :activeBottomTab=\"activeBottomTab\"\n              @update:activeTab=\"activeLowerTab = $event\"\n              @update:activeRightTab=\"activeRightTab = $event\"\n              @update:activeBottomTab=\"activeBottomTab = $event\"\n              @highlight-on-map=\"handleHighlight\"\n              @highlight-feature=\"handleHighlight\"\n              @feature-selected=\"handleFeatureSelected\"\n            />\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <!-- 🦶 頁腳區域 (Footer Area) -->\n    <!-- 固定高度 footer，提供版權資訊和技術鳴謝 -->\n    <!-- 只在 xl breakpoint 以上顯示 -->\n    <footer\n      class=\"d-none d-xl-flex justify-content-between my-app-footer my-title-sm-white my-bgcolor-gray-800 p-2\"\n      ref=\"appFooterRef\"\n    >\n      <small>臺灣大學地理環境資源學系</small>\n      <small>2025</small>\n    </footer>\n  </div>\n</template>\n\n<style>\n  /**\n * 🎨 應用程式全域樣式 (Application Global Styles)\n *\n * 引入共用 CSS 並定義全域樣式，主要使用 Bootstrap 佈局系統\n */\n  @import '../assets/css/common.css';\n\n  /* 📱 HomeView 專用樣式 (HomeView Specific Styles) */\n  /* 其他通用樣式已移至 common.css 中統一管理 */\n</style>\n","/**\n * 📊 數據處理核心模組 (Data Processing Core Module)\n *\n * 這是一個專為示意圖響應式網站設計的數據處理核心模組，負責處理各種格式的地理空間數據，\n * 並將其轉換為適合前端視覺化組件使用的標準化格式。該模組是整個系統的數據處理中心，\n * 確保數據的完整性、一致性和可用性。\n *\n * 🎯 主要功能 (Core Features):\n * 1. 📁 JSON 檔案載入：支援多種 JSON 格式的地理空間數據載入\n *    - 網格示意圖數據：包含 x, y 座標的網格節點數據\n *    - 行政區示意圖數據：包含節點和連線的複雜網絡數據\n *    - 一般地理數據：標準的 GeoJSON 或自定義格式數據\n * 2. 📋 數據預處理：將原始數據轉換為標準化格式\n *    - 數據驗證和清理：確保數據完整性和正確性\n *    - 格式標準化：統一不同來源的數據格式\n *    - 數據增強：添加必要的計算屬性和元數據\n * 3. 📊 統計摘要生成：自動計算並生成數據統計信息\n *    - 節點數量統計：計算總節點數、可見節點數等\n *    - 空間範圍計算：計算數據的地理邊界和範圍\n *    - 數據品質指標：評估數據的完整性和準確性\n * 4. 📈 表格數據建構：生成適合表格組件顯示的數據結構\n *    - 可排序的數據列：支援按不同屬性排序\n *    - 可篩選的數據行：支援條件篩選和搜索\n *    - 分頁支援：處理大量數據的分頁顯示\n *\n * 🔧 技術特點 (Technical Features):\n * - 異步數據載入：使用 Promise 和 async/await 處理異步操作\n * - 錯誤處理機制：完整的錯誤捕獲和恢復機制\n * - 記憶體優化：高效的數據結構和垃圾回收\n * - 模組化設計：可重用的函數和組件\n * - 類型安全：完整的 JSDoc 類型註解\n *\n * 📊 支援的數據格式 (Supported Data Formats):\n * - JSON 網格數據：包含 x, y 尺寸參數的網格配置\n * - JSON 節點數據：包含節點座標、屬性、連線的網絡數據\n * - JSON 行政區數據：包含行政區邊界和屬性的地理數據\n * - 自定義格式：可擴展支援其他數據格式\n *\n * 🏗️ 架構設計 (Architecture Design):\n * - 單一職責原則：每個函數只負責一個特定功能\n * - 開放封閉原則：易於擴展新功能，無需修改現有代碼\n * - 依賴反轉原則：依賴抽象而非具體實現\n * - 介面隔離原則：提供最小化的必要介面\n *\n * 🚀 使用範例 (Usage Examples):\n * ```javascript\n * // 載入網格示意圖數據\n * const gridData = await loadGridSchematicJson({\n *   jsonFileName: 'test/test.json'\n * });\n *\n * // 載入行政區示意圖數據\n * const layerData = await loadDataLayerJson({\n *   jsonFileName: 'taipei/taipei_schematic.json'\n * });\n * ```\n *\n * 🔄 數據流程 (Data Flow):\n * 1. 接收圖層配置對象\n * 2. 根據配置選擇適當的載入函數\n * 3. 從指定路徑載入 JSON 數據\n * 4. 驗證數據格式和完整性\n * 5. 執行數據預處理和轉換\n * 6. 生成統計摘要和表格數據\n * 7. 返回標準化的數據對象\n *\n * ⚠️ 注意事項 (Important Notes):\n * - 所有數據載入操作都是異步的，需要使用 await 或 .then()\n * - 載入失敗時會拋出錯誤，需要適當的錯誤處理\n * - 大型數據集可能需要較長的載入時間\n * - 建議在載入過程中顯示進度指示器\n *\n * @file dataProcessor.js\n * @version 3.0.0\n * @author Kevin Cheng\n * @since 1.0.0\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API} Fetch API 文檔\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise} Promise 文檔\n */\n\n// ==================== ⚙️ 配置常數 (Configuration Constants) ====================\n\n/**\n * 📁 檔案路徑配置 (File Path Configuration)\n *\n * 定義應用程式在不同環境下的數據文件路徑配置。這個配置對象確保了應用程式\n * 在開發環境和生產環境中都能正確載入數據文件，並提供了備用路徑機制以增強\n * 系統的穩定性和容錯能力。\n *\n * 🎯 設計目標 (Design Goals):\n * - 環境適應性：自動適應開發和生產環境的不同路徑需求\n * - 容錯機制：提供備用路徑，確保數據載入的穩定性\n * - 維護性：集中管理路徑配置，便於後續維護和更新\n * - 擴展性：易於添加新的路徑配置和環境支援\n *\n * 🔧 路徑策略 (Path Strategy):\n * - 生產環境：使用 GitHub Pages 的完整路徑，包含專案名稱\n * - 開發環境：使用相對路徑，便於本地開發和測試\n * - 備用路徑：當主要路徑失敗時，自動嘗試備用路徑\n * - 動態檢測：根據當前環境自動選擇適當的路徑\n *\n * 📊 路徑說明 (Path Descriptions):\n * - JSON: 主要數據文件路徑，用於生產環境部署\n * - FALLBACK_JSON: 備用數據文件路徑，用於開發環境或主要路徑失敗時\n *\n * 🚀 使用範例 (Usage Examples):\n * ```javascript\n * // 載入數據文件\n * const response = await loadFile(\n *   `${PATH_CONFIG.JSON}/${fileName}`,\n *   `${PATH_CONFIG.FALLBACK_JSON}/${fileName}`\n * );\n * ```\n *\n * ⚠️ 注意事項 (Important Notes):\n * - 路徑配置需要與實際的文件結構保持一致\n * - 修改路徑配置後需要重新建置應用程式\n * - 確保所有環境都有對應的數據文件\n *\n * @type {Object}\n * @property {string} JSON - 主要 JSON 文件路徑（生產環境）\n * @property {string} FALLBACK_JSON - 備用 JSON 文件路徑（開發環境）\n * @since 1.0.0\n */\nconst PATH_CONFIG = {\n  /**\n   * JSON 文件路徑 - 生產環境\n   * 用於 GitHub Pages 部署的完整路徑，包含專案名稱\n   * 格式：/schematic-map-rwd/data\n   */\n  JSON: '/schematic-map-rwd/data',\n\n  /**\n   * 備用 JSON 路徑 - 開發環境\n   * 用於本地開發環境的相對路徑\n   * 格式：/data\n   */\n  FALLBACK_JSON: '/data',\n};\n\n// ==================== 🔧 輔助函數 (Helper Functions) ====================\n\n/**\n * 📁 通用檔案載入函數 (Generic File Loading Function)\n *\n * 這是一個高級檔案載入函數，提供了完整的容錯機制和詳細的錯誤處理。\n * 它支援主要路徑和備用路徑的檔案載入，確保在各種環境下都能成功載入數據文件。\n * 該函數是整個數據載入系統的核心，為上層函數提供了穩定可靠的檔案載入服務。\n *\n * 🎯 核心功能 (Core Features):\n * - 雙路徑載入：支援主要路徑和備用路徑的檔案載入\n * - 自動容錯：主要路徑失敗時自動嘗試備用路徑\n * - 詳細日誌：提供完整的載入過程日誌記錄\n * - 錯誤處理：完整的錯誤捕獲和錯誤信息提供\n * - 狀態追蹤：實時追蹤載入狀態和進度\n *\n * 🔧 技術實現 (Technical Implementation):\n * - 使用 Fetch API 進行異步檔案載入\n * - 支援 HTTP 狀態碼檢查和錯誤處理\n * - 提供詳細的錯誤信息和調試日誌\n * - 支援 Promise 鏈式調用和 async/await 語法\n *\n * 📊 載入流程 (Loading Process):\n * 1. 驗證輸入參數的有效性\n * 2. 嘗試從主要路徑載入檔案\n * 3. 檢查 HTTP 響應狀態\n * 4. 如果主要路徑失敗，嘗試備用路徑\n * 5. 記錄載入過程和結果\n * 6. 返回響應對象或拋出錯誤\n *\n * 🚀 使用範例 (Usage Examples):\n * ```javascript\n * // 基本用法 - 只使用主要路徑\n * try {\n *   const response = await loadFile('/data/example.json');\n *   const data = await response.json();\n *   console.log('數據載入成功:', data);\n * } catch (error) {\n *   console.error('載入失敗:', error.message);\n * }\n *\n * // 進階用法 - 使用備用路徑\n * try {\n *   const response = await loadFile(\n *     '/schematic-map-rwd/data/taipei.json',\n *     '/data/taipei.json'\n *   );\n *   const data = await response.json();\n *   console.log('數據載入成功:', data);\n * } catch (error) {\n *   console.error('所有路徑都載入失敗:', error.message);\n * }\n * ```\n *\n * ⚠️ 錯誤處理 (Error Handling):\n * - 網路錯誤：網路連接問題或伺服器無響應\n * - HTTP 錯誤：4xx 或 5xx 狀態碼\n * - 檔案不存在：404 錯誤\n * - 權限問題：403 錯誤\n * - 所有路徑失敗：主要路徑和備用路徑都無法載入\n *\n * 🔍 調試信息 (Debug Information):\n * - 載入開始：記錄嘗試載入的檔案路徑\n * - 載入成功：記錄成功載入的檔案路徑\n * - 載入失敗：記錄失敗原因和錯誤信息\n * - 路徑切換：記錄從主要路徑切換到備用路徑\n *\n * @param {string} primaryPath - 主要檔案路徑，優先嘗試載入此路徑\n * @param {string} [fallbackPath=null] - 備用檔案路徑，主要路徑失敗時使用\n * @returns {Promise<Response>} - 成功載入的檔案響應物件\n * @throws {Error} - 當所有路徑都無法載入時拋出詳細錯誤信息\n *\n * @example\n * // 載入 JSON 檔案\n * const response = await loadFile('/data/example.json');\n * const data = await response.json();\n *\n * // 載入帶備用路徑的檔案\n * const response = await loadFile('/data/file.json', '/fallback/file.json');\n *\n * @since 1.0.0\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API} Fetch API 文檔\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/Response} Response 文檔\n */\nasync function loadFile(primaryPath, fallbackPath = null) {\n  console.log(`📁 嘗試載入檔案: ${primaryPath}`);\n\n  try {\n    // 嘗試載入主要路徑\n    const response = await fetch(primaryPath);\n\n    if (!response.ok) {\n      throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n    }\n\n    console.log(`✅ 檔案載入成功: ${primaryPath}`);\n    return response;\n  } catch (error) {\n    console.warn(`⚠️ 主要路徑載入失敗: ${primaryPath}`, error.message);\n\n    // 如果有備用路徑，嘗試載入備用路徑\n    if (fallbackPath) {\n      console.log(`📁 嘗試備用路徑: ${fallbackPath}`);\n\n      try {\n        const fallbackResponse = await fetch(fallbackPath);\n\n        if (!fallbackResponse.ok) {\n          throw new Error(`HTTP ${fallbackResponse.status}: ${fallbackResponse.statusText}`);\n        }\n\n        console.log(`✅ 備用路徑載入成功: ${fallbackPath}`);\n        return fallbackResponse;\n      } catch (fallbackError) {\n        console.error(`❌ 備用路徑也載入失敗: ${fallbackPath}`, fallbackError.message);\n        throw new Error(\n          `無法載入檔案。主要路徑: ${primaryPath}, 備用路徑: ${fallbackPath}。錯誤: ${error.message}`\n        );\n      }\n    }\n\n    // 沒有備用路徑或備用路徑也失敗\n    throw new Error(`無法載入檔案: ${primaryPath}。錯誤: ${error.message}`);\n  }\n}\n\n// ==================== 主要函數 ====================\n\n/**\n * 📊 載入數據圖層 JSON 資料 (Load Data Layer JSON Data)\n *\n * 這是一個專門用於載入數據圖層 JSON 資料的函數，主要處理包含節點和連線信息的\n * 複雜地理空間數據。該函數支援多種數據格式，包括示意圖節點數據和標準地理數據，\n * 並提供完整的數據預處理和格式轉換功能。\n *\n * 🎯 主要功能 (Main Features):\n * - 數據圖層載入：從指定路徑載入 JSON 格式的數據圖層\n * - 格式識別：自動識別數據格式（示意圖節點或標準地理數據）\n * - 數據預處理：執行必要的數據清理和格式轉換\n * - 統計計算：生成數據統計摘要和表格數據\n * - 錯誤處理：提供完整的錯誤捕獲和恢復機制\n *\n * 🔧 支援的數據格式 (Supported Data Formats):\n * - 示意圖節點數據：包含節點陣列和路線信息的複雜數據結構\n * - 標準地理數據：包含地理要素屬性的標準 JSON 格式\n * - 自定義格式：可擴展支援其他自定義數據格式\n *\n * 📊 數據處理流程 (Data Processing Flow):\n * 1. 接收圖層配置對象，提取 JSON 文件名稱\n * 2. 使用 loadFile 函數載入 JSON 數據文件\n * 3. 解析 JSON 數據並驗證格式\n * 4. 調用 processDataLayerJson 進行數據預處理\n * 5. 返回標準化的數據對象\n *\n * 🚀 使用範例 (Usage Examples):\n * ```javascript\n * // 載入台北捷運數據\n * const layer = {\n *   jsonFileName: 'taipei/taipei_schematic.json',\n *   layerName: 'Taipei Metro',\n *   type: 'point'\n * };\n *\n * try {\n *   const result = await loadDataLayerJson(layer);\n *   console.log('數據載入成功:', result.dashboardData);\n *   console.log('表格數據:', result.dataTableData);\n * } catch (error) {\n *   console.error('載入失敗:', error.message);\n * }\n * ```\n *\n * 📈 返回數據結構 (Return Data Structure):\n * ```javascript\n * {\n *   jsonData: Object | null,     // 原始 JSON 數據（不可修改）\n *   processedJsonData: Object | null, // 處理後的 JSON 數據（用於顯示和計算）\n *   dashboardData: Object,         // 統計摘要數據\n *   dataTableData: Array,           // 表格顯示數據\n *   layerInfoData: Object,          // 圖層資訊數據\n * }\n * ```\n *\n * ⚠️ 注意事項 (Important Notes):\n * - 該函數是異步的，需要使用 await 或 .then() 處理\n * - 載入失敗時會拋出錯誤，需要適當的錯誤處理\n * - 大型數據集可能需要較長的載入時間\n * - 建議在載入過程中顯示進度指示器\n *\n * @param {Object} layer - 圖層配置對象，包含載入所需的配置信息\n * @param {string} layer.jsonFileName - JSON 文件名稱，相對於數據目錄\n * @param {string} [layer.layerName] - 圖層名稱，用於日誌記錄\n * @param {string} [layer.type] - 圖層類型，用於數據處理\n * @returns {Promise<Object>} - 包含處理後數據的對象\n * @throws {Error} - 當載入或處理失敗時拋出錯誤\n *\n * @example\n * // 基本用法\n * const layer = { jsonFileName: 'taipei/metro.json' };\n * const data = await loadDataLayerJson(layer);\n *\n * @since 1.0.0\n * @see {@link loadFile} 通用檔案載入函數\n * @see {@link processDataLayerJson} 數據圖層處理函數\n */\nexport async function loadDataLayerJson(layer) {\n  try {\n    console.log('🔄 載入數據圖層 JSON 資料...');\n\n    const fileName = layer.jsonFileName;\n    // 數據圖層直接從 /data/ 路徑載入\n    const dataPath = `${PATH_CONFIG.JSON}/${fileName}`;\n    const response = await loadFile(dataPath);\n\n    const jsonData = await response.json();\n\n    // 處理數據圖層的特殊邏輯\n    return await processDataLayerJson(jsonData);\n  } catch (error) {\n    console.error('❌ 數據圖層 JSON 數據載入或處理失敗:', error);\n    throw error;\n  }\n}\n\n/**\n * 🎲 為節點隨機分配數值 (Randomize Node Values)\n *\n * 這是一個用於為節點數據隨機分配數值的輔助函數，主要用於測試和演示目的。\n * 該函數會為每個節點隨機分配一個 1-5 之間的整數值，用於模擬真實的數據分布\n * 和測試視覺化組件的顯示效果。\n *\n * 🎯 主要功能 (Main Features):\n * - 隨機數值生成：為每個節點生成 1-5 範圍內的隨機整數\n * - 數據保持：保持原始節點的其他屬性不變\n * - 詳細日誌：記錄每個節點的數值變化過程\n * - 批量處理：支援處理大量節點數據\n *\n * 🔧 技術實現 (Technical Implementation):\n * - 使用 Math.random() 生成隨機數\n * - 使用 Math.floor() 確保結果為整數\n * - 使用 map() 方法批量處理節點陣列\n * - 使用展開運算符保持原始屬性\n *\n * 📊 數值分布 (Value Distribution):\n * - 最小值：1\n * - 最大值：5\n * - 分布：均勻分布\n * - 類型：整數\n *\n * 🚀 使用範例 (Usage Examples):\n * ```javascript\n * // 基本用法\n * const nodes = [\n *   { id: 1, coord: { x: 0, y: 0 }, value: 0 },\n *   { id: 2, coord: { x: 1, y: 0 }, value: 0 }\n * ];\n *\n * const randomizedNodes = randomizeNodeValues(nodes);\n * console.log(randomizedNodes);\n * // 輸出: [\n * //   { id: 1, coord: { x: 0, y: 0 }, value: 3 },\n * //   { id: 2, coord: { x: 1, y: 0 }, value: 1 }\n * // ]\n * ```\n *\n * 📈 輸入數據格式 (Input Data Format):\n * ```javascript\n * [\n *   {\n *     id: number,           // 節點唯一識別碼\n *     coord: { x: number, y: number },  // 節點座標\n *     value: any,           // 原始數值（將被覆蓋）\n *     [其他屬性]: any       // 其他節點屬性\n *   }\n * ]\n * ```\n *\n * 📈 輸出數據格式 (Output Data Format):\n * ```javascript\n * [\n *   {\n *     id: number,           // 節點唯一識別碼（保持不變）\n *     coord: { x: number, y: number },  // 節點座標（保持不變）\n *     value: number,        // 隨機分配的數值（1-5）\n *     [其他屬性]: any       // 其他節點屬性（保持不變）\n *   }\n * ]\n * ```\n *\n * 🔍 調試信息 (Debug Information):\n * - 處理開始：記錄原始節點數量\n * - 數值變化：記錄每個節點的數值變化\n * - 處理完成：記錄處理結果的前幾個節點\n *\n * ⚠️ 注意事項 (Important Notes):\n * - 該函數會修改節點的 value 屬性\n * - 其他節點屬性保持不變\n * - 每次調用都會生成不同的隨機數值\n * - 主要用於測試和演示，生產環境請使用真實數據\n *\n * @param {Array} nodes - 節點陣列，包含需要隨機化數值的節點對象\n * @returns {Array} - 處理後的節點陣列，每個節點的 value 屬性被隨機分配 1-5 的數值\n *\n * @example\n * // 隨機化節點數值\n * const nodes = [{ id: 1, coord: { x: 0, y: 0 }, value: 0 }];\n * const result = randomizeNodeValues(nodes);\n *\n * @since 1.0.0\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/random} Math.random() 文檔\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map} Array.map() 文檔\n */\nfunction randomizeNodeValues(nodes) {\n  console.log('🎲 開始隨機化節點數值，原始節點數量:', nodes.length);\n  const randomizedNodes = nodes.map((node) => {\n    const newValue = Math.floor(Math.random() * 5) + 1; // 生成 1-5 的隨機數\n    console.log(`🎲 節點 ${node.coord?.x},${node.coord?.y} 從 ${node.value} 變為 ${newValue}`);\n    return {\n      ...node,\n      value: newValue,\n    };\n  });\n  console.log('🎲 隨機化完成，前3個節點:', randomizedNodes.slice(0, 3));\n  return randomizedNodes;\n}\n\n/**\n * 📊 載入網格示意圖 JSON 數據 (Load Grid Schematic JSON Data)\n *\n * 這是一個專門用於載入網格型示意圖數據的高級載入器，能夠根據 JSON 配置文件中的\n * 網格尺寸參數（x, y）動態生成對應的網格節點數據結構。該函數是網格示意圖功能\n * 的核心，為 D3.js 視覺化組件提供標準化的網格數據。\n *\n * 🎯 主要功能 (Main Features):\n * - 網格配置載入：從 JSON 文件讀取網格尺寸參數\n * - 動態網格生成：根據配置參數動態生成網格節點\n * - 數據結構標準化：生成符合視覺化組件要求的數據格式\n * - 統計摘要生成：自動計算網格統計信息和摘要數據\n * - 表格數據建構：生成適合表格顯示的數據結構\n *\n * 🔧 技術特點 (Technical Features):\n * - 異步數據載入：使用 Promise 和 async/await 處理異步操作\n * - 容錯機制：支援主要路徑和備用路徑的數據載入\n * - 動態生成：根據配置參數動態生成網格節點\n * - 數據驗證：確保網格參數的有效性和合理性\n * - 詳細日誌：提供完整的載入過程日誌記錄\n *\n * 📊 網格數據結構 (Grid Data Structure):\n * - 網格節點：包含 x, y 座標、數值、類型等屬性\n * - 網格尺寸：可配置的 x, y 方向節點數量\n * - 節點屬性：包含座標、數值、類型等完整信息\n * - 統計摘要：包含總節點數、網格尺寸等統計信息\n *\n * 🚀 使用範例 (Usage Examples):\n * ```javascript\n * // 載入網格示意圖數據\n * const layer = {\n *   jsonFileName: 'test/test.json',\n *   layerName: 'Grid Test',\n *   type: 'grid'\n * };\n *\n * try {\n *   const result = await loadGridSchematicJson(layer);\n *   console.log('網格數據:', result.jsonData);\n *   console.log('摘要數據:', result.dashboardData);\n *   console.log('表格數據:', result.dataTableData);\n * } catch (error) {\n *   console.error('載入失敗:', error.message);\n * }\n * ```\n *\n * 📈 輸入 JSON 格式 (Input JSON Format):\n * ```javascript\n * {\n *   \"x\": 10,        // 網格 X 方向節點數量\n *   \"y\": 10         // 網格 Y 方向節點數量\n * }\n * ```\n *\n * 📈 輸出數據結構 (Output Data Structure):\n * ```javascript\n * {\n *   jsonData: {\n *     gridX: number,        // 網格 X 方向節點數量\n *     gridY: number,        // 網格 Y 方向節點數量\n *     nodes: Array,         // 網格節點陣列\n *     type: 'grid'          // 數據類型標識\n *   },\n *   dashboardData: {\n *     totalNodes: number,   // 總節點數量\n *     gridSize: string,     // 網格尺寸描述\n *     gridX: number,        // X 方向節點數量\n *     gridY: number,        // Y 方向節點數量\n *     nodeCount: number     // 節點總數\n *   },\n *   dataTableData: Array,       // 表格顯示數據\n * }\n * ```\n *\n * 🔄 數據處理流程 (Data Processing Flow):\n * 1. 接收圖層配置對象，提取 JSON 文件名稱\n * 2. 使用 loadFile 函數載入 JSON 配置文件\n * 3. 解析 JSON 數據，提取 x, y 網格尺寸參數\n * 4. 驗證網格參數的有效性（確保為正整數）\n * 5. 動態生成網格節點數據結構\n * 6. 計算統計摘要和生成表格數據\n * 7. 返回標準化的網格數據對象\n *\n * ⚠️ 注意事項 (Important Notes):\n * - 該函數是異步的，需要使用 await 或 .then() 處理\n * - 網格尺寸參數必須為正整數\n * - 大型網格可能需要較長的生成時間\n * - 建議在生成過程中顯示進度指示器\n *\n * @param {Object} layer - 圖層配置對象，包含載入所需的配置信息\n * @param {string} layer.jsonFileName - JSON 文件名稱，相對於數據目錄\n * @param {string} [layer.layerName] - 圖層名稱，用於日誌記錄\n * @param {string} [layer.type] - 圖層類型，應為 'grid'\n * @returns {Promise<Object>} - 包含處理後網格數據的對象\n * @throws {Error} - 當載入或處理失敗時拋出錯誤\n *\n * @example\n * // 基本用法\n * const layer = { jsonFileName: 'test/test.json' };\n * const result = await loadGridSchematicJson(layer);\n * console.log(result.gridData); // 網格數據\n * console.log(result.dashboardData); // 摘要數據\n *\n * @since 1.0.0\n * @see {@link loadFile} 通用檔案載入函數\n * @see {@link processGridSchematicJson} 網格示意圖處理函數\n */\nexport async function loadGridSchematicJson(layer) {\n  try {\n    console.log('📊 載入網格示意圖 JSON 數據:', layer.jsonFileName);\n\n    // 載入 JSON 檔案\n    const response = await loadFile(\n      `${PATH_CONFIG.JSON}/${layer.jsonFileName}`,\n      `${PATH_CONFIG.FALLBACK_JSON}/${layer.jsonFileName}`\n    );\n\n    const jsonData = await response.json();\n\n    // 處理網格示意圖數據\n    return await processGridSchematicJson(jsonData);\n  } catch (error) {\n    console.error('❌ 網格示意圖 JSON 數據載入失敗:', error);\n    throw error;\n  }\n}\n\n/**\n * 📊 處理網格示意圖 JSON 數據 (Process Grid Schematic JSON Data)\n *\n * 這是一個專門用於處理網格示意圖 JSON 數據的核心函數，負責將原始的網格配置\n * 參數轉換為適合 D3.js 視覺化組件使用的標準化數據格式。該函數是網格示意圖\n * 數據處理流程的關鍵環節，確保數據的完整性和一致性。\n *\n * 🎯 主要功能 (Main Features):\n * - 網格參數解析：從 JSON 數據中提取 x, y 網格尺寸參數\n * - 動態網格生成：根據尺寸參數動態生成網格節點陣列\n * - 節點屬性設定：為每個節點設定座標、數值、類型等屬性\n * - 統計摘要計算：計算網格統計信息和摘要數據\n * - 表格數據建構：生成適合表格組件顯示的數據結構\n *\n * 🔧 技術實現 (Technical Implementation):\n * - 雙重迴圈生成：使用嵌套迴圈生成二維網格節點\n * - 隨機數值分配：為每個節點隨機分配 1-5 的數值\n * - 座標計算：根據網格位置計算節點的 x, y 座標\n * - 數據結構標準化：生成符合視覺化要求的標準數據格式\n *\n * 📊 網格生成邏輯 (Grid Generation Logic):\n * - 外層迴圈：遍歷 Y 方向（行）\n * - 內層迴圈：遍歷 X 方向（列）\n * - 節點座標：直接使用迴圈索引作為座標\n * - 節點數值：使用 Math.random() 生成 1-5 的隨機數\n * - 節點類型：預設為 1（可擴展支援多種類型）\n *\n * 🚀 使用範例 (Usage Examples):\n * ```javascript\n * // 處理網格配置數據\n * const jsonData = { x: 5, y: 5 };\n * const result = await processGridSchematicJson(jsonData);\n *\n * console.log('網格節點數量:', result.jsonData.nodes.length);\n * console.log('網格尺寸:', result.dashboardData.gridSize);\n * console.log('表格數據:', result.dataTableData);\n * ```\n *\n * 📈 輸入數據格式 (Input Data Format):\n * ```javascript\n * {\n *   \"x\": 10,        // 網格 X 方向節點數量\n *   \"y\": 10         // 網格 Y 方向節點數量\n * }\n * ```\n *\n * 📈 輸出數據結構 (Output Data Structure):\n * ```javascript\n * {\n *   jsonData: {\n *     gridX: number,        // 網格 X 方向節點數量\n *     gridY: number,        // 網格 Y 方向節點數量\n *     nodes: [              // 網格節點陣列\n *       {\n *         x: number,        // 節點 X 座標\n *         y: number,        // 節點 Y 座標\n *         value: number,    // 節點數值（1-5）\n *         type: number,     // 節點類型\n *         coord: { x: number, y: number }  // 節點座標對象\n *       }\n *     ],\n *     type: 'grid'          // 數據類型標識\n *   },\n *   dashboardData: {\n *     totalNodes: number,   // 總節點數量\n *     gridSize: string,     // 網格尺寸描述\n *     gridX: number,        // X 方向節點數量\n *     gridY: number,        // Y 方向節點數量\n *     nodeCount: number     // 節點總數\n *   },\n *   dataTableData: [            // 表格顯示數據\n *     {\n *       '#': number,        // 行號\n *       name: string,       // 網格名稱\n *       gridSize: string,   // 網格尺寸描述\n *       totalNodes: number, // 總節點數量\n *       nodes: Array        // 節點陣列\n *     }\n *   ],\n * }\n * ```\n *\n * 🔄 數據處理流程 (Data Processing Flow):\n * 1. 解析網格尺寸參數（x, y）\n * 2. 設定預設值（如果參數無效）\n * 3. 使用雙重迴圈生成網格節點\n * 4. 為每個節點設定座標和屬性\n * 5. 計算統計摘要信息\n * 6. 生成表格顯示數據\n * 7. 返回標準化的數據結構\n *\n * ⚠️ 注意事項 (Important Notes):\n * - 網格尺寸參數會自動設定預設值（10x10）\n * - 節點數值是隨機生成的，每次調用結果不同\n * - 大型網格可能需要較長的生成時間\n * - 生成的節點陣列是扁平化的，不保持二維結構\n *\n * @param {Object} jsonData - 包含網格尺寸參數的 JSON 數據\n * @param {number} [jsonData.x=10] - 網格 X 方向節點數量\n * @param {number} [jsonData.y=10] - 網格 Y 方向節點數量\n * @returns {Object} - 包含處理後網格數據的完整結構\n *\n * @example\n * // 處理網格數據\n * const jsonData = { x: 3, y: 3 };\n * const result = await processGridSchematicJson(jsonData);\n *\n * @since 1.0.0\n * @see {@link loadGridSchematicJson} 網格示意圖載入函數\n */\nasync function processGridSchematicJson(jsonData) {\n  console.log('📊 處理網格示意圖數據:', jsonData);\n\n  // 解析網格尺寸\n  const gridX = parseInt(jsonData.x) || 10;\n  const gridY = parseInt(jsonData.y) || 10;\n\n  console.log(`📊 網格尺寸: ${gridX} x ${gridY}`);\n\n  // 生成網格節點數據\n  const gridNodes = [];\n  for (let y = 0; y < gridY; y++) {\n    for (let x = 0; x < gridX; x++) {\n      gridNodes.push({\n        x: x,\n        y: y,\n        value: Math.floor(Math.random() * 5) + 1, // 隨機生成 1-5 的數值\n        type: 1, // 預設節點類型\n        coord: { x: x, y: y },\n      });\n    }\n  }\n\n  // 建立摘要資料\n  const dashboardData = {\n    totalNodes: gridX * gridY,\n    gridSize: `${gridX} x ${gridY}`,\n    gridX: gridX,\n    gridY: gridY,\n    nodeCount: gridNodes.length,\n  };\n\n  // 建立圖層資訊數據\n  const layerInfoData = {\n    totalNodes: gridX * gridY,\n    gridSize: `${gridX} x ${gridY}`,\n    gridX: gridX,\n    gridY: gridY,\n  };\n\n  // 建立表格資料\n  const dataTableData = [\n    {\n      '#': 1,\n      name: `網格示意圖 (${gridX}x${gridY})`,\n      gridSize: `${gridX} x ${gridY}`,\n      totalNodes: gridX * gridY,\n      nodes: gridNodes,\n    },\n  ];\n\n  return {\n    jsonData: jsonData, // 保持原始數據不變\n    processedJsonData: {\n      gridX: gridX,\n      gridY: gridY,\n      nodes: gridNodes,\n      type: 'grid',\n    },\n    dashboardData,\n    dataTableData,\n    layerInfoData,\n  };\n}\n\n/**\n * 📊 處理數據圖層 JSON 數據 (Process Data Layer JSON Data)\n *\n * 這是一個專門用於處理數據圖層 JSON 數據的核心函數，負責將原始的地理空間數據\n * 轉換為適合前端視覺化組件使用的標準化格式。該函數支援多種數據格式，包括\n * 示意圖節點數據和標準地理數據，並提供完整的數據預處理和格式轉換功能。\n *\n * 🎯 主要功能 (Main Features):\n * - 數據格式識別：自動識別輸入數據的格式類型\n * - 示意圖節點處理：處理包含節點陣列的複雜示意圖數據\n * - 標準地理數據處理：處理一般的地理空間數據\n * - 數據隨機化：為示意圖節點隨機分配數值（用於測試）\n * - 統計摘要生成：計算數據統計信息和摘要數據\n * - 表格數據建構：生成適合表格組件顯示的數據結構\n *\n * 🔧 支援的數據格式 (Supported Data Formats):\n * - 示意圖節點數據：包含節點陣列的複雜數據結構\n *   - 格式：Array<{ nodes: Array, name: string, color: string }>\n *   - 用途：用於繪製複雜的示意圖網絡\n * - 標準地理數據：包含地理要素屬性的標準 JSON 格式\n *   - 格式：Array<{ name: string, id: string, [其他屬性]: any }>\n *   - 用途：用於一般的地理數據顯示\n *\n * 📊 數據處理邏輯 (Data Processing Logic):\n * 1. 格式檢測：檢查數據是否為示意圖節點格式\n * 2. 示意圖處理：如果是示意圖格式，執行節點隨機化和統計計算\n * 3. 標準處理：如果是標準格式，執行一般的地理數據處理\n * 4. 統計計算：計算數據統計信息和摘要數據\n * 5. 表格建構：生成適合表格顯示的數據結構\n *\n * 🚀 使用範例 (Usage Examples):\n * ```javascript\n * // 處理示意圖節點數據\n * const schematicData = [\n *   {\n *     name: 'Line 1',\n *     color: 'red',\n *     nodes: [\n *       { coord: { x: 0, y: 0 }, value: 0 },\n *       { coord: { x: 1, y: 0 }, value: 0 }\n *     ]\n *   }\n * ];\n * const result = await processDataLayerJson(schematicData);\n *\n * // 處理標準地理數據\n * const geoData = [\n *   { name: 'Station 1', id: 'S1', type: 'metro' },\n *   { name: 'Station 2', id: 'S2', type: 'metro' }\n * ];\n * const result = await processDataLayerJson(geoData);\n * ```\n *\n * 📈 示意圖節點數據格式 (Schematic Node Data Format):\n * ```javascript\n * [\n *   {\n *     name: string,           // 路線名稱\n *     color: string,          // 路線顏色\n *     nodes: [                // 節點陣列\n *       {\n *         coord: { x: number, y: number },  // 節點座標\n *         value: number,       // 節點數值\n *         [其他屬性]: any      // 其他節點屬性\n *       }\n *     ]\n *   }\n * ]\n * ```\n *\n * 📈 標準地理數據格式 (Standard Geo Data Format):\n * ```javascript\n * [\n *   {\n *     name: string,           // 要素名稱\n *     id: string,             // 要素 ID\n *     [其他屬性]: any         // 其他地理屬性\n *   }\n * ]\n * ```\n *\n * 📈 輸出數據結構 (Output Data Structure):\n * ```javascript\n * {\n *   jsonData: Object | null,  // 原始 JSON 數據（標準格式）或 null（示意圖格式）\n *   dashboardData: {            // 統計摘要數據\n *     totalLines?: number,    // 總路線數量（示意圖格式）\n *     totalNodes?: number,    // 總節點數量（示意圖格式）\n *     lineNames?: string[],   // 路線名稱陣列（示意圖格式）\n *     totalCount?: number,    // 總項目數量（標準格式）\n *     itemNames?: string[]    // 項目名稱陣列（標準格式）\n *   },\n *   dataTableData: Array          // 表格顯示數據\n * }\n * ```\n *\n * 🔄 數據處理流程 (Data Processing Flow):\n * 1. 檢查數據格式（示意圖節點或標準地理數據）\n * 2. 根據格式選擇適當的處理邏輯\n * 3. 執行數據預處理和格式轉換\n * 4. 計算統計摘要信息\n * 5. 生成表格顯示數據\n * 6. 返回標準化的數據結構\n *\n * ⚠️ 注意事項 (Important Notes):\n * - 示意圖節點數據會進行隨機化處理（用於測試）\n * - 標準地理數據保持原始格式不變\n * - 統計摘要會根據數據格式自動調整\n * - 表格數據會根據數據類型生成不同的結構\n *\n * @param {Object} jsonData - 需要處理的 JSON 數據\n * @param {Array} [jsonData] - 示意圖節點數據陣列\n * @param {Array} [jsonData] - 標準地理數據陣列\n * @returns {Object} - 包含處理後數據的完整結構\n *\n * @example\n * // 處理示意圖數據\n * const schematicData = [{ name: 'Line 1', nodes: [] }];\n * const result = await processDataLayerJson(schematicData);\n *\n * // 處理標準地理數據\n * const geoData = [{ name: 'Station 1', id: 'S1' }];\n * const result = await processDataLayerJson(geoData);\n *\n * @since 1.0.0\n * @see {@link randomizeNodeValues} 節點數值隨機化函數\n * @see {@link loadDataLayerJson} 數據圖層載入函數\n */\nasync function processDataLayerJson(jsonData) {\n  // 檢查是否為示意圖節點格式\n  if (Array.isArray(jsonData) && jsonData.length > 0 && jsonData[0].nodes) {\n    // 這是示意圖節點格式，不需要處理為地圖圖層\n    console.log('📊 載入示意圖節點數據，共', jsonData.length, '條路線');\n\n    // 為每個路線的節點隨機分配 1-5 的數值\n    const processedJsonData = jsonData.map((line) => ({\n      ...line,\n      nodes: randomizeNodeValues(line.nodes),\n    }));\n\n    // 建立摘要資料\n    const dashboardData = {\n      totalLines: processedJsonData.length,\n      totalNodes: processedJsonData.reduce((sum, line) => sum + line.nodes.length, 0),\n      lineNames: processedJsonData.map((line) => line.name),\n    };\n\n    // 建立圖層資訊數據\n    const layerInfoData = {\n      totalLines: processedJsonData.length,\n      totalNodes: processedJsonData.reduce((sum, line) => sum + line.nodes.length, 0),\n      lineNames: processedJsonData.map((line) => line.name),\n    };\n\n    // 為示意圖數據建立 dataTableData，每個路線作為一個項目\n    const dataTableData = processedJsonData.map((line, index) => ({\n      '#': index + 1,\n      color: line.color,\n      name: line.name,\n      nodes: line.nodes,\n    }));\n\n    return {\n      jsonData: jsonData, // 保持原始數據不變\n      processedJsonData: processedJsonData, // 處理後的示意圖數據（包含隨機數值）\n      dashboardData,\n      dataTableData,\n      layerInfoData,\n    };\n  }\n\n  // 標準 JSON 格式處理 - 示意圖節點數據\n  console.log('📊 載入標準 JSON 數據，共', jsonData.length, '個項目');\n\n  // 建立摘要資料\n  const dashboardData = {\n    totalCount: jsonData.length,\n    itemNames: jsonData.map((item) => item.name || item.id || '未命名項目'),\n  };\n\n  // 建立圖層資訊數據\n  const layerInfoData = {\n    totalItems: jsonData.length,\n    itemNames: jsonData.map((item) => item.name || item.id || '未命名項目'),\n    hasFeatures: jsonData.some((item) => item.features),\n    hasProperties: jsonData.some((item) => item.properties),\n  };\n\n  return {\n    jsonData: jsonData, // 保持原始數據不變\n    processedJsonData: jsonData, // 標準格式數據直接使用原始數據\n    dashboardData,\n    layerInfoData,\n    dataTableData: jsonData.map((item, index) => ({\n      '#': index + 1,\n      name: item.name || item.id || '未命名項目',\n      ...item,\n    })),\n  };\n}\n","/**\n * 📦 數據存儲模組 (Data Store Module) - Pinia Store\n *\n * 這是一個基於 Pinia 的集中式狀態管理模組，專為示意圖響應式網站設計。\n * 該模組負責管理整個應用程式的狀態，包括圖層配置、數據載入、用戶互動\n * 和視覺化設定等。它提供了統一的 API 介面，簡化了組件間的數據交互，\n * 並確保狀態的一致性和可預測性。\n *\n * 🎯 核心功能 (Core Features):\n * 1. 🏙️ 圖層管理系統：管理所有圖層的配置、狀態和數據\n *    - 圖層配置：定義圖層的基本屬性和載入方式\n *    - 圖層狀態：追蹤圖層的可見性、載入狀態和數據狀態\n *    - 圖層分組：將圖層組織成邏輯群組，便於管理\n * 2. 📊 數據載入控制：管理異步數據載入流程\n *    - 自動載入：當圖層開啟時自動載入對應數據\n *    - 載入狀態：追蹤載入進度和錯誤狀態\n *    - 數據快取：避免重複載入相同數據\n * 3. 🎯 用戶互動管理：處理用戶選擇和互動狀態\n *    - 要素選擇：管理當前選中的地理要素\n *    - 圖層切換：處理圖層的開啟和關閉\n *    - 視覺化設定：管理 D3.js 視覺化組件的設定\n * 4. 📈 統計數據管理：計算和快取統計信息\n *    - 實時統計：根據當前可見圖層計算統計數據\n *    - 數據摘要：提供圖層數據的摘要信息\n *    - 性能優化：避免重複計算，提高性能\n *\n * 🏗️ 架構設計 (Architecture Design):\n * - 集中式狀態管理：所有狀態集中在一個 store 中\n * - 響應式更新：使用 Vue 3 的響應式系統確保 UI 同步\n * - 模組化設計：將不同功能分離到不同的函數中\n * - 類型安全：提供完整的 TypeScript 類型定義\n * - 持久化支援：支援狀態的本地存儲和恢復\n *\n * 🔧 技術特點 (Technical Features):\n * - Pinia 狀態管理：使用 Vue 3 官方推薦的狀態管理庫\n * - Composition API：使用 Vue 3 的 Composition API 設計\n * - 異步操作：支援 Promise 和 async/await 語法\n * - 錯誤處理：完整的錯誤捕獲和恢復機制\n * - 性能優化：使用計算屬性和快取機制\n *\n * 📊 狀態結構 (State Structure):\n * - layers: 圖層配置和狀態陣列\n * - layerStates: 圖層狀態的詳細追蹤\n * - selectedFeature: 當前選中的地理要素\n * - d3jsDimensions: D3.js 視覺化組件的尺寸設定\n *\n * 🚀 使用範例 (Usage Examples):\n * ```javascript\n * // 在組件中使用 store\n * import { useDataStore } from '@/stores/dataStore';\n *\n * const dataStore = useDataStore();\n *\n * // 切換圖層可見性\n * await dataStore.toggleLayerVisibility('taipei_metro');\n *\n * // 獲取可見圖層\n * const visibleLayers = dataStore.visibleLayers;\n *\n * // 設定選中的要素\n * dataStore.setSelectedFeature(feature);\n * ```\n *\n * 🔄 數據流程 (Data Flow):\n * 1. 組件調用 store 方法\n * 2. Store 更新內部狀態\n * 3. 響應式系統觸發 UI 更新\n * 4. 組件重新渲染\n * 5. 用戶看到更新後的界面\n *\n * ⚠️ 注意事項 (Important Notes):\n * - 所有狀態變更都應該通過 store 方法進行\n * - 異步操作需要適當的錯誤處理\n * - 大型數據集可能需要較長的載入時間\n * - 建議在載入過程中顯示進度指示器\n *\n * @file dataStore.js\n * @version 3.0.0\n * @author Kevin Cheng\n * @since 1.0.0\n * @see {@link https://pinia.vuejs.org/} Pinia 官方文檔\n * @see {@link https://vuejs.org/guide/composition-api/} Vue 3 Composition API 文檔\n */\n// ==================== 📦 第三方庫引入 (Third-Party Library Imports) ====================\n\n/**\n * Pinia 狀態管理庫引入\n * Vue 3 官方推薦的狀態管理解決方案\n * 提供更好的 TypeScript 支援和開發者體驗\n *\n * @see https://pinia.vuejs.org/\n */\nimport { defineStore } from 'pinia';\n\n/**\n * Vue 3 Composition API 核心功能引入\n * 提供響應式數據和計算屬性功能\n *\n * @see https://vuejs.org/\n */\nimport { ref, computed } from 'vue';\n\n/**\n * 數據處理工具函數引入\n * 提供數據載入功能\n */\nimport { loadDataLayerJson, loadGridSchematicJson } from '../utils/dataProcessor.js';\n\n// ==================== 📦 主要數據存儲定義 (Main Data Store Definition) ====================\n\n/**\n * 📦 數據存儲 Store 實例 (Data Store Instance)\n *\n * 使用 Pinia 的 defineStore 創建數據存儲實例，採用 Composition API 設計模式。\n * 該 store 是整個應用程式的狀態管理中心，提供統一的狀態管理和數據操作介面。\n *\n * 🎯 Store 功能 (Store Features):\n * - 圖層管理：管理所有圖層的配置、狀態和數據\n * - 狀態追蹤：追蹤圖層的載入狀態、可見性等\n * - 數據載入：處理異步數據載入和錯誤處理\n * - 用戶互動：管理用戶選擇和互動狀態\n * - 視覺化設定：管理 D3.js 視覺化組件的設定\n *\n * 🔧 技術實現 (Technical Implementation):\n * - 使用 defineStore 創建 Pinia store\n * - 採用 Composition API 設計模式\n * - 支援狀態持久化（persist: true）\n * - 提供響應式狀態更新\n *\n * @type {Store} Pinia Store 實例\n * @since 1.0.0\n */\nexport const useDataStore = defineStore(\n  'data',\n  () => {\n    // ==================== 🗺️ 圖層狀態管理 (Layer State Management) ====================\n\n    /**\n     * 📊 圖層狀態存儲 (Layer States Storage)\n     *\n     * 存儲所有圖層的詳細狀態信息，包括可見性、載入狀態、數據內容等。\n     * 這個響應式對象會自動追蹤圖層狀態的變化，並觸發相關的 UI 更新。\n     *\n     * 狀態結構：\n     * - layerId: 圖層唯一識別碼\n     * - visible: 圖層是否可見\n     * - isLoading: 圖層是否正在載入\n     * - isLoaded: 圖層是否已載入完成\n     * - jsonData: 圖層的原始 JSON 數據（不可修改）\n     * - processedJsonData: 圖層的處理後 JSON 數據（用於顯示和計算）\n     * - dashboardData: 圖層的儀表板數據\n     * - dataTableData: 圖層的表格數據\n     * - layerInfoData: 圖層的資訊數據\n     *\n     * @type {Ref<Object>} 圖層狀態響應式對象\n     * @since 1.0.0\n     */\n    const layerStates = ref({});\n\n    /**\n     * 🗺️ 圖層配置定義 (Layer Configuration Definition)\n     *\n     * 靜態定義的圖層配置陣列，包含所有可用的圖層信息。每個圖層都包含\n     * 完整的配置信息，包括載入方式、顯示設定、數據來源等。\n     *\n     * 圖層群組結構：\n     * - 測試圖層：包含網格示意圖測試等開發用圖層\n     * - 數據圖層：包含台北捷運等實際數據圖層\n     *\n     * 圖層屬性說明：\n     * - layerId: 圖層唯一識別碼\n     * - layerName: 圖層顯示名稱\n     * - visible: 圖層初始可見性\n     * - isLoading: 圖層載入狀態\n     * - isLoaded: 圖層載入完成狀態\n     * - type: 圖層類型（grid, point, line 等）\n     * - shape: 圖層形狀（目前為 null）\n     * - colorName: 圖層顏色名稱\n     * - jsonData: 圖層原始 JSON 數據（不可修改）\n     * - processedJsonData: 圖層處理後 JSON 數據（用於顯示和計算）\n     * - dashboardData: 圖層儀表板數據\n     * - dataTableData: 圖層表格數據\n     * - layerInfoData: 圖層資訊數據\n     * - jsonLoader: 圖層數據載入函數\n     * - jsonFileName: 圖層 JSON 文件名稱\n     * - isDataLayer: 是否為數據圖層\n     * - hideFromMap: 是否從地圖隱藏\n     * - display: 是否顯示\n     * - isGridSchematic: 是否為網格示意圖\n     *\n     * @type {Ref<Array>} 圖層配置響應式陣列\n     * @since 1.0.0\n     */\n    const layers = ref([\n      {\n        groupName: '測試圖層',\n        groupLayers: [\n          {\n            layerId: 'test_layer',\n            layerName: '網格示意圖測試',\n            visible: false,\n            isLoading: false,\n            isLoaded: false,\n            type: 'grid',\n            shape: null,\n            colorName: 'green',\n            jsonData: null,\n            processedJsonData: null,\n            dashboardData: null,\n            dataTableData: null,\n            layerInfoData: null,\n            jsonLoader: loadGridSchematicJson,\n            jsonFileName: 'test/test.json',\n            isDataLayer: true,\n            hideFromMap: true,\n            display: true,\n            isGridSchematic: true, // 標記為網格示意圖類型\n          },\n        ],\n      },\n      {\n        groupName: '數據圖層',\n        groupLayers: [\n          {\n            layerId: 'taipei_metro',\n            layerName: 'Taipei Metro',\n            visible: false,\n            isLoading: false,\n            isLoaded: false,\n            type: 'point',\n            shape: null,\n            colorName: 'orange',\n            jsonData: null,\n            processedJsonData: null,\n            dashboardData: null,\n            dataTableData: null,\n            layerInfoData: null,\n            jsonLoader: loadDataLayerJson,\n            jsonFileName: 'taipei/taipei_schematic.json',\n            isDataLayer: true,\n            hideFromMap: true,\n            display: true,\n          },\n          {\n            layerId: 'taipei_metro_2',\n            layerName: 'Taipei Metro 2',\n            visible: false,\n            isLoading: false,\n            isLoaded: false,\n            type: 'point',\n            shape: null,\n            colorName: 'orange',\n            jsonData: null,\n            processedJsonData: null,\n            dashboardData: null,\n            dataTableData: null,\n            layerInfoData: null,\n            jsonLoader: loadDataLayerJson,\n            jsonFileName: 'taipei/taipei_schematic_2.json',\n            isDataLayer: true,\n            hideFromMap: true,\n            display: true,\n          },\n        ],\n      },\n    ]);\n\n    /**\n     * 💾 保存圖層狀態 (Save Layer State)\n     *\n     * 將圖層的狀態信息保存到 layerStates 響應式對象中。這個函數用於\n     * 更新圖層的各種狀態，包括可見性、載入狀態、數據內容等。\n     *\n     * 🎯 主要功能 (Main Features):\n     * - 狀態更新：更新指定圖層的狀態信息\n     * - 自動初始化：如果圖層狀態不存在，會自動創建\n     * - 合併更新：使用 Object.assign 合併新的狀態數據\n     * - 響應式更新：觸發 Vue 的響應式更新機制\n     *\n     * 🔧 技術實現 (Technical Implementation):\n     * - 檢查圖層狀態是否存在，不存在則創建空對象\n     * - 使用 Object.assign 合併新的狀態數據\n     * - 觸發響應式更新，通知相關組件重新渲染\n     *\n     * 🚀 使用範例 (Usage Examples):\n     * ```javascript\n     * // 更新圖層可見性\n     * saveLayerState('taipei_metro', { visible: true });\n     *\n     * // 更新圖層載入狀態\n     * saveLayerState('taipei_metro', { isLoading: true });\n     *\n     * // 更新圖層數據\n     * saveLayerState('taipei_metro', {\n     *   jsonData: data,\n     *   dashboardData: summary,\n     *   dataTableData: table,\n     *   layerInfoData: info\n     * });\n     * ```\n     *\n     * @param {string} layerId - 圖層唯一識別碼\n     * @param {Object} stateData - 要更新的狀態數據\n     * @param {boolean} [stateData.visible] - 圖層可見性\n     * @param {boolean} [stateData.isLoading] - 圖層載入狀態\n     * @param {boolean} [stateData.isLoaded] - 圖層載入完成狀態\n     * @param {Object} [stateData.jsonData] - 圖層原始 JSON 數據\n     * @param {Object} [stateData.processedJsonData] - 圖層處理後 JSON 數據\n     * @param {Object} [stateData.dashboardData] - 圖層儀表板數據\n     * @param {Array} [stateData.dataTableData] - 圖層表格數據\n     * @param {Object} [stateData.layerInfoData] - 圖層資訊數據\n     *\n     * @example\n     * // 基本用法\n     * saveLayerState('test_layer', { visible: true });\n     *\n     * @since 1.0.0\n     */\n    const saveLayerState = (layerId, stateData) => {\n      if (!layerStates.value[layerId]) {\n        layerStates.value[layerId] = {};\n      }\n      Object.assign(layerStates.value[layerId], stateData);\n    };\n\n    // ==================== 🔍 圖層搜尋函數 (Layer Search Functions) ====================\n\n    /**\n     * 🔍 根據 ID 搜尋圖層 (Find Layer by ID)\n     *\n     * 在靜態圖層配置中搜尋指定 ID 的圖層。這個函數會遍歷所有圖層群組，\n     * 找到匹配的圖層並返回其配置對象。\n     *\n     * 🎯 主要功能 (Main Features):\n     * - 圖層搜尋：根據 layerId 搜尋對應的圖層配置\n     * - 深度搜尋：遍歷所有圖層群組和子圖層\n     * - 精確匹配：使用嚴格相等比較確保精確匹配\n     * - 安全返回：找不到時返回 null，避免錯誤\n     *\n     * 🔧 技術實現 (Technical Implementation):\n     * - 使用雙重迴圈遍歷圖層群組和子圖層\n     * - 使用嚴格相等比較（===）進行 ID 匹配\n     * - 找到匹配圖層時立即返回，提高性能\n     * - 遍歷完成後返回 null 表示未找到\n     *\n     * 🚀 使用範例 (Usage Examples):\n     * ```javascript\n     * // 搜尋圖層\n     * const layer = findLayerById('taipei_metro');\n     * if (layer) {\n     *   console.log('找到圖層:', layer.layerName);\n     * } else {\n     *   console.log('圖層不存在');\n     * }\n     *\n     * // 檢查圖層是否存在\n     * if (findLayerById('test_layer')) {\n     *   console.log('測試圖層存在');\n     * }\n     * ```\n     *\n     * 📊 搜尋範圍 (Search Scope):\n     * - 測試圖層群組：包含網格示意圖測試等開發用圖層\n     * - 數據圖層群組：包含台北捷運等實際數據圖層\n     * - 未來可擴展：支援更多圖層群組\n     *\n     * ⚠️ 注意事項 (Important Notes):\n     * - 搜尋是線性的，大型圖層列表可能影響性能\n     * - 返回的圖層對象是引用，修改會影響原始配置\n     * - 建議在組件中使用前檢查返回值是否為 null\n     *\n     * @param {string} layerId - 要搜尋的圖層 ID\n     * @returns {Object|null} - 找到的圖層配置對象，未找到時返回 null\n     *\n     * @example\n     * // 基本用法\n     * const layer = findLayerById('taipei_metro');\n     * if (layer) {\n     *   console.log(layer.layerName);\n     * }\n     *\n     * @since 1.0.0\n     */\n    const findLayerById = (layerId) => {\n      for (const mainGroup of layers.value) {\n        for (const layer of mainGroup.groupLayers) {\n          if (layer.layerId === layerId) {\n            return layer;\n          }\n        }\n      }\n      return null;\n    };\n\n    /**\n     * 📋 獲取所有圖層 (Get All Layers)\n     *\n     * 從靜態圖層配置中提取所有圖層的扁平陣列。這個函數會遍歷所有圖層群組，\n     * 將所有子圖層合併成一個一維陣列，便於進行批量操作和搜尋。\n     *\n     * 🎯 主要功能 (Main Features):\n     * - 扁平化提取：將嵌套的圖層群組結構扁平化為一維陣列\n     * - 完整覆蓋：包含所有圖層群組中的所有子圖層\n     * - 保持引用：返回的圖層對象保持對原始配置的引用\n     * - 高效操作：提供便於批量操作的數據結構\n     *\n     * 🔧 技術實現 (Technical Implementation):\n     * - 使用 for...of 迴圈遍歷圖層群組\n     * - 使用展開運算符（...）合併子圖層陣列\n     * - 保持原始圖層對象的引用，不進行深拷貝\n     * - 返回新的陣列，避免修改原始配置\n     *\n     * 🚀 使用範例 (Usage Examples):\n     * ```javascript\n     * // 獲取所有圖層\n     * const allLayers = getAllLayers();\n     * console.log('總圖層數量:', allLayers.length);\n     *\n     * // 篩選可見圖層\n     * const visibleLayers = allLayers.filter(layer => layer.visible);\n     *\n     * // 篩選載入中的圖層\n     * const loadingLayers = allLayers.filter(layer => layer.isLoading);\n     *\n     * // 搜尋特定類型的圖層\n     * const gridLayers = allLayers.filter(layer => layer.type === 'grid');\n     * ```\n     *\n     * 📊 返回數據結構 (Return Data Structure):\n     * ```javascript\n     * [\n     *   {\n     *     layerId: string,        // 圖層唯一識別碼\n     *     layerName: string,      // 圖層顯示名稱\n     *     visible: boolean,       // 圖層可見性\n     *     isLoading: boolean,     // 圖層載入狀態\n     *     isLoaded: boolean,      // 圖層載入完成狀態\n     *     type: string,           // 圖層類型\n     *     colorName: string,      // 圖層顏色名稱\n     *     jsonData: Object,       // 圖層原始 JSON 數據\n     *     processedJsonData: Object, // 圖層處理後 JSON 數據\n     *     dashboardData: Object,    // 圖層儀表板數據\n     *     dataTableData: Array,       // 圖層表格數據\n     *     layerInfoData: Object,      // 圖層資訊數據\n     *     jsonLoader: Function,   // 圖層數據載入函數\n     *     jsonFileName: string,   // 圖層 JSON 文件名稱\n     *     isDataLayer: boolean,   // 是否為數據圖層\n     *     hideFromMap: boolean,   // 是否從地圖隱藏\n     *     display: boolean,       // 是否顯示\n     *     isGridSchematic: boolean // 是否為網格示意圖\n     *   }\n     * ]\n     * ```\n     *\n     * 🔄 使用場景 (Use Cases):\n     * - 批量操作：對所有圖層執行相同的操作\n     * - 統計計算：計算圖層的統計信息\n     * - 篩選搜尋：根據條件篩選特定圖層\n     * - 狀態檢查：檢查圖層的整體狀態\n     *\n     * ⚠️ 注意事項 (Important Notes):\n     * - 返回的陣列是動態的，會反映圖層配置的變化\n     * - 圖層對象是引用，修改會影響原始配置\n     * - 建議在需要時才調用，避免不必要的性能開銷\n     *\n     * @returns {Array} - 包含所有圖層的扁平陣列\n     *\n     * @example\n     * // 基本用法\n     * const allLayers = getAllLayers();\n     * console.log('圖層數量:', allLayers.length);\n     *\n     * @since 1.0.0\n     */\n    const getAllLayers = () => {\n      const allLayers = [];\n      for (const mainGroup of layers.value) {\n        allLayers.push(...mainGroup.groupLayers);\n      }\n      return allLayers;\n    };\n\n    // ==================== 🔄 主要圖層處理函數 (Main Layer Processing Functions) ====================\n\n    /**\n     * 🔄 切換圖層可見性 (Toggle Layer Visibility)\n     *\n     * 控制圖層的顯示/隱藏狀態，並在需要時自動載入數據。這是圖層管理的核心函數，\n     * 負責處理圖層的開啟、關閉、數據載入等操作，確保圖層狀態的一致性和數據的及時載入。\n     *\n     * 🎯 主要功能 (Main Features):\n     * - 可見性切換：切換圖層的顯示/隱藏狀態\n     * - 自動載入：當圖層開啟且未載入時自動載入數據\n     * - 狀態管理：更新圖層的各種狀態信息\n     * - 錯誤處理：處理載入過程中的錯誤和異常\n     * - 日誌記錄：提供詳細的操作日誌和調試信息\n     *\n     * 🔧 技術實現 (Technical Implementation):\n     * - 異步操作：使用 async/await 處理數據載入\n     * - 狀態檢查：檢查圖層的載入狀態和可見性\n     * - 條件載入：只在需要時才載入數據，避免重複載入\n     * - 錯誤恢復：載入失敗時恢復圖層狀態\n     * - 狀態同步：確保所有相關狀態的一致性\n     *\n     * 🔄 操作流程 (Operation Flow):\n     * 1. 搜尋圖層：根據 layerId 找到對應的圖層配置\n     * 2. 狀態檢查：檢查圖層的當前狀態和載入條件\n     * 3. 可見性切換：切換圖層的可見性狀態\n     * 4. 條件載入：如果圖層開啟且未載入，則載入數據\n     * 5. 狀態更新：更新圖層的載入狀態和數據內容\n     * 6. 錯誤處理：處理載入過程中的錯誤和異常\n     *\n     * 🚀 使用範例 (Usage Examples):\n     * ```javascript\n     * // 開啟圖層\n     * await toggleLayerVisibility('taipei_metro');\n     *\n     * // 關閉圖層\n     * await toggleLayerVisibility('taipei_metro');\n     *\n     * // 在組件中使用\n     * const handleLayerToggle = async (layerId) => {\n     *   try {\n     *     await toggleLayerVisibility(layerId);\n     *     console.log('圖層切換成功');\n     *   } catch (error) {\n     *     console.error('圖層切換失敗:', error);\n     *   }\n     * };\n     * ```\n     *\n     * 📊 載入條件 (Loading Conditions):\n     * - 圖層必須存在且可訪問\n     * - 圖層必須被開啟（visible: true）\n     * - 圖層尚未載入（isLoaded: false）\n     * - 圖層不在載入中（isLoading: false）\n     *\n     * ⚠️ 錯誤處理 (Error Handling):\n     * - 圖層不存在：記錄錯誤並返回\n     * - 載入失敗：恢復圖層狀態並記錄錯誤\n     * - 網路錯誤：提供詳細的錯誤信息\n     * - 數據格式錯誤：記錄錯誤並繼續執行\n     *\n     * 🔍 調試信息 (Debug Information):\n     * - 圖層搜尋結果：記錄找到的圖層信息\n     * - 載入條件檢查：記錄載入條件的評估結果\n     * - 載入過程：記錄載入的開始、進度和完成\n     * - 錯誤信息：記錄載入過程中的錯誤和異常\n     *\n     * @param {string} layerId - 要切換的圖層 ID\n     * @returns {Promise<void>} - 異步操作，無返回值\n     * @throws {Error} - 當圖層不存在或載入失敗時拋出錯誤\n     *\n     * @example\n     * // 基本用法\n     * await toggleLayerVisibility('test_layer');\n     *\n     * @since 1.0.0\n     * @see {@link findLayerById} 圖層搜尋函數\n     * @see {@link saveLayerState} 圖層狀態保存函數\n     */\n    const toggleLayerVisibility = async (layerId) => {\n      const layer = findLayerById(layerId);\n      if (!layer) {\n        console.error(`❌ DataStore: Layer with id \"${layerId}\" not found.`);\n        return;\n      }\n\n      console.log('🔧 DataStore: 找到圖層', {\n        layerId,\n        layerName: layer.layerName,\n        currentVisible: layer.visible,\n        isLoaded: layer.isLoaded,\n        isLoading: layer.isLoading,\n      });\n\n      // 切換可見性狀態\n      layer.visible = !layer.visible;\n\n      // 保存圖層的可見性狀態\n      saveLayerState(layerId, { visible: layer.visible });\n\n      // 如果圖層被開啟且尚未載入，則載入資料\n      const shouldLoad = layer.visible && !layer.isLoaded && !layer.isLoading;\n      console.log('🔧 DataStore: 載入條件檢查', {\n        visible: layer.visible,\n        isLoaded: layer.isLoaded,\n        isLoading: layer.isLoading,\n        shouldLoad,\n      });\n\n      if (shouldLoad) {\n        try {\n          layer.isLoading = true;\n          saveLayerState(layerId, { isLoading: layer.isLoading });\n\n          // 載入圖層數據\n          const result = await layer.jsonLoader(layer);\n\n          // 更新圖層資料\n          layer.jsonData = result.jsonData;\n          layer.processedJsonData = result.processedJsonData;\n          layer.dataTableData = result.dataTableData;\n          layer.dashboardData = result.dashboardData;\n          layer.layerInfoData = result.layerInfoData;\n          layer.isLoaded = true;\n\n          console.log(`✅ 圖層 \"${layer.layerName}\" 載入完成`);\n          console.log(`📊 圖層儀表板資料:`, layer.dashboardData);\n\n          // 保存完整的圖層狀態\n          saveLayerState(layerId, {\n            isLoaded: layer.isLoaded,\n            jsonData: layer.jsonData,\n            processedJsonData: layer.processedJsonData,\n            dataTableData: layer.dataTableData,\n            dashboardData: layer.dashboardData,\n            layerInfoData: layer.layerInfoData,\n          });\n        } catch (error) {\n          console.error(`❌ 載入圖層 \"${layer.layerName}\" 失敗:`, error);\n          layer.visible = false; // 載入失敗時恢復可見性狀態\n          saveLayerState(layerId, { visible: false });\n        } finally {\n          layer.isLoading = false;\n          saveLayerState(layerId, { isLoading: false });\n        }\n      }\n    };\n\n    // ==================== 地圖物件管理 ====================\n\n    // 選中的地圖物件\n    const selectedFeature = ref(null);\n\n    // ==================== D3jsTab 尺寸管理 ====================\n\n    // D3jsTab 繪製範圍尺寸\n    const d3jsDimensions = ref({\n      width: 0,\n      height: 0,\n    });\n\n    // 更新 D3jsTab 尺寸\n    const updateD3jsDimensions = (width, height) => {\n      d3jsDimensions.value = {\n        width: Math.round(width),\n        height: Math.round(height),\n      };\n      console.log('📏 D3jsTab 尺寸更新:', d3jsDimensions.value);\n    };\n\n    const setSelectedFeature = (feature) => {\n      // 記錄選取變化的log\n      if (feature) {\n        console.log('🎯 DataStore: 設置選中要素:', feature.properties?.id);\n      } else {\n        console.log('🗑️ DataStore: 清除選中要素');\n      }\n      selectedFeature.value = feature;\n    };\n\n    const clearSelectedFeature = () => {\n      console.log('🗑️ DataStore: 清除選中要素');\n      selectedFeature.value = null;\n    };\n\n    /**\n     * 根據圖層ID找到對應的群組名稱\n     * @param {string} layerId - 圖層ID\n     * @returns {string|null} - 群組名稱，如果找不到則返回null\n     */\n    const findGroupNameByLayerId = (layerId) => {\n      for (const mainGroup of layers.value) {\n        for (const layer of mainGroup.groupLayers) {\n          if (layer.layerId === layerId) {\n            return mainGroup.groupName;\n          }\n        }\n      }\n      return null;\n    };\n\n    // ==================== 返回的狀態和方法 ====================\n\n    return {\n      layers,\n      findLayerById, // 根據 ID 尋找圖層\n      getAllLayers, // 獲取所有圖層的扁平陣列\n      findGroupNameByLayerId, // 根據圖層ID找到對應的群組名稱\n      toggleLayerVisibility,\n      selectedFeature,\n      setSelectedFeature,\n      clearSelectedFeature,\n      visibleLayers: computed(() => getAllLayers().filter((layer) => layer.visible)),\n      loadingLayers: computed(() => getAllLayers().filter((layer) => layer.isLoading)),\n      // 狀態管理相關函數\n      layerStates,\n      saveLayerState,\n      // D3jsTab 尺寸管理\n      d3jsDimensions,\n      updateD3jsDimensions,\n    };\n  },\n  {\n    persist: true,\n  }\n);\n","/** * LoadingOverlay 載入覆蓋層組件 * *\n提供全螢幕載入狀態顯示功能，包含載入動畫、進度條和自定義文字提示 * * 主要功能： * -\n全螢幕覆蓋層顯示載入狀態 * - 可選的進度條顯示載入百分比 * - 支援自定義載入文字和輔助說明 * -\n響應式設計適配各種螢幕尺寸 * - 美觀的載入動畫效果 * * 使用場景： * - 數據載入過程中的使用者反饋 * -\n長時間操作的進度顯示 * - 系統初始化狀態提示 * - 網路請求載入指示 * * @file LoadingOverlay.vue *\n@version 2.0.0 * @author Kevin Cheng * @since 1.0.0 */\n<script>\n  export default {\n    name: 'LoadingOverlay',\n\n    /**\n     * 組件屬性定義\n     * 接收來自父組件的載入狀態和配置選項\n     */\n    props: {\n      /** 是否顯示載入覆蓋層 */\n      isVisible: {\n        type: Boolean,\n        default: false,\n        required: true,\n      },\n      /** 載入過程的主要文字描述 */\n      loadingText: {\n        type: String,\n        default: '載入中...',\n      },\n      /** 載入進度百分比 (0-100) */\n      progress: {\n        type: Number,\n        default: -1,\n        validator: (value) => value >= -1 && value <= 100,\n      },\n      /** 是否顯示進度條 */\n      showProgress: {\n        type: Boolean,\n        default: false,\n      },\n      /** 輔助說明文字 (可選) */\n      subText: {\n        type: String,\n        default: '',\n      },\n    },\n  };\n</script>\n\n<template>\n  <!-- 載入覆蓋層組件 -->\n  <!-- 在資料載入時顯示，提供視覺化的載入進度回饋和狀態提示 -->\n  <div\n    class=\"position-fixed top-0 start-0 w-100 h-100 d-flex justify-content-center align-items-center\"\n    style=\"background-color: rgba(0, 0, 0, 0.7); z-index: 9999\"\n    v-if=\"isVisible\"\n  >\n    <!-- 載入內容卡片 -->\n    <!-- 包含載入動畫、文字提示、進度條等元素的中央卡片 -->\n    <div\n      class=\"text-center my-bgcolor-white p-4 rounded shadow\"\n      style=\"min-width: 300px; max-width: 400px\"\n    >\n      <!-- 載入動畫圓環 -->\n      <!-- Bootstrap 提供的圓形載入動畫，表示系統正在處理請求 -->\n      <div class=\"spinner-border text-primary mb-3\" style=\"width: 2rem; height: 2rem\" role=\"status\">\n        <!-- 無障礙輔助文字 -->\n        <!-- 為螢幕閱讀器提供的載入狀態說明 -->\n        <span class=\"visually-hidden\">載入中...</span>\n      </div>\n\n      <!-- 主要載入文字 -->\n      <!-- 顯示當前載入的主要操作或狀態描述 -->\n      <div class=\"my-title-lg-black\">{{ loadingText }}</div>\n\n      <!-- 載入進度條區域 -->\n      <!-- 當需要顯示具體進度時，提供視覺化的進度條 -->\n      <div class=\"mt-3\" v-if=\"showProgress && progress >= 0\">\n        <!-- Bootstrap 進度條容器 -->\n        <div class=\"progress\" style=\"height: 8px\">\n          <!-- 進度條滑塊 -->\n          <!-- 根據 progress 屬性動態調整寬度，顯示載入完成百分比 -->\n          <div\n            class=\"progress-bar bg-primary d-flex align-items-center justify-content-center\"\n            role=\"progressbar\"\n            :style=\"{ width: progress + '%' }\"\n            :aria-valuenow=\"progress\"\n            aria-valuemin=\"0\"\n            aria-valuemax=\"100\"\n            style=\"transition: width 0.3s ease; font-size: 0.75rem; color: white\"\n          >\n            {{ Math.round(progress) }}%\n          </div>\n        </div>\n      </div>\n\n      <!-- 輔助說明文字 -->\n      <!-- 提供載入操作的詳細說明或提示資訊 -->\n      <div v-if=\"subText\" class=\"mt-2\">\n        <small class=\"my-content-xs-gray\">{{ subText }}</small>\n      </div>\n    </div>\n  </div>\n</template>\n","import { render } from \"./LoadingOverlay.vue?vue&type=template&id=9b0ed19c\"\nimport script from \"./LoadingOverlay.vue?vue&type=script&lang=js\"\nexport * from \"./LoadingOverlay.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","<script>\n  /**\n   * 📋 LeftView.vue - 左側控制面板組件\n   *\n   * 功能說明：\n   * 1. 🎛️ 提供圖層管理和控制的主要介面\n   * 2. 📊 顯示Schematic Map系統的標題和品牌資訊\n   * 3. 📋 整合圖層列表分頁，提供完整的圖層操作功能\n   * 4. 🎨 提供統一的左側面板樣式和佈局\n   * 5. 📱 支援響應式設計，適應不同螢幕尺寸\n   *\n   * 架構說明：\n   * - 標題區域：顯示系統名稱和品牌資訊\n   * - 圖層控制區域：包含 LayersTab 組件，提供圖層管理功能\n   *\n   * 設計理念：\n   * - 簡潔清晰的介面設計\n   * - 專注於圖層控制功能\n   * - 與中間和右側面板協調工作\n   *\n   * @component LeftView\n   * @version 1.0.0\n   */\n\n  // 🧩 子組件引入 (Subcomponent Imports)\n  import LayersTab from '../tabs/LayersTab.vue'; // 圖層列表分頁組件\n\n  export default {\n    name: 'LeftView',\n\n    /**\n     * 🧩 組件註冊 (Component Registration)\n     * 註冊左側面板內使用的子組件\n     */\n    components: {\n      LayersTab, // 圖層列表分頁組件\n    },\n\n    /**\n     * 🔧 組件設定函數 (Component Setup)\n     * 使用 Composition API 設定組件邏輯\n     * 目前此組件主要作為容器，邏輯主要由子組件處理\n     */\n    setup() {\n      // 📤 返回響應式數據給模板使用\n      // 目前不需要額外的響應式狀態，所有邏輯由子組件處理\n      return {};\n    },\n  };\n</script>\n\n<template>\n  <div class=\"my-bgcolor-gray-100 h-100 d-flex flex-column overflow-hidden\">\n    <!-- 📰 頁面標題區域 -->\n    <div class=\"p-3\">\n      <h1 class=\"my-font-size-lg my-letter-spacing-lg text-center m-3\">Schematic Map</h1>\n    </div>\n\n    <!-- 📋 圖層列表分頁內容 -->\n    <div class=\"flex-grow-1 overflow-hidden\">\n      <LayersTab />\n    </div>\n  </div>\n</template>\n\n<style scoped></style>\n","<script>\n  /**\n   * 📋 LayersTab.vue - 圖層列表分頁組件\n   *\n   * 功能說明：\n   * 1. 🎛️ 提供完整的圖層管理介面，包含顯示/隱藏控制\n   * 2. 📊 顯示圖層的載入狀態和進度資訊\n   * 3. 🔍 提供城市篩選功能\n   * 4. 📋 按統計區級別組織圖層群組\n   * 5. 🎨 提供視覺化的圖層狀態指示器\n   * 6. 📱 支援響應式設計和觸控操作\n   *\n   * 架構說明：\n   * - 篩選控制區：城市選擇器\n   * - 圖層群組區：按統計區級別分組的圖層列表\n   * - 狀態指示區：顯示圖層載入和可見性狀態\n   *\n   * 設計理念：\n   * - 直觀的圖層管理介面\n   * - 清晰的視覺狀態回饋\n   * - 高效的篩選和組織功能\n   *\n   * @component LayersTab\n   * @version 1.0.0\n   */\n\n  // 🔧 Vue Composition API 引入 (Vue Composition API Imports)\n  import { computed, ref } from 'vue'; // 引入響應式 API\n  import { useDataStore } from '@/stores/dataStore.js'; // 引入資料存儲\n\n  export default {\n    name: 'LayersTab',\n\n    /**\n     * 🔧 組件設定函數 (Component Setup)\n     * 使用 Composition API 設定組件邏輯和狀態管理\n     */\n    setup() {\n      // 📦 取得 Pinia 數據存儲實例 (Get Pinia Data Store Instance)\n      const dataStore = useDataStore();\n\n      // 📚 組件引用 (Component References)\n      /** 📋 圖層列表 DOM 元素引用，用於滾動和操作 */\n      const layerListRef = ref(null);\n\n      // 🧮 計算屬性 (Computed Properties)\n      /** 📊 從 store 中獲取圖層數據，當 store 狀態改變時自動更新 */\n      const layers = computed(() => dataStore.layers);\n\n      // 🔧 圖層操作函數 (Layer Operation Functions)\n\n      /**\n       * 🔘 切換圖層可見性 (Toggle Layer Visibility)\n       * 呼叫 store 中的 action 來切換指定圖層的顯示/隱藏狀態\n       *\n       * @param {string} layerId - 要切換的圖層 ID\n       */\n      const toggleLayer = (layerId) => {\n        console.log('🔘 LayersTab: 切換圖層', layerId);\n        dataStore.toggleLayerVisibility(layerId);\n      };\n\n      /**\n       * 🎛️ 處理開關變更事件 (Handle Toggle Change Event)\n       * 避免重複觸發，只在實際需要時切換圖層\n       * 提供詳細的狀態檢查和錯誤處理\n       *\n       * @param {string} layerId - 圖層 ID\n       * @param {Event} event - 變更事件對象\n       */\n      const handleToggleChange = (layerId, event) => {\n        // 防止事件冒泡，避免觸發父元素的事件\n        event.stopPropagation();\n\n        // 在所有圖層群組中查找指定的圖層\n        const layer = dataStore.layers\n          .flatMap((mainGroup) => mainGroup.groupLayers)\n          .find((l) => l.layerId === layerId);\n\n        // 檢查圖層是否存在\n        if (!layer) {\n          console.error('❌ LayersTab: 找不到圖層', layerId);\n          return;\n        }\n\n        // 記錄詳細的狀態資訊用於除錯\n        console.log('🎛️ LayersTab: 開關變更觸發', {\n          layerId,\n          layerName: layer.layerName,\n          currentVisible: layer.visible,\n          targetChecked: event.target.checked,\n          isLoaded: layer.isLoaded,\n          isLoading: layer.isLoading,\n        });\n\n        // 只有當當前狀態與 checkbox 狀態不一致時才切換\n        // 這可以避免重複觸發和狀態衝突\n        if (layer.visible !== event.target.checked) {\n          console.log('🎛️ LayersTab: 執行圖層切換', layerId, '新狀態:', event.target.checked);\n          dataStore.toggleLayerVisibility(layerId);\n        } else {\n          console.log('🎛️ LayersTab: 狀態已一致，跳過切換', layerId);\n        }\n      };\n\n      // 📤 返回響應式數據和方法給模板使用 (Return Reactive Data and Methods for Template)\n      return {\n        // 📊 圖層數據和狀態 (Layer Data and States)\n        layers, // 圖層群組數據\n        layerListRef, // 圖層列表 DOM 引用\n\n        // 🔧 圖層操作函數 (Layer Operation Functions)\n        toggleLayer, // 切換圖層可見性\n        handleToggleChange, // 處理開關變更事件\n\n        // 🛠️ 工具函數 (Utility Functions)\n      };\n    },\n  };\n</script>\n\n<template>\n  <div class=\"h-100 d-flex flex-column overflow-hidden my-bgcolor-gray-100\">\n    <div class=\"flex-grow-1 overflow-auto layer-list-container\" ref=\"layerListRef\">\n      <div class=\"mb-3\">\n        <!-- 主群組 -->\n        <div v-for=\"mainGroup in layers\" :key=\"mainGroup.groupName\" class=\"p-3\">\n          <!-- 主群組標題 -->\n          <div class=\"d-flex align-items-center pb-2\">\n            <div class=\"my-title-xs-gray\">{{ mainGroup.groupName }}</div>\n          </div>\n\n          <!-- 圖層列表 -->\n          <div v-for=\"layer in mainGroup.groupLayers\" :key=\"layer.layerId\" class=\"mb-1\">\n            <!-- 圖層卡片 -->\n            <div class=\"btn rounded-0 border-0 d-flex shadow-sm my-bgcolor-white-hover p-0\">\n              <!-- 圖層圖示 -->\n              <div :class=\"`my-bgcolor-${layer.colorName}`\" style=\"min-width: 6px\"></div>\n              <div class=\"w-100\">\n                <div class=\"d-flex\">\n                  <!-- 圖層名稱 - 點擊可切換圖層 -->\n                  <div\n                    class=\"d-flex align-items-center text-start w-100 px-3 py-2 cursor-pointer\"\n                    @click=\"toggleLayer(layer.layerId)\"\n                  >\n                    <span class=\"my-content-sm-black\">\n                      {{ layer.layerName }}\n                      <span class=\"my-content-xs-gray ms-2\">\n                        {{ layer.dashboardData?.totalCount }}\n                      </span>\n                    </span>\n                  </div>\n                  <!-- 切換圖層可見性 - 只有開關本身處理切換 -->\n                  <div\n                    class=\"d-flex align-items-center justify-content-center px-3 py-2\"\n                    @click.stop\n                  >\n                    <input\n                      type=\"checkbox\"\n                      :id=\"'switch-' + layer.layerId\"\n                      :checked=\"layer.visible\"\n                      :disabled=\"layer.isLoading\"\n                      @change=\"handleToggleChange(layer.layerId, $event)\"\n                    />\n                    <label :for=\"'switch-' + layer.layerId\"></label>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<style scoped>\n  /* 🎨 圖層切換開關樣式 (Layer Toggle Switch Styles) */\n  /* https://www.tpisoftware.com/tpu/articleDetails/2744 */\n\n  .cursor-pointer {\n    cursor: pointer;\n  }\n\n  /* 載入中的圖層顯示不同樣式 */\n  .btn:has(input:disabled) {\n    opacity: 0.7;\n  }\n\n  input[type='checkbox'] {\n    height: 0;\n    width: 0;\n    visibility: hidden;\n  }\n\n  label {\n    cursor: pointer;\n    width: 28px;\n    height: 16px;\n    background: var(--my-color-gray-300);\n    display: block;\n    border-radius: 16px;\n    position: relative;\n    transition: background-color 0.3s cubic-bezier(0.4, 0, 0.2, 1); /* 優化背景色過渡 */\n  }\n\n  label:after {\n    content: '';\n    position: absolute;\n    top: 2px;\n    left: 2px;\n    width: 12px;\n    height: 12px;\n    background: var(--my-color-white);\n    border-radius: 12px;\n    transition: transform 0.2s cubic-bezier(0.4, 0, 0.2, 1); /* 優化滑動過渡 */\n  }\n\n  input:checked + label {\n    background: var(--my-color-green);\n  }\n\n  input:checked + label:after {\n    transform: translateX(12px);\n  }\n\n  /* 禁用狀態樣式 */\n  input:disabled + label {\n    cursor: not-allowed;\n    opacity: 0.6;\n    background: var(--my-color-gray-200);\n  }\n\n  input:disabled + label:after {\n    background: var(--my-color-gray-300);\n  }\n</style>\n","import { render } from \"./LayersTab.vue?vue&type=template&id=0fa39767&scoped=true\"\nimport script from \"./LayersTab.vue?vue&type=script&lang=js\"\nexport * from \"./LayersTab.vue?vue&type=script&lang=js\"\n\nimport \"./LayersTab.vue?vue&type=style&index=0&id=0fa39767&scoped=true&lang=css\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-0fa39767\"]])\n\nexport default __exports__","import { render } from \"./LeftView.vue?vue&type=template&id=2370fd3f\"\nimport script from \"./LeftView.vue?vue&type=script&lang=js\"\nexport * from \"./LeftView.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","/** * 📊 右側分析面板組件 (Right Analysis Panel Component) * * 功能說明 (Features): * 1. 📋\n屬性資訊顯示：顯示選中地圖要素的詳細屬性資訊 * 2. 📊 圖層資訊管理：提供圖層統計資訊和項目數量顯示 *\n3. 🔄 分頁切換：支援屬性分頁和圖層資訊分頁的切換 * 4. 📱 響應式設計：適配不同螢幕尺寸的顯示需求 * 5.\n🎯 狀態同步：與全域狀態管理系統保持同步 * 6. 🎨 視覺化增強：提供美觀的分頁導航和內容展示 * *\n技術特點 (Technical Features): * - 使用 Vue 2 Options API 進行組件管理 * - 整合 Pinia 狀態管理系統 *\n- 支援響應式佈局和動態尺寸調整 * - 提供完整的事件處理和狀態同步 * - 整合多個分頁組件的協調工作 * *\n包含分頁 (Included Tabs): * - PropertiesTab：屬性分頁，顯示選中要素的詳細屬性 * -\nLayerInfo：圖層資訊分頁，顯示圖層統計和項目數量 * * @file RightView.vue * @version 2.0.0 * @author\nKevin Cheng * @since 1.0.0 */\n<script>\n  // ==================== 📦 第三方庫引入 (Third-Party Library Imports) ====================\n\n  /**\n   * 屬性分頁組件引入\n   * 提供選中地圖要素的詳細屬性顯示功能\n   *\n   * @see ../tabs/PropertiesTab.vue\n   */\n  import PropertiesTab from '../tabs/PropertiesTab.vue';\n\n  /**\n   * 空間分析分頁組件引入\n   * 提供圖層資訊和統計數據顯示功能\n   *\n   * @see ../tabs/layerInfoTab.vue\n   */\n  import LayerInfo from '../tabs/layerInfoTab.vue';\n\n  /**\n   * Pinia 狀態管理庫引入\n   * 提供集中式狀態管理和跨組件數據共享\n   *\n   * @see ../stores/dataStore.js\n   */\n  import { useDataStore } from '../stores/dataStore';\n\n  /**\n   * Vue Composition API 核心功能引入\n   * 提供響應式數據和計算屬性功能\n   *\n   * @see https://vuejs.org/\n   */\n  import { computed, watch } from 'vue';\n  import { getIcon } from '../utils/utils.js';\n\n  export default {\n    name: 'RightView',\n    components: {\n      PropertiesTab, // 物件屬性分頁組件\n      LayerInfo, // 圖層資訊分頁組件\n    },\n    props: {\n      /** 🔗 當前作用中的右側分頁標籤 */\n      activeRightTab: {\n        type: String,\n        default: 'layer-info',\n      },\n      /** 📈 分析結果清單數據 */\n      analysisList: {\n        type: Array,\n        default: () => [],\n      },\n      /** 📈 選中的分析項目 ID */\n      selectedAnalysisId: {\n        type: [Number, String],\n        default: null,\n      },\n      /** 📏 右側面板寬度 (像素) */\n      rightViewWidth: {\n        type: Number,\n        default: 250,\n      },\n    },\n\n    /**\n     * 📡 組件事件定義 (Component Events)\n     * 定義向父組件發送的事件類型\n     */\n    emits: [\n      'update:activeRightTab', // 更新作用中分頁\n      'select-analysis', // 選擇分析項目\n      'view-analysis', // 查看分析結果\n      'delete-analysis', // 刪除分析項目\n      'highlight-feature', // 高亮顯示地圖特徵\n    ],\n\n    /**\n     * 🔧 組件設定函數 (Component Setup)\n     * 使用 Composition API 設定組件邏輯\n     */\n    setup(props, { emit }) {\n      // 📦 取得 Pinia 數據存儲實例\n      const dataStore = useDataStore();\n\n      // 📊 可用的分頁列表\n      const availableTabs = [\n        { id: 'layer-info', name: '圖層資訊', icon: getIcon('info_circle').icon },\n        { id: 'properties', name: '屬性', icon: getIcon('location_dot').icon },\n      ];\n\n      // 🔘 切換分頁\n      const switchTab = (tabId) => {\n        emit('update:activeRightTab', tabId);\n      };\n\n      /**\n       * 📊 計算活躍分析項目數量 (Calculate Active Analysis Count)\n       * 統計狀態為「完成」的分析項目數量\n       *\n       * @returns {number} 完成狀態的分析項目數量\n       */\n      const getActiveAnalysisCount = () => {\n        return props.analysisList.filter((a) => a.status === '完成').length;\n      };\n\n      /**\n       * 👀 監聽選中物件的變化 (Watch Selected Feature Changes)\n       * 當 Pinia store 中的 selectedFeature 變化時執行回調\n       */\n      watch(\n        () => dataStore.selectedFeature,\n        (newFeature) => {\n          console.log('RightView - selectedFeature changed:', {\n            newFeature: newFeature,\n            properties: newFeature?.properties,\n            store: dataStore,\n          });\n        },\n        { immediate: true }\n      ); // immediate: true 表示立即執行一次\n\n      /**\n       * 🧮 選中物件計算屬性 (Selected Feature Computed Property)\n       * 從 Pinia store 獲取當前選中的地圖物件\n       * 提供響應式的選中物件數據給子組件使用\n       */\n      const selectedFeatureComputed = computed(() => {\n        const feature = dataStore.selectedFeature;\n        console.log('RightView - Computing selectedFeature:', {\n          feature: feature,\n          properties: feature?.properties,\n        });\n        return feature;\n      });\n\n      // 📤 返回響應式數據和函數給模板和子組件使用\n      return {\n        availableTabs,\n        switchTab,\n        getActiveAnalysisCount, // 活躍分析計數函數\n        selectedFeature: selectedFeatureComputed, // 選中物件計算屬性\n      };\n    },\n  };\n</script>\n\n<template>\n  <div class=\"my-right-panel h-100 d-flex flex-column overflow-hidden\">\n    <!-- 📑 分頁導航按鈕 -->\n    <div class=\"d-flex justify-content-center my-bgcolor-gray-200 p-3\">\n      <div class=\"d-flex align-items-center rounded-pill shadow my-blur gap-2 p-2 w-100\">\n        <button\n          v-for=\"tab in availableTabs\"\n          :key=\"tab.id\"\n          class=\"btn rounded-pill border-0 my-btn-transparent my-font-size-xs text-nowrap w-100 my-cursor-pointer\"\n          :class=\"{\n            'my-btn-blue': $props.activeRightTab === tab.id,\n          }\"\n          @click=\"switchTab(tab.id)\"\n          :title=\"tab.name\"\n        >\n          {{ tab.name }}\n        </button>\n      </div>\n    </div>\n\n    <!-- 📄 右側分頁內容區域 -->\n    <div class=\"flex-grow-1 overflow-auto\">\n      <!-- 📋 物件屬性分頁內容 -->\n      <div v-show=\"$props.activeRightTab === 'properties'\" class=\"h-100\">\n        <PropertiesTab\n          :selected-feature=\"selectedFeature\"\n          @highlight-feature=\"$emit('highlight-feature', $event)\"\n        />\n      </div>\n\n      <!-- 📊 圖層資訊分頁內容 -->\n      <div v-show=\"$props.activeRightTab === 'layer-info'\" class=\"h-100\">\n        <LayerInfo />\n      </div>\n    </div>\n  </div>\n</template>\n\n<style scoped></style>\n","<script>\n  import DetailItem from '../components/DetailItem.vue';\n  import { useDataStore } from '../stores/dataStore';\n  import { computed } from 'vue';\n\n  export default {\n    name: 'PropertiesTab',\n\n    /**\n     * 🧩 組件註冊 (Component Registration)\n     * 註冊物件屬性分頁內使用的子組件\n     */\n    components: {\n      DetailItem, // 詳細資訊項目組件\n    },\n\n    /**\n     * 🔧 組件設定函數 (Component Setup)\n     * 使用 Composition API 設定組件邏輯\n     */\n    setup() {\n      // 📦 取得 Pinia 數據存儲實例\n      const dataStore = useDataStore();\n\n      /**\n       * 📊 選中物件計算屬性 (Selected Feature Computed Property)\n       * 從 Pinia store 獲取當前選中的地圖物件\n       * 提供響應式的選中物件數據\n       */\n      const selectedFeature = computed(() => dataStore.selectedFeature);\n\n      const selectedLayer = computed(() => {\n        if (!selectedFeature.value?.properties?.layerId) {\n          return null;\n        }\n\n        const layerId = selectedFeature.value.properties.layerId;\n\n        // 特殊處理 DataTable 的數據\n        if (layerId === 'datatable') {\n          // 如果有項目顏色，使用該顏色\n          const itemColor = selectedFeature.value.properties.itemColor;\n          return {\n            colorName: 'custom', // 使用自定義顏色\n            layerName: '地鐵線路數據',\n            customColor: itemColor || '#6c757d', // 預設為灰色\n          };\n        }\n\n        const layer = dataStore.findLayerById(layerId);\n        return layer;\n      });\n\n      /**\n       * 🏷️ 圖層名稱計算屬性 (Layer Name Computed Property)\n       * 根據 selectedFeature.properties.layerId 從 dataStore 的 layers 中找到對應的圖層名稱，包含群組名稱\n       */\n      const layerName = computed(() => {\n        if (!selectedFeature.value?.properties?.layerId) {\n          return null;\n        }\n\n        const layerId = selectedFeature.value.properties.layerId;\n\n        // 特殊處理 DataTable 的數據\n        if (layerId === 'datatable') {\n          return {\n            groupName: '數據表格',\n            layerName: '地鐵線路數據',\n          };\n        }\n\n        const layer = dataStore.findLayerById(layerId);\n        if (!layer) return layerId;\n\n        const groupName = dataStore.findGroupNameByLayerId(layerId);\n        return {\n          groupName: groupName,\n          layerName: layer.layerName,\n        };\n      });\n\n      /**\n       * 📋 是否有屬性計算屬性 (Has Properties Computed Property)\n       * 檢查選中物件是否包含有效的屬性資料\n       *\n       * @returns {boolean} 是否有屬性資料\n       */\n      const hasProperties = computed(() => {\n        return (\n          !!selectedFeature.value?.properties?.propertyData &&\n          Object.keys(selectedFeature.value.properties.propertyData).length > 0\n        );\n      });\n\n      // 📤 返回響應式數據給模板使用\n      return {\n        selectedFeature, // 選中物件\n        selectedLayer, // 選中圖層\n        layerName, // 圖層名稱\n        hasProperties, // 是否有屬性\n      };\n    },\n\n    /**\n     * 🛠️ 組件方法定義 (Component Methods)\n     * 定義資料格式化和處理方法\n     */\n    methods: {\n      /**\n       * 🎨 格式化屬性值 (Format Property Value)\n       * 根據值的類型進行適當的格式化處理\n       *\n       * @param {any} value - 原始屬性值\n       * @returns {string} 格式化後的顯示值\n       */\n      formatValue(value) {\n        // 數字類型：添加千分位分隔符\n        if (typeof value === 'number') {\n          return value.toLocaleString();\n        }\n        // 其他類型：直接返回\n        return value;\n      },\n    },\n  };\n</script>\n\n<template>\n  <div class=\"h-100 flex-grow-1 d-flex flex-column my-bgcolor-gray-200\">\n    <div v-if=\"selectedFeature\" class=\"my-bgcolor-white h-100\">\n      <div>\n        <div\n          v-if=\"selectedLayer\"\n          :class=\"\n            selectedLayer.colorName === 'custom' ? '' : `my-bgcolor-${selectedLayer.colorName}`\n          \"\n          :style=\"{\n            minHeight: '4px',\n            backgroundColor:\n              selectedLayer.colorName === 'custom' ? selectedLayer.customColor : undefined,\n          }\"\n        ></div>\n\n        <div class=\"p-3\">\n          <div class=\"pb-2\">\n            <div class=\"my-title-xs-gray pb-1\">圖層</div>\n            <div class=\"my-content-sm-black pb-1\">\n              <span v-if=\"layerName?.groupName\" class=\"my-title-xs-gray\"\n                >{{ layerName.groupName }} -\n              </span>\n              <span>{{ layerName?.layerName || layerName }}</span>\n            </div>\n          </div>\n          <template v-if=\"hasProperties\">\n            <DetailItem\n              v-for=\"(value, key) in selectedFeature.properties.propertyData\"\n              :key=\"key\"\n              :label=\"key\"\n              :value=\"formatValue(value)\"\n            />\n          </template>\n        </div>\n      </div>\n    </div>\n\n    <!-- 📭 無點擊地圖上物件的空狀態 -->\n    <div v-else class=\"flex-grow-1 d-flex align-items-center justify-content-center\">\n      <div class=\"text-center\">\n        <div class=\"my-title-md-gray p-3\">沒有點擊地圖上的物件</div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<style scoped></style>\n","<script>\n  /**\n   * 📋 DetailItem.vue - 詳細資訊項目組件\n   *\n   * 功能說明：\n   * 1. 📝 顯示標籤-數值對的資訊項目\n   * 2. 🎨 提供統一的樣式格式化\n   * 3. 🔄 支援多種數據類型的顯示\n   * 4. 📱 響應式設計，適配不同螢幕尺寸\n   *\n   * 使用場景：\n   * - 屬性面板中的資料項目顯示\n   * - 詳細資訊的結構化展示\n   * - 表單預覽和確認頁面\n   *\n   * @component DetailItem\n   * @example\n   * <DetailItem label=\"人口數\" :value=\"12345\" />\n   * <DetailItem label=\"區域名稱\" value=\"中西區\" />\n   */\n\n  export default {\n    name: 'DetailItem',\n\n    /**\n     * 🔧 組件屬性定義 (Component Props)\n     * 定義組件接收的外部屬性和驗證規則\n     */\n    props: {\n      /**\n       * 📝 標籤文字\n       * 顯示在數值上方的描述性標籤\n       * @type {String}\n       * @required true\n       * @example \"人口數\", \"面積\", \"密度\"\n       */\n      label: {\n        type: String,\n        required: true,\n      },\n\n      /**\n       * 📊 顯示數值\n       * 要顯示的實際數值，支援多種資料類型\n       * @type {String|Number|Boolean|Object}\n       * @required true\n       * @example 12345, \"中西區\", true, {name: \"test\"}\n       */\n      value: {\n        type: [String, Number, Boolean, Object],\n        required: true,\n      },\n    },\n  };\n</script>\n\n<template>\n  <!-- 📋 詳細資訊項目容器 (Detail Item Container) -->\n  <!-- 提供標籤-數值對的結構化顯示，使用統一的間距和樣式 -->\n  <div class=\"pb-2\">\n    <!-- 📝 標籤文字區域 (Label Text Area) -->\n    <!-- 使用灰色小標題樣式，提供數值的描述性標籤 -->\n    <div class=\"my-title-xs-gray pb-1\">{{ label }}</div>\n\n    <!-- 📊 數值顯示區域 (Value Display Area) -->\n    <!-- 使用黑色內容樣式，顯示實際的數據值 -->\n    <div class=\"my-content-sm-black pb-1\">{{ value }}</div>\n  </div>\n</template>\n\n<style scoped>\n  /**\n   * 🎨 DetailItem 組件專屬樣式 (Component-Specific Styles)\n   *\n   * 定義組件內部元素的樣式規則，使用 scoped 避免樣式污染\n   * 主要樣式規則已在 common.css 中定義，此處僅包含組件特定調整\n   */\n\n  /* 📝 長文字自動換行處理 (Long Text Wrapping) */\n  /* 確保過長的數值能夠正確換行顯示，避免佈局破壞 */\n  .lead {\n    word-wrap: break-word; /* 強制長單詞在邊界處換行 */\n  }\n\n  /* 🖼️ 中間分隔器樣式 (Middle Resizer Styles) */\n  /* 為組件提供視覺分隔效果，增強內容層次感 */\n  .my-resizer-middle {\n    background-color: white; /* 白色背景 */\n    position: relative; /* 相對定位，便於邊框定位 */\n    border-top: 1px solid var(--my-color-gray-200); /* 上邊框分隔線 */\n    border-bottom: 1px solid var(--my-color-gray-200); /* 下邊框分隔線 */\n  }\n</style>\n","import { render } from \"./DetailItem.vue?vue&type=template&id=c153d010&scoped=true\"\nimport script from \"./DetailItem.vue?vue&type=script&lang=js\"\nexport * from \"./DetailItem.vue?vue&type=script&lang=js\"\n\nimport \"./DetailItem.vue?vue&type=style&index=0&id=c153d010&scoped=true&lang=css\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-c153d010\"]])\n\nexport default __exports__","import { render } from \"./PropertiesTab.vue?vue&type=template&id=0f2e1c42\"\nimport script from \"./PropertiesTab.vue?vue&type=script&lang=js\"\nexport * from \"./PropertiesTab.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","/**\n * 🛠️ 通用工具函數模組 (Common Utility Module)\n *\n * 功能說明 (Features):\n * 1. 🎨 圖標管理系統：統一管理應用程式中的所有圖標\n * 2. 🌐 多語言支援：提供中文和英文的圖標文字對應\n * 3. 🔧 圖標工具函數：提供便捷的圖標獲取和渲染方法\n * 4. 📱 響應式圖標：支援不同尺寸和樣式的圖標顯示\n * 5. 🎯 類型安全：提供完整的 TypeScript 類型定義\n *\n * 技術特點 (Technical Features):\n * - 集中式圖標管理，便於維護和更新\n * - 支援 Font Awesome 圖標庫\n * - 提供 HTML 和 CSS 類名兩種輸出格式\n * - 支援自定義 CSS 類名擴展\n *\n * 使用場景 (Use Cases):\n * - 表格排序圖標\n * - 載入狀態指示器\n * - 功能按鈕圖標\n * - 狀態指示圖標\n *\n * @file utils.js\n * @version 2.0.0\n * @author Kevin Cheng\n * @since 1.0.0\n */\n\n// ==================== 🛠️ 圖標和介面輔助函數 (Icon and UI Helper Functions) ====================\n\n/**\n * 🎨 圖標映射表 (Icon Mapping Table)\n *\n * 統一管理系統中使用的所有圖標，支援多語言和 FontAwesome 類名\n * 每個圖標包含中文名稱、英文名稱和對應的 FontAwesome 類名\n *\n * 設計原則：\n * - 使用語義化的鍵名，便於理解和維護\n * - 提供完整的中英文對照\n * - 統一使用 FontAwesome 5 圖標庫\n * - 保持圖標風格的一致性\n *\n * @type {Object.<string, {zh: string, en: string, icon: string}>}\n * @description 圖標鍵名對應到包含中英文名稱和 HTML 標籤的物件\n *\n * @example\n * // 圖標結構範例\n * {\n *   chart_line: {\n *     zh: '線圖',\n *     en: 'Line Chart',\n *     icon: '<i class=\"fas fa-chart-line\"></i>'\n *   }\n * }\n */\nexport const ICONS = {\n  // 圖表相關圖標\n  chart_line: { zh: '線圖', en: 'Line Chart', icon: '<i class=\"fas fa-chart-line\"></i>' },\n  chart_bar: { zh: '長條圖', en: 'Bar Chart', icon: '<i class=\"fas fa-chart-bar\"></i>' },\n\n  // 載入狀態圖標\n  spinner: { zh: '載入中', en: 'Loading', icon: '<i class=\"fas fa-spinner\"></i>' },\n\n  // 排序相關圖標\n  sort: { zh: '排序', en: 'Sort', icon: '<i class=\"fas fa-sort\"></i>' },\n  sort_up: { zh: '升序', en: 'Sort Ascending', icon: '<i class=\"fas fa-sort-up\"></i>' },\n  sort_down: { zh: '降序', en: 'Sort Descending', icon: '<i class=\"fas fa-sort-down\"></i>' },\n\n  // 資訊和狀態圖標\n  info_circle: { zh: '資訊', en: 'Information', icon: '<i class=\"fas fa-info-circle\"></i>' },\n  location_dot: { zh: '位置', en: 'Location', icon: '<i class=\"fa-solid fa-location-dot\"></i>' },\n\n  // 圖層和資料相關圖標\n  layer_group: { zh: '圖層', en: 'Layer Group', icon: '<i class=\"fas fa-layer-group\"></i>' },\n  table: { zh: '表格', en: 'Table', icon: '<i class=\"fas fa-table\"></i>' },\n};\n\n/**\n * 🎯 根據鍵名獲取圖標資訊 (Get Icon Information by Key)\n *\n * 從全域圖標庫中獲取指定鍵名的圖標資訊，包括文字和圖標類名\n * 提供多語言支援和錯誤處理機制\n *\n * 功能說明：\n * - 支援中文和英文兩種語言\n * - 自動提取 FontAwesome 類名\n * - 提供預設的錯誤圖標\n * - 返回標準化的圖標資訊物件\n *\n * @param {string} iconKey - 圖標鍵名，必須在 ICONS 物件中定義\n * @param {string} [lang='zh'] - 語言代碼，支援 'zh'（中文）和 'en'（英文）\n * @returns {Object} 包含文字和圖標類名的物件\n * @returns {string} returns.text - 圖標的文字描述\n * @returns {string} returns.icon - FontAwesome 圖標類名\n *\n * @description 用於在組件中獲取圖標的文字和類名，支援多語言顯示\n *\n * @example\n * // 獲取線圖圖標的中文資訊\n * const chartIcon = getIcon('chart_line');\n * // 返回: { text: '線圖', icon: 'fas fa-chart-line' }\n *\n * // 獲取線圖圖標的英文資訊\n * const chartIconEn = getIcon('chart_line', 'en');\n * // 返回: { text: 'Line Chart', icon: 'fas fa-chart-line' }\n *\n * // 獲取不存在的圖標（會返回預設錯誤圖標）\n * const unknownIcon = getIcon('unknown_icon');\n * // 返回: { text: 'unknown_icon', icon: 'fas fa-question-circle' }\n */\nexport function getIcon(iconKey, lang = 'zh') {\n  const iconInfo = ICONS[iconKey];\n  if (!iconInfo) {\n    // console.warn(`找不到圖標定義: ${iconKey}`);\n    return {\n      text: iconKey,\n      icon: 'fas fa-question-circle',\n    };\n  }\n\n  // 從完整的 HTML 標籤中提取 class 名稱\n  const classMatch = iconInfo.icon.match(/class=\"([^\"]+)\"/);\n  const iconClass = classMatch ? classMatch[1] : 'fas fa-question-circle';\n\n  return {\n    text: iconInfo[lang] || iconInfo.zh,\n    icon: iconClass,\n  };\n}\n\n/**\n * 🎨 根據鍵名獲取完整的圖標 HTML (Get Complete Icon HTML by Key)\n *\n * 從全域圖標庫中獲取指定鍵名的完整圖標 HTML 標籤\n * 支援自定義 CSS 類名擴展，用於添加動畫效果或樣式修飾\n *\n * 功能說明：\n * - 返回完整的 HTML 標籤，可直接插入 DOM\n * - 支援額外的 CSS 類名添加\n * - 提供錯誤處理和預設圖標\n * - 保持 HTML 標籤的完整性\n *\n * @param {string} iconKey - 圖標鍵名，必須在 ICONS 物件中定義\n * @param {string} [additionalClasses=''] - 額外的 CSS 類名，會添加到現有的 class 屬性中\n * @returns {string} 完整的圖標 HTML 標籤\n *\n * @description 用於在模板中直接渲染圖標 HTML，支援樣式擴展\n *\n * @example\n * // 獲取線圖圖標的完整 HTML\n * const chartIconHtml = getIconHtml('chart_line');\n * // 返回: '<i class=\"fas fa-chart-line\"></i>'\n *\n * // 獲取帶有額外類名的載入圖標 HTML\n * const spinnerHtml = getIconHtml('spinner', 'fa-spin me-2');\n * // 返回: '<i class=\"fas fa-spinner fa-spin me-2\"></i>'\n *\n * // 獲取帶有自定義樣式的圖標 HTML\n * const customIcon = getIconHtml('info_circle', 'text-primary fs-4');\n * // 返回: '<i class=\"fas fa-info-circle text-primary fs-4\"></i>'\n *\n * // 獲取不存在的圖標（會返回預設錯誤圖標）\n * const unknownIcon = getIconHtml('unknown_icon', 'text-danger');\n * // 返回: '<i class=\"fas fa-question-circle text-danger\"></i>'\n */\nexport function getIconHtml(iconKey, additionalClasses = '') {\n  const iconInfo = ICONS[iconKey];\n  if (!iconInfo) {\n    // console.warn(`找不到圖標定義: ${iconKey}`);\n    return `<i class=\"fas fa-question-circle${additionalClasses ? ' ' + additionalClasses : ''}\"></i>`;\n  }\n\n  // 如果有額外的類名，則插入到現有的 class 中\n  if (additionalClasses) {\n    return iconInfo.icon.replace(/class=\"([^\"]+)\"/, `class=\"$1 ${additionalClasses}\"`);\n  }\n\n  return iconInfo.icon;\n}\n","/** * 📊 圖層資訊顯示組件 (Layer Information Display Component) * * 功能概述 (Function Overview): *\n本組件負責顯示當前選中圖層的詳細資訊，包括基本統計數據、項目數量、 *\n以及相關的技術參數。提供直觀的圖層資訊查看介面。 * * 主要功能 (Main Features): * 1. 📋\n圖層資訊展示：顯示當前選中圖層的基本資訊和統計數據 * 2. 📊\n項目數量統計：計算並顯示圖層中包含的資料項目總數 * 3. 🔄\n多圖層支援：支援多個圖層的分頁切換和資訊顯示 * 4. 📱 響應式設計：適配不同螢幕尺寸的顯示需求 * 5. 🎯\n即時更新：當圖層狀態變化時自動更新顯示內容 * 6. 📐 技術參數顯示：顯示 D3.js 繪圖區域的尺寸資訊 * *\n技術特點 (Technical Features): * - 使用 Vue 3 Composition API 進行現代化狀態管理 * - 整合 Pinia\n狀態管理系統實現跨組件數據共享 * - 支援動態圖層切換和資訊即時更新 * - 提供簡潔直觀的圖層資訊展示介面\n* - 具備載入狀態指示和錯誤處理機制 * * 顯示內容 (Display Content): * -\n項目數量：當前圖層包含的資料項目總數 * - 圖層標題：包含群組名稱和圖層名稱的完整標題 * -\n分頁導航：支援多圖層的分頁切換功能 * - 技術參數：D3.js 繪圖區域的寬度和高度資訊 * -\n載入狀態：顯示資料載入進度和狀態 * * @file layerInfoTab.vue * @version 2.1.0 * @author Kevin Cheng *\n@since 1.0.0 * @updated 2024 - 重構為圖層資訊顯示組件 */\n<script setup>\n  // ==================== 📦 第三方庫引入 (Third-Party Library Imports) ====================\n\n  /**\n   * Vue 3 Composition API 核心功能引入\n   * 提供響應式數據管理、計算屬性、生命週期鉤子等現代化 Vue 開發功能\n   *\n   * @description 包含：\n   * - ref: 創建響應式基本類型數據\n   * - computed: 創建計算屬性，自動追蹤依賴變化\n   * - watch: 監聽響應式數據變化\n   * - onMounted: 組件掛載完成後的生命週期鉤子\n   *\n   * @see https://vuejs.org/guide/extras/composition-api-faq.html\n   */\n  import { ref, computed, watch, onMounted } from 'vue';\n\n  /**\n   * Pinia 狀態管理庫引入\n   * 提供集中式狀態管理和跨組件數據共享能力\n   *\n   * @description 主要功能：\n   * - 集中管理應用程式全域狀態\n   * - 提供響應式狀態更新機制\n   * - 支援跨組件狀態共享\n   * - 整合開發者工具支援\n   *\n   * @see https://pinia.vuejs.org/introduction.html\n   */\n  import { useDataStore } from '@/stores/dataStore.js';\n\n  /**\n   * 工具函數引入\n   * 提供圖示 HTML 生成和組件引入功能\n   */\n  import { getIconHtml } from '../utils/utils.js';\n  import DetailItem from '../components/DetailItem.vue';\n\n  // ==================== 🏪 狀態管理初始化 (State Management Initialization) ====================\n\n  /**\n   * 獲取 Pinia 數據存儲實例\n   * 用於訪問全域狀態和圖層數據，實現組件間的數據共享\n   *\n   * @type {Object} Pinia store 實例\n   * @description 提供對全域圖層數據、設定狀態等的訪問權限\n   */\n  const dataStore = useDataStore();\n\n  // ==================== 📊 響應式狀態定義 (Reactive State Definition) ====================\n\n  /**\n   * 📑 當前作用中的圖層分頁 (Active Layer Tab)\n   * 追蹤使用者當前選中的圖層分頁，用於控制資訊內容顯示\n   *\n   * @type {Ref<string|null>}\n   * @description\n   * - 存儲當前選中圖層的 layerId\n   * - null 表示沒有選中任何圖層\n   * - 用於控制哪個圖層的資訊需要顯示\n   */\n  const activeLayerTab = ref(null);\n\n  /**\n   * 📊 分析結果 (Analysis Results)\n   * 存儲圖層分析的結果數據，用於顯示統計資訊\n   *\n   * @type {Ref<Object|null>}\n   * @description\n   * - 包含圖層統計數據的物件\n   * - null 表示尚未載入分析結果\n   * - 結構包含 layerName, timestamp, statistics 等欄位\n   */\n  const analysisResults = ref(null);\n\n  /**\n   * 🔄 分析載入狀態 (Analysis Loading State)\n   * 追蹤分析過程的載入狀態，用於顯示載入指示器\n   *\n   * @type {Ref<boolean>}\n   * @description\n   * - true: 正在載入分析結果，顯示載入動畫\n   * - false: 載入完成，顯示分析結果或錯誤訊息\n   */\n  const isLoadingAnalysis = ref(false);\n\n  // ==================== 📊 計算屬性定義 (Computed Properties Definition) ====================\n\n  /**\n   * 獲取所有可見且有資料的圖層 (Get All Visible Layers with Data)\n   * 從全域狀態中篩選出可見且已載入資料的圖層\n   *\n   * @type {ComputedRef<Array>}\n   * @description\n   * - 返回包含所有可見圖層的陣列\n   * - 用於生成分頁導航和圖層切換功能\n   * - 每個圖層包含 layerId, layerName, dataTableData 等屬性\n   * - 自動響應全域狀態變化\n   *\n   * @returns {Array<Object>} 可見圖層陣列\n   */\n  const visibleLayers = computed(() => {\n    // 從數據存儲中獲取所有圖層\n    const allLayers = dataStore.getAllLayers();\n    // 篩選出可見的圖層（layer.visible === true）\n    return allLayers.filter((layer) => layer.visible);\n  });\n\n  // ==================== 🎯 核心功能函數 (Core Function Functions) ====================\n\n  /**\n   * 📑 設定作用中圖層分頁 (Set Active Layer Tab)\n   * 切換到指定的圖層分頁並觸發相關的資訊載入\n   *\n   * @param {string} layerId - 要切換到的圖層 ID\n   * @description 更新 activeLayerTab 狀態，觸發圖層資訊載入\n   */\n  const setActiveLayerTab = (layerId) => {\n    activeLayerTab.value = layerId;\n  };\n\n  /**\n   * 📊 取得圖層完整標題 (包含群組名稱) (Get Layer Full Title with Group Name)\n   * 組合群組名稱和圖層名稱，形成完整的圖層標題\n   *\n   * @param {Object} layer - 圖層物件\n   * @returns {Object} 包含 groupName 和 layerName 的物件\n   * @description\n   * - 從 dataStore 中查找對應的群組名稱\n   * - 返回結構化的標題資訊\n   * - 處理圖層不存在的情況\n   */\n  const getLayerFullTitle = (layer) => {\n    if (!layer) return { groupName: null, layerName: '未知圖層' };\n    const groupName = dataStore.findGroupNameByLayerId(layer.layerId);\n    return {\n      groupName: groupName,\n      layerName: layer.layerName,\n    };\n  };\n\n  /**\n   * 📊 取得當前圖層資訊數據 (Get Current Layer Info Data)\n   * 獲取當前選中圖層的 layerInfoData\n   *\n   * @returns {Object|null} 當前圖層的資訊數據\n   * @description\n   * - 查找當前選中的圖層\n   * - 返回 layerInfoData 對象\n   * - 處理圖層不存在或無資料的情況\n   */\n  const getCurrentLayerInfoData = () => {\n    if (!activeLayerTab.value) return null;\n    const currentLayer = visibleLayers.value.find(\n      (layer) => layer.layerId === activeLayerTab.value\n    );\n    return currentLayer ? currentLayer.layerInfoData || null : null;\n  };\n\n  // ==================== 👀 響應式監聽器 (Reactive Watchers) ====================\n\n  /**\n   * 記錄上一次的圖層列表用於比較變化\n   * 用於偵測新增的圖層並自動切換到最新圖層\n   */\n  const previousLayers = ref([]);\n\n  /**\n   * 👀 監聽可見圖層變化，自動切換到新開啟的圖層分頁\n   * 當圖層可見性發生變化時，自動調整當前選中的分頁\n   *\n   * @description 主要邏輯：\n   * - 偵測新增的圖層並自動切換到最新圖層\n   * - 處理圖層被隱藏時的分頁切換\n   * - 當沒有可見圖層時清除選中狀態\n   * - 維護圖層列表的歷史記錄\n   */\n  watch(\n    () => visibleLayers.value,\n    (newLayers) => {\n      // 如果沒有可見圖層，清除選中的分頁和分析結果\n      if (newLayers.length === 0) {\n        activeLayerTab.value = null;\n        analysisResults.value = null;\n        previousLayers.value = [];\n        return;\n      }\n\n      // 找出新增的圖層（比較新舊圖層列表）\n      const previousLayerIds = previousLayers.value.map((layer) => layer.layerId);\n      const newLayerIds = newLayers.map((layer) => layer.layerId);\n      const addedLayerIds = newLayerIds.filter((id) => !previousLayerIds.includes(id));\n\n      // 如果有新增的圖層，自動切換到最新新增的圖層\n      if (addedLayerIds.length > 0) {\n        const newestAddedLayerId = addedLayerIds[addedLayerIds.length - 1];\n        activeLayerTab.value = newestAddedLayerId;\n      }\n      // 如果當前沒有選中分頁，或選中的分頁不在可見列表中，選中第一個\n      else if (\n        !activeLayerTab.value ||\n        !newLayers.find((layer) => layer.layerId === activeLayerTab.value)\n      ) {\n        activeLayerTab.value = newLayers[0].layerId;\n      }\n\n      // 更新記錄的圖層列表\n      previousLayers.value = [...newLayers];\n    },\n    { deep: true, immediate: true }\n  );\n\n  /**\n   * 👀 監聽當前選中的圖層變化，自動執行資訊載入\n   * 當 activeLayerTab 發生變化時，自動載入對應圖層的資訊\n   *\n   * @description 主要邏輯：\n   * - 當切換到新圖層時，自動載入該圖層的資訊\n   * - 當清除選中狀態時，清除分析結果\n   * - 確保圖層資訊與當前選中狀態保持同步\n   */\n  watch(\n    () => activeLayerTab.value,\n    (newLayerId) => {\n      if (newLayerId) {\n        const layer = dataStore.findLayerById(newLayerId);\n        if (layer && layer.processedJsonData) {\n          loadLayerInfo(layer);\n        }\n      } else {\n        analysisResults.value = null;\n      }\n    },\n    { immediate: true }\n  );\n\n  // ==================== 📊 資料處理函數 (Data Processing Functions) ====================\n\n  /**\n   * 📊 載入圖層基本資訊 (Load Layer Basic Information)\n   * 分析指定圖層的資料並計算統計資訊\n   *\n   * @param {Object} layer - 要載入資訊的圖層物件\n   * @description 主要功能：\n   * - 分析圖層中的 features 資料\n   * - 計算總數量、總人口數、平均值等統計指標\n   * - 提供載入狀態指示和錯誤處理\n   * - 將結果存儲到 analysisResults 中\n   */\n  const loadLayerInfo = async (layer) => {\n    if (!layer || !layer.processedJsonData) {\n      console.warn('無法載入資訊：圖層數據不存在');\n      return;\n    }\n\n    isLoadingAnalysis.value = true;\n\n    try {\n      // 模擬載入過程，提供視覺反饋\n      await new Promise((resolve) => setTimeout(resolve, 500));\n\n      const features = layer.processedJsonData.features;\n\n      // 計算基本統計資訊\n      const stats = {\n        totalFeatures: features.length,\n        totalPopulation: features.reduce((sum, f) => sum + (f.properties.P_CNT || 0), 0),\n        totalCount: features.reduce((sum, f) => sum + (f.properties.count || 0), 0),\n        avgPopulation: 0,\n        avgCount: 0,\n      };\n\n      // 計算平均值（避免除零錯誤）\n      if (stats.totalFeatures > 0) {\n        stats.avgPopulation = stats.totalPopulation / stats.totalFeatures;\n        stats.avgCount = stats.totalCount / stats.totalFeatures;\n      }\n\n      // 儲存分析結果\n      analysisResults.value = {\n        layerName: layer.layerName,\n        timestamp: new Date().toLocaleString(),\n        statistics: stats,\n      };\n\n      console.log('圖層資訊載入完成:', analysisResults.value);\n    } catch (error) {\n      console.error('載入圖層資訊失敗:', error);\n      // 儲存錯誤資訊以供顯示\n      analysisResults.value = {\n        error: '載入過程中發生錯誤',\n        details: error.message,\n      };\n    } finally {\n      isLoadingAnalysis.value = false;\n    }\n  };\n\n  // ==================== 🚀 生命週期鉤子 (Lifecycle Hooks) ====================\n\n  /**\n   * 🚀 組件掛載事件 (Component Mounted Event)\n   * 組件初始化完成後的設定工作\n   *\n   * @description 主要工作：\n   * - 初始化第一個可見圖層為作用中分頁\n   * - 確保組件載入後有正確的初始狀態\n   */\n  onMounted(() => {\n    // 初始化第一個可見圖層為作用中分頁\n    if (visibleLayers.value.length > 0 && !activeLayerTab.value) {\n      activeLayerTab.value = visibleLayers.value[0].layerId;\n    }\n  });\n</script>\n\n<template>\n  <!-- 📊 圖層資訊分頁視圖組件 -->\n  <div class=\"d-flex flex-column my-bgcolor-gray-200 h-100\">\n    <!-- 📑 圖層分頁導航 -->\n    <div v-if=\"visibleLayers.length > 0\" class=\"\">\n      <ul class=\"nav nav-tabs nav-fill\">\n        <li\n          v-for=\"layer in visibleLayers\"\n          :key=\"layer.layerId\"\n          class=\"nav-item d-flex flex-column align-items-center\"\n        >\n          <!-- tab按鈕 -->\n          <div\n            class=\"btn nav-link rounded-0 border-0 position-relative d-flex align-items-center justify-content-center my-bgcolor-gray-200\"\n            :class=\"{\n              active: activeLayerTab === layer.layerId,\n            }\"\n            @click=\"setActiveLayerTab(layer.layerId)\"\n          >\n            <span>\n              <span v-if=\"getLayerFullTitle(layer).groupName\" class=\"my-title-xs-gray\"\n                >{{ getLayerFullTitle(layer).groupName }} -\n              </span>\n              <span class=\"my-title-sm-black\">{{ getLayerFullTitle(layer).layerName }}</span>\n            </span>\n          </div>\n          <div class=\"w-100\" :class=\"`my-bgcolor-${layer.colorName}`\" style=\"min-height: 4px\"></div>\n        </li>\n      </ul>\n    </div>\n\n    <!-- 有開啟圖層時的內容 -->\n    <div v-if=\"visibleLayers.length > 0\" class=\"my-bgcolor-white h-100\">\n      <div>\n        <div class=\"p-3\">\n          <!-- 載入狀態區域 -->\n          <div v-if=\"isLoadingAnalysis\" class=\"pb-2\">\n            <div class=\"my-title-xs-gray pb-1\">載入狀態</div>\n            <div class=\"my-content-sm-black pb-1\">\n              <span v-html=\"getIconHtml('spinner', 'fa-spin me-2')\"></span>\n              正在載入圖層資訊...\n            </div>\n          </div>\n\n          <!-- 圖層資訊顯示區域 -->\n          <template v-if=\"visibleLayers.length > 0 && getCurrentLayerInfoData()\">\n            <!-- 顯示 layerInfoData 的所有內容 -->\n            <div v-for=\"(value, key) in getCurrentLayerInfoData()\" :key=\"key\" class=\"pb-2\">\n              <div class=\"my-title-xs-gray pb-1\">{{ key }}</div>\n              <div class=\"my-content-sm-black pb-1\">\n                <span v-if=\"Array.isArray(value)\">{{ value.join(', ') }}</span>\n                <span v-else>{{ value }}</span>\n              </div>\n            </div>\n\n            <!-- D3jsTab 繪製範圍尺寸 -->\n            <DetailItem label=\"D3js Width\" :value=\"dataStore.d3jsDimensions.width + 'px'\" />\n            <DetailItem label=\"D3js Height\" :value=\"dataStore.d3jsDimensions.height + 'px'\" />\n          </template>\n\n          <!-- 錯誤顯示 -->\n          <div v-else-if=\"analysisResults && analysisResults.error\" class=\"pb-2\">\n            <div class=\"my-title-xs-gray pb-1\">載入錯誤</div>\n            <div class=\"my-content-sm-black pb-1\">{{ analysisResults.error }}</div>\n            <div v-if=\"analysisResults.details\" class=\"my-content-xs-gray pb-1\">\n              詳細信息：{{ analysisResults.details }}\n            </div>\n          </div>\n\n          <!-- 初始狀態 -->\n          <div v-else-if=\"!isLoadingAnalysis\" class=\"pb-2\">\n            <div class=\"my-title-xs-gray pb-1\">載入狀態</div>\n            <div class=\"my-content-sm-black pb-1\">等待圖層數據載入...</div>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <!-- 沒有開啟圖層時的空狀態 -->\n    <div v-else class=\"flex-grow-1 d-flex align-items-center justify-content-center\">\n      <div class=\"text-center\">\n        <div class=\"my-title-md-gray p-3\">沒有開啟的圖層</div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<style scoped></style>\n","import script from \"./layerInfoTab.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./layerInfoTab.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","import { render } from \"./RightView.vue?vue&type=template&id=af4aee04\"\nimport script from \"./RightView.vue?vue&type=script&lang=js\"\nexport * from \"./RightView.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","/** * 🌟 上半部區域組件 (Upper Area Component) * * 功能說明 (Features): * 1. 📊\n分頁管理：管理儀表板和 D3.js 圖表的分頁切換 * 2. 🗺️ 地圖顯示：提供地圖視覺化和互動功能 * 3. 📈\n數據視覺化：整合 D3.js 進行各種圖表繪製 * 4. 📱 響應式設計：適配不同螢幕尺寸的顯示需求 * 5. 🎯\n高亮功能：提供地圖要素高亮顯示功能 * 6. 🔄 狀態同步：與父組件保持狀態同步 * * 技術特點 (Technical\nFeatures): * - 使用 Vue 2 Options API 進行組件管理 * - 整合多個分頁組件，提供統一的介面 * -\n支援響應式佈局和動態尺寸調整 * - 提供完整的事件處理和狀態管理 * - 整合地圖和圖表視覺化功能 * *\n包含分頁 (Included Tabs): * - DashboardTab：儀表板分頁，顯示統計圖表和摘要資訊 * - D3jsTab：D3.js\n圖表分頁，提供進階數據視覺化 * * @file UpperView.vue * @version 2.0.0 * @author Kevin Cheng * @since\n1.0.0 */\n<script>\n  // ==================== 📦 第三方庫引入 (Third-Party Library Imports) ====================\n\n  /**\n   * Vue Composition API 核心功能引入\n   * 提供響應式數據、生命週期鉤子等功能\n   *\n   * @see https://vuejs.org/\n   */\n  import { ref, watch, nextTick } from 'vue';\n\n  // ==================== 🧩 子組件引入 (Subcomponent Imports) ====================\n\n  /**\n   * 儀表板分頁組件引入\n   * 提供統計圖表和數據摘要顯示功能\n   *\n   * @see ../tabs/DashboardTab.vue\n   */\n  import DashboardTab from '../tabs/DashboardTab.vue';\n\n  /**\n   * D3.js 圖表分頁組件引入\n   * 提供進階數據視覺化和圖表繪製功能\n   *\n   * @see ../tabs/D3jsTab.vue\n   */\n  import D3jsTab from '../tabs/D3jsTab.vue';\n\n  /**\n   * 處理後 JSON 數據分頁組件引入\n   * 顯示圖層的處理後 JSON 數據\n   *\n   * @see ../tabs/processedJsonDataTab.vue\n   */\n  import ProcessedJsonDataTab from '../tabs/processedJsonDataTab.vue';\n\n  /**\n   * 原始 JSON 數據分頁組件引入\n   * 顯示圖層的原始 JSON 數據\n   *\n   * @see ../tabs/jsonDataTab.vue\n   */\n  import JsonDataTab from '../tabs/jsonDataTab.vue';\n  import { getIcon } from '../utils/utils.js';\n\n  export default {\n    name: 'UpperView',\n\n    /**\n     * 🧩 組件註冊 (Component Registration)\n     * 註冊上半部面板內使用的子組件\n     */\n    components: {\n      DashboardTab,\n      D3jsTab,\n      ProcessedJsonDataTab,\n      JsonDataTab,\n    },\n\n    /**\n     * 🔧 組件屬性定義 (Component Props)\n     * 接收來自父組件的配置和狀態數據\n     */\n    props: {\n      activeUpperTab: { type: String, default: 'd3js' },\n      mainPanelWidth: { type: Number, default: 60 },\n      contentHeight: { type: Number, default: 500 },\n      selectedFilter: { type: String, default: '' },\n      zoomLevel: { type: Number, default: 11 },\n      isPanelDragging: { type: Boolean, default: false },\n      activeMarkers: { type: Number, default: 0 },\n    },\n\n    /**\n     * 📡 組件事件定義 (Component Events)\n     * 定義向父組件發送的事件類型\n     */\n    emits: [\n      'update:activeUpperTab', // 更新作用中分頁\n      'update:zoomLevel', // 更新地圖縮放等級\n      'update:currentCoords', // 更新當前座標\n      'update:activeMarkers', // 更新作用中標記數量\n      'feature-selected', // 選中地圖特徵\n    ],\n\n    /**\n     * 🔧 組件設定函數 (Component Setup)\n     * 使用 Composition API 設定組件邏輯\n     */\n    setup(props) {\n      // 📚 子組件引用 (Child Component References)\n      /** 📊 儀表板視圖組件引用 */\n      const DashboardTab = ref(null);\n      /** 📊 儀表板容器引用 (用於控制滑鼠事件) */\n      const dashboardContainerRef = ref(null);\n      /** 📊 D3.js 視圖組件引用 */\n      const D3jsTab = ref(null);\n      /** 📊 D3.js 容器引用 (用於控制滑鼠事件) */\n      const d3jsContainerRef = ref(null);\n      /** 📊 處理後 JSON 數據組件引用 */\n      const ProcessedJsonDataTab = ref(null);\n      /** 📊 處理後 JSON 數據容器引用 */\n      const processedJsonDataContainerRef = ref(null);\n      /** 📊 原始 JSON 數據組件引用 */\n      const JsonDataTab = ref(null);\n      /** 📊 原始 JSON 數據容器引用 */\n      const jsonDataContainerRef = ref(null);\n\n      /**\n       * 👀 監聽拖曳狀態和分頁變化 (Watch Dragging State and Tab Changes)\n       * 調整儀表板容器的滑鼠指標事件，防止拖曳時的干擾\n       */\n      watch(\n        [() => props.isPanelDragging, () => props.activeUpperTab],\n        ([dragging, tab]) => {\n          nextTick(() => {\n            // 處理儀表板容器\n            if (dashboardContainerRef.value) {\n              if (dragging && tab === 'dashboard') {\n                // 拖曳時禁用儀表板的滑鼠事件\n                dashboardContainerRef.value.style.pointerEvents = 'none';\n                console.log('MainContent: Dashboard container pointer-events set to none');\n              } else {\n                // 恢復儀表板的滑鼠事件\n                dashboardContainerRef.value.style.pointerEvents = 'auto';\n                console.log(\n                  'MainContent: Dashboard container pointer-events set to auto (dragging:',\n                  dragging,\n                  ', tab:',\n                  tab,\n                  ')'\n                );\n              }\n            }\n\n            // 處理 D3.js 容器\n            if (d3jsContainerRef.value) {\n              if (dragging && tab === 'd3js') {\n                // 拖曳時禁用 D3.js 容器的滑鼠事件\n                d3jsContainerRef.value.style.pointerEvents = 'none';\n                console.log('MainContent: D3.js container pointer-events set to none');\n              } else {\n                // 恢復 D3.js 容器的滑鼠事件\n                d3jsContainerRef.value.style.pointerEvents = 'auto';\n                console.log(\n                  'MainContent: D3.js container pointer-events set to auto (dragging:',\n                  dragging,\n                  ', tab:',\n                  tab,\n                  ')'\n                );\n              }\n            }\n\n            // 處理處理後 JSON 數據容器\n            if (processedJsonDataContainerRef.value) {\n              if (dragging && tab === 'processed-json-data') {\n                processedJsonDataContainerRef.value.style.pointerEvents = 'none';\n                console.log('MainContent: ProcessedJsonData container pointer-events set to none');\n              } else {\n                processedJsonDataContainerRef.value.style.pointerEvents = 'auto';\n                console.log(\n                  'MainContent: ProcessedJsonData container pointer-events set to auto (dragging:',\n                  dragging,\n                  ', tab:',\n                  tab,\n                  ')'\n                );\n              }\n            }\n\n            // 處理原始 JSON 數據容器\n            if (jsonDataContainerRef.value) {\n              if (dragging && tab === 'json-data') {\n                jsonDataContainerRef.value.style.pointerEvents = 'none';\n                console.log('MainContent: JsonData container pointer-events set to none');\n              } else {\n                jsonDataContainerRef.value.style.pointerEvents = 'auto';\n                console.log(\n                  'MainContent: JsonData container pointer-events set to auto (dragging:',\n                  dragging,\n                  ', tab:',\n                  tab,\n                  ')'\n                );\n              }\n            }\n          });\n        },\n        { immediate: true }\n      ); // immediate: true 表示立即執行一次\n\n      /**\n       * 👀 監聽分頁變化 (Watch Tab Changes)\n       * 當切換分頁時觸發相應的更新動作，確保組件正常顯示\n       */\n      watch(\n        () => props.activeUpperTab,\n        (newTab, oldTab) => {\n          console.log('🔄 UpperView: Tab changed from', oldTab, 'to', newTab);\n        }\n      );\n\n      /**\n       * 👀 監聽面板大小變化 (Watch Panel Size Changes)\n       * 當面板寬度或高度變化時，更新相應的子組件\n       */\n      watch([() => props.mainPanelWidth, () => props.contentHeight], () => {\n        nextTick(() => {\n          // 觸發 D3jsTab 重新繪製以適應新的容器尺寸\n          if (D3jsTab.value && D3jsTab.value.resize) {\n            D3jsTab.value.resize();\n          }\n        });\n      });\n\n      /**\n       * 🎯 高亮顯示指定地圖特徵 (Highlight Feature on Map)\n       * 如果當前不在地圖分頁，會自動切換到地圖分頁再執行高亮\n       * 注意：地圖功能已移除，此函數現在為空函數\n       *\n       * @param {Object} highlightData - 包含 layerId 和 id 的高亮數據物件\n       */\n      const highlightFeature = (highlightData) => {\n        console.log('🎯 UpperView: highlightFeature called with data:', highlightData);\n        console.log('🎯 highlightFeature: 地圖功能已移除，無需高亮顯示');\n        // 地圖功能已移除，不需要高亮顯示\n      };\n\n      /**\n       * 🔄 重設地圖視圖 (Reset Map View)\n       * 將地圖恢復到初始視圖狀態\n       * 注意：地圖功能已移除，此函數現在為空函數\n       */\n      const resetView = () => {\n        // 地圖功能已移除，不需要重設視圖\n        console.log('🔄 resetView: 地圖功能已移除，無需重設視圖');\n      };\n\n      /**\n       * 🗺️ 適應台南地區邊界 (Fit to Tainan Bounds)\n       * 調整地圖視圖以完整顯示台南地區\n       * 注意：地圖功能已移除，此函數現在為空函數\n       */\n      const fitToTainanBounds = () => {\n        // 地圖功能已移除，不需要適應邊界\n        console.log('🗺️ fitToTainanBounds: 地圖功能已移除，無需適應邊界');\n      };\n\n      /**\n       * 📏 手動刷新地圖尺寸 (Manually Refresh Map Size)\n       * 當容器大小變化但自動偵測失效時使用\n       * 現在用於觸發 D3jsTab 重新繪製\n       */\n      const invalidateMapSize = () => {\n        console.log('🔄 invalidateMapSize: 觸發 D3jsTab 重新繪製');\n        // 觸發 D3jsTab 重新繪製以適應新的容器尺寸\n        if (D3jsTab.value && D3jsTab.value.resize) {\n          D3jsTab.value.resize();\n        }\n      };\n\n      return {\n        DashboardTab, // 儀表板組件引用\n        D3jsTab, // D3.js 組件引用\n        ProcessedJsonDataTab, // 處理後 JSON 數據組件引用\n        JsonDataTab, // 原始 JSON 數據組件引用\n        dashboardContainerRef, // 儀表板容器引用\n        d3jsContainerRef, // D3.js 容器引用\n        processedJsonDataContainerRef, // 處理後 JSON 數據容器引用\n        jsonDataContainerRef, // 原始 JSON 數據容器引用\n        highlightFeature, // 高亮顯示功能\n        resetView, // 重設視圖功能\n        fitToTainanBounds, // 適應邊界功能\n        invalidateMapSize, // 刷新地圖尺寸功能\n\n        // 🛠️ 工具函數\n        getIcon, // 圖標獲取函數\n      };\n    },\n  };\n</script>\n\n<template>\n  <div class=\"d-flex flex-column my-bgcolor-gray-200 h-100\">\n    <div class=\"flex-grow-1 overflow-hidden position-relative\">\n      <!-- 統一的導航按鈕組 -->\n      <div class=\"position-absolute top-0 start-0 m-3\" style=\"z-index: 1000\">\n        <div class=\"d-flex align-items-center rounded-pill shadow my-blur gap-1 p-2\">\n          <!-- 📈 D3.js 按鈕 (D3.js Button) -->\n          <button\n            class=\"btn rounded-circle border-0 d-flex align-items-center justify-content-center my-btn-transparent my-font-size-xs\"\n            :class=\"{\n              'my-btn-blue': activeUpperTab === 'd3js',\n            }\"\n            @click=\"$emit('update:activeUpperTab', 'd3js')\"\n            style=\"width: 30px; height: 30px\"\n            title=\"D3.js 數據視覺化\"\n          >\n            <i :class=\"getIcon('chart_line').icon\"></i>\n          </button>\n          <!-- 📊 儀表板按鈕 (Dashboard Button) -->\n          <button\n            class=\"btn rounded-circle border-0 d-flex align-items-center justify-content-center my-btn-transparent my-font-size-xs\"\n            :class=\"{\n              'my-btn-blue': activeUpperTab === 'dashboard',\n            }\"\n            @click=\"$emit('update:activeUpperTab', 'dashboard')\"\n            style=\"width: 30px; height: 30px\"\n            title=\"資料儀表板\"\n          >\n            <i :class=\"getIcon('chart_bar').icon\"></i>\n          </button>\n          <!-- 📄 處理後 JSON 數據按鈕 (Processed JSON Data Button) -->\n          <button\n            class=\"btn rounded-circle border-0 d-flex align-items-center justify-content-center my-btn-transparent my-font-size-xs\"\n            :class=\"{\n              'my-btn-blue': activeUpperTab === 'processed-json-data',\n            }\"\n            @click=\"$emit('update:activeUpperTab', 'processed-json-data')\"\n            style=\"width: 30px; height: 30px\"\n            title=\"處理後 JSON 數據\"\n          >\n            <i class=\"fas fa-code\"></i>\n          </button>\n          <!-- 📄 原始 JSON 數據按鈕 (Original JSON Data Button) -->\n          <button\n            class=\"btn rounded-circle border-0 d-flex align-items-center justify-content-center my-btn-transparent my-font-size-xs\"\n            :class=\"{\n              'my-btn-blue': activeUpperTab === 'json-data',\n            }\"\n            @click=\"$emit('update:activeUpperTab', 'json-data')\"\n            style=\"width: 30px; height: 30px\"\n            title=\"原始 JSON 數據\"\n          >\n            <i class=\"fas fa-file-code\"></i>\n          </button>\n        </div>\n      </div>\n\n      <!-- D3.js 分頁內容 -->\n      <div\n        v-show=\"activeUpperTab === 'd3js'\"\n        ref=\"d3jsContainerRef\"\n        class=\"h-100 overflow-hidden pt-5\"\n      >\n        <!-- 🎛️ 為導航按鈕組預留空間 (Reserve Space for Navigation Buttons) -->\n        <div style=\"height: 40px\"></div>\n        <D3jsTab\n          ref=\"D3jsTab\"\n          :containerHeight=\"contentHeight\"\n          :isPanelDragging=\"isPanelDragging\"\n          :activeMarkers=\"activeMarkers\"\n        />\n      </div>\n\n      <!-- 儀表板分頁內容 -->\n      <div\n        v-show=\"activeUpperTab === 'dashboard'\"\n        ref=\"dashboardContainerRef\"\n        class=\"h-100 overflow-hidden pt-5\"\n      >\n        <!-- 🎛️ 為導航按鈕組預留空間 (Reserve Space for Navigation Buttons) -->\n        <div style=\"height: 40px\"></div>\n        <DashboardTab\n          ref=\"DashboardTab\"\n          :containerHeight=\"contentHeight\"\n          :isPanelDragging=\"isPanelDragging\"\n          :activeMarkers=\"activeMarkers\"\n        />\n      </div>\n\n      <!-- 處理後 JSON 數據分頁內容 -->\n      <div\n        v-show=\"activeUpperTab === 'processed-json-data'\"\n        ref=\"processedJsonDataContainerRef\"\n        class=\"h-100 overflow-hidden pt-5\"\n      >\n        <!-- 🎛️ 為導航按鈕組預留空間 (Reserve Space for Navigation Buttons) -->\n        <div style=\"height: 40px\"></div>\n        <ProcessedJsonDataTab\n          ref=\"ProcessedJsonDataTab\"\n          :containerHeight=\"contentHeight\"\n          :isPanelDragging=\"isPanelDragging\"\n          :activeMarkers=\"activeMarkers\"\n        />\n      </div>\n\n      <!-- 原始 JSON 數據分頁內容 -->\n      <div\n        v-show=\"activeUpperTab === 'json-data'\"\n        ref=\"jsonDataContainerRef\"\n        class=\"h-100 overflow-hidden pt-5\"\n      >\n        <!-- 🎛️ 為導航按鈕組預留空間 (Reserve Space for Navigation Buttons) -->\n        <div style=\"height: 40px\"></div>\n        <JsonDataTab\n          ref=\"JsonDataTab\"\n          :containerHeight=\"contentHeight\"\n          :isPanelDragging=\"isPanelDragging\"\n          :activeMarkers=\"activeMarkers\"\n        />\n      </div>\n    </div>\n  </div>\n</template>\n\n<style scoped></style>\n","<script setup>\n  import { ref, computed, watch, onMounted } from 'vue';\n  import { useDataStore } from '@/stores/dataStore.js';\n\n  const dataStore = useDataStore();\n\n  const activeLayerTab = ref(null); /** 📑 當前作用中的圖層分頁 */\n\n  // 獲取所有開啟且有資料的圖層\n  const visibleLayers = computed(() => {\n    const allLayers = dataStore.getAllLayers();\n    return allLayers.filter((layer) => layer.visible);\n  });\n\n  /**\n   * 📑 設定作用中圖層分頁 (Set Active Layer Tab)\n   * @param {string} layerId - 圖層 ID\n   */\n  const setActiveLayerTab = (layerId) => {\n    activeLayerTab.value = layerId;\n  };\n\n  /**\n   * 📊 當前圖層摘要 (Current Layer Summary)\n   */\n  const currentLayerSummary = computed(() => {\n    if (!activeLayerTab.value) return null;\n    const layer = visibleLayers.value.find((l) => l.layerId === activeLayerTab.value);\n    return layer ? layer.dashboardData || null : null;\n  });\n\n  /**\n   * 📊 取得當前選中圖層名稱 (Get Current Selected Layer Name)\n   */\n  const currentLayerName = computed(() => {\n    if (!activeLayerTab.value) return '無開啟圖層';\n    const layer = visibleLayers.value.find((l) => l.layerId === activeLayerTab.value);\n    return layer ? layer.layerName || '未知圖層' : '無開啟圖層';\n  });\n\n  /**\n   * 📊 取得圖層完整標題 (包含群組名稱) (Get Layer Full Title with Group Name)\n   */\n  const getLayerFullTitle = (layer) => {\n    if (!layer) return { groupName: null, layerName: '未知圖層' };\n    const groupName = dataStore.findGroupNameByLayerId(layer.layerId);\n    return {\n      groupName: groupName,\n      layerName: layer.layerName,\n    };\n  };\n\n  // 記錄上一次的圖層列表用於比較\n  const previousLayers = ref([]);\n\n  /**\n   * 👀 監聽可見圖層變化，自動切換到新開啟的圖層分頁\n   */\n  watch(\n    () => visibleLayers.value,\n    (newLayers) => {\n      // 如果沒有可見圖層，清除選中的分頁\n      if (newLayers.length === 0) {\n        activeLayerTab.value = null;\n        previousLayers.value = [];\n        return;\n      }\n\n      // 找出新增的圖層（比較新舊圖層列表）\n      const previousLayerIds = previousLayers.value.map((layer) => layer.layerId);\n      const newLayerIds = newLayers.map((layer) => layer.layerId);\n      const addedLayerIds = newLayerIds.filter((id) => !previousLayerIds.includes(id));\n\n      // 如果有新增的圖層，自動切換到最新新增的圖層\n      if (addedLayerIds.length > 0) {\n        const newestAddedLayerId = addedLayerIds[addedLayerIds.length - 1];\n        activeLayerTab.value = newestAddedLayerId;\n        console.log(\n          `🔄 自動切換到新開啟的圖層: ${newLayers.find((layer) => layer.layerId === newestAddedLayerId)?.layerName}`\n        );\n      }\n      // 如果當前沒有選中分頁，或選中的分頁不在可見列表中，選中第一個\n      else if (\n        !activeLayerTab.value ||\n        !newLayers.find((layer) => layer.layerId === activeLayerTab.value)\n      ) {\n        activeLayerTab.value = newLayers[0].layerId;\n      }\n\n      // 更新記錄的圖層列表\n      previousLayers.value = [...newLayers];\n    },\n    { deep: true, immediate: true }\n  );\n\n  /**\n   * 🚀 組件掛載事件 (Component Mounted Event)\n   */\n  onMounted(() => {\n    console.log('[DashboardTab] Component Mounted');\n\n    // 初始化第一個可見圖層為作用中分頁\n    if (visibleLayers.value.length > 0 && !activeLayerTab.value) {\n      activeLayerTab.value = visibleLayers.value[0].layerId;\n    }\n  });\n</script>\n\n<template>\n  <!-- 📊 多圖層資料儀表板視圖組件 -->\n  <div class=\"d-flex flex-column my-bgcolor-gray-200 h-100\">\n    <!-- 📑 圖層分頁導航 -->\n    <div v-if=\"visibleLayers.length > 0\" class=\"\">\n      <ul class=\"nav nav-tabs nav-fill\">\n        <li\n          v-for=\"layer in visibleLayers\"\n          :key=\"layer.layerId\"\n          class=\"nav-item d-flex flex-column align-items-center\"\n        >\n          <!-- tab按鈕 -->\n          <div\n            class=\"btn nav-link rounded-0 border-0 position-relative d-flex align-items-center justify-content-center my-bgcolor-gray-200\"\n            :class=\"{\n              active: activeLayerTab === layer.layerId,\n            }\"\n            @click=\"setActiveLayerTab(layer.layerId)\"\n          >\n            <span>\n              <span v-if=\"getLayerFullTitle(layer).groupName\" class=\"my-title-xs-gray\"\n                >{{ getLayerFullTitle(layer).groupName }} -\n              </span>\n              <span class=\"my-title-sm-black\">{{ getLayerFullTitle(layer).layerName }}</span>\n            </span>\n          </div>\n          <div class=\"w-100\" :class=\"`my-bgcolor-${layer.colorName}`\" style=\"min-height: 4px\"></div>\n        </li>\n      </ul>\n    </div>\n\n    <!-- 有開啟圖層時的內容 -->\n    <div v-if=\"visibleLayers.length > 0\" class=\"flex-grow-1 overflow-auto my-bgcolor-white p-3\">\n      <!-- 📊 當前圖層資訊 -->\n      <div class=\"mb-4\">\n        <h5 class=\"my-title-md-black\">{{ currentLayerName }}</h5>\n      </div>\n\n      <!-- 📊 圖層儀表板資料 -->\n      <div v-if=\"currentLayerSummary\">\n        <div class=\"rounded-4 my-bgcolor-gray-100 p-4 mb-3\">\n          <h6 class=\"mb-3\">完整儀表板資料</h6>\n          <pre\n            class=\"my-font-size-sm\"\n            style=\"\n              white-space: pre-wrap;\n              word-wrap: break-word;\n              max-height: 500px;\n              overflow-y: auto;\n            \"\n            >{{ JSON.stringify(currentLayerSummary, null, 2) }}</pre\n          >\n        </div>\n      </div>\n      <div v-else class=\"text-center py-5\">\n        <div class=\"my-title-md-gray\">此圖層沒有可用的儀表板資訊</div>\n      </div>\n    </div>\n\n    <!-- 沒有開啟圖層時的空狀態 -->\n    <div v-else class=\"flex-grow-1 d-flex align-items-center justify-content-center\">\n      <div class=\"text-center\">\n        <div class=\"my-title-md-gray p-3\">沒有開啟的圖層</div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<style scoped></style>\n","import script from \"./DashboardTab.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./DashboardTab.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","<script setup>\n  /**\n   * 📊 D3jsTab.vue - D3.js 數據視覺化分頁組件\n   *\n   * 功能說明：\n   * 1. 📑 圖層分頁導航 - 顯示所有可見圖層的標籤頁\n   * 2. 📊 當前圖層資訊 - 顯示選中圖層的名稱和詳細信息\n   * 3. 📈 圖層摘要資料 - 顯示總數量、行政區數量等統計信息\n   * 4. 🎨 D3.js 圖表 - 使用 D3.js 繪製各種類型的圖表（網格示意圖、行政區示意圖）\n   * 5. 🔄 自動切換功能 - 當新圖層開啟時自動切換到該圖層的分頁\n   *\n   * @component D3jsTab\n   * @version 2.0.0\n   * @author Kevin Cheng\n   */\n\n  import { ref, computed, watch, onMounted, onUnmounted, nextTick } from 'vue';\n  import { useDataStore } from '@/stores/dataStore.js';\n  import * as d3 from 'd3';\n\n  // Props\n  const props = defineProps({\n    containerHeight: {\n      type: Number,\n      default: 600,\n    },\n    isPanelDragging: {\n      type: Boolean,\n      default: false,\n    },\n    activeMarkers: {\n      type: Array,\n      default: () => [],\n    },\n  });\n\n  const dataStore = useDataStore();\n\n  const activeLayerTab = ref(null); /** 📑 當前作用中的圖層分頁 */\n\n  // ==================== 📊 示意圖繪製相關狀態 (Schematic Drawing State) ====================\n\n  /** 📊 網格數據狀態 (Grid Data State) */\n  const gridData = ref(null);\n  const gridDimensions = ref({ x: 10, y: 10 });\n\n  /** 📊 行政區數據狀態 (Administrative District Data State) */\n  const nodeData = ref(null);\n  const linkData = ref(null);\n\n  // ==================== 🎨 視覺化常數 (Visualization Constants) ====================\n\n  /** 🎨 顏色配置 (Color Configuration) */\n  const COLOR_CONFIG = {\n    BACKGROUND: '#212121',\n    GRID_LINE: '#666666',\n    GRID_LINE_SECONDARY: '#333333',\n    NODE_FILL: '#4CAF50',\n    NODE_STROKE: '#2E7D32',\n    TEXT_FILL: '#FFFFFF',\n  };\n\n  /** 🎨 顏色映射 (Color Mapping) */\n  const colorMap = {\n    red: '#ff0000',\n    lightpink: '#ffb3ba',\n    blue: '#0066cc',\n    green: '#00aa44',\n    lightgreen: '#90ee90',\n    orange: '#ff8800',\n    brown: '#8b4513',\n    yellow: '#ffcc00',\n    purple: '#800080',\n    paleturquoise: '#afeeee',\n    limegreen: '#32cd32',\n  };\n\n  // ResizeObserver 實例\n  let resizeObserver = null;\n\n  // 獲取所有開啟且有資料的圖層\n  const visibleLayers = computed(() => {\n    const allLayers = dataStore.getAllLayers();\n    return allLayers.filter((layer) => layer.visible);\n  });\n\n  /**\n   * 📑 設定作用中圖層分頁 (Set Active Layer Tab)\n   * @param {string} layerId - 圖層 ID\n   */\n  const setActiveLayerTab = (layerId) => {\n    console.log('🔄 圖層切換按鈕點擊:', activeLayerTab.value, '->', layerId);\n\n    // 如果切換到相同圖層，不需要重新處理\n    if (activeLayerTab.value === layerId) {\n      console.log('🔄 相同圖層，跳過切換');\n      return;\n    }\n\n    // 立即清除 SVG 內容，避免重疊\n    d3.select('#schematic-container').selectAll('svg').remove();\n    console.log('🗑️ 已清除 SVG 內容');\n\n    // 清除數據狀態\n    gridData.value = null;\n    nodeData.value = null;\n    linkData.value = null;\n    console.log('🗑️ 已清除數據狀態');\n\n    // 設置新的活動圖層\n    activeLayerTab.value = layerId;\n    console.log('✅ 已設置新圖層:', layerId);\n  };\n\n  /**\n   * 📊 當前圖層摘要 (Current Layer Summary)\n   */\n  const currentLayerSummary = computed(() => {\n    console.log('currentLayerSummary computed - activeLayerTab:', activeLayerTab.value);\n    console.log('currentLayerSummary computed - visibleLayers:', visibleLayers.value);\n\n    if (!activeLayerTab.value) {\n      console.log('currentLayerSummary - no activeLayerTab, returning null');\n      return null;\n    }\n\n    const layer = visibleLayers.value.find((l) => l.layerId === activeLayerTab.value);\n    console.log('currentLayerSummary - found layer:', layer);\n\n    const result = layer ? layer.dashboardData || null : null;\n    console.log('currentLayerSummary - returning:', result);\n    return result;\n  });\n\n  /**\n   * 📊 取得圖層完整標題 (包含群組名稱) (Get Layer Full Title with Group Name)\n   */\n  const getLayerFullTitle = (layer) => {\n    if (!layer) return { groupName: null, layerName: '未知圖層' };\n    const groupName = dataStore.findGroupNameByLayerId(layer.layerId);\n    return {\n      groupName: groupName,\n      layerName: layer.layerName,\n    };\n  };\n\n  /**\n   * 🎨 判斷是否為網格示意圖圖層 (Check if Layer is Grid Schematic)\n   * @param {string} layerId - 圖層 ID\n   * @returns {boolean} 是否為網格示意圖圖層\n   */\n  const isGridSchematicLayer = (layerId) => {\n    if (!layerId) return false;\n    const layer = dataStore.findLayerById(layerId);\n    return layer && layer.isGridSchematic === true;\n  };\n\n  // ==================== 📊 數據載入和處理函數 (Data Loading and Processing Functions) ====================\n\n  /**\n   * 🎲 為節點隨機分配 1-5 的數值 (Randomize Node Values)\n   * @param {Array} nodes - 節點陣列\n   * @returns {Array} - 處理後的節點陣列\n   */\n  const randomizeNodeValues = (nodes) => {\n    console.log('🎲 開始隨機化節點數值，原始節點數量:', nodes.length);\n    const randomizedNodes = nodes.map((node) => {\n      const newValue = Math.floor(Math.random() * 5) + 1; // 生成 1-5 的隨機數\n      console.log(`🎲 節點 ${node.coord?.x},${node.coord?.y} 從 ${node.value} 變為 ${newValue}`);\n      return {\n        ...node,\n        value: newValue,\n      };\n    });\n    console.log('🎲 隨機化完成，前3個節點:', randomizedNodes.slice(0, 3));\n    return randomizedNodes;\n  };\n\n  /**\n   * 📊 載入圖層數據 (Load Layer Data)\n   * @param {string} layerId - 圖層 ID\n   */\n  const loadLayerData = async (layerId) => {\n    try {\n      // 找到指定的圖層\n      const targetLayer = dataStore.findLayerById(layerId);\n      if (!targetLayer) {\n        throw new Error(`找不到圖層配置: ${layerId}`);\n      }\n\n      console.log('🔄 使用圖層配置載入數據:', targetLayer.jsonFileName);\n\n      // 使用圖層的 jsonLoader 載入數據\n      const result = await targetLayer.jsonLoader(targetLayer);\n\n      // 檢查數據類型並載入相應數據\n      if (result.processedJsonData) {\n        if (result.processedJsonData.type === 'grid') {\n          // 網格數據\n          gridData.value = result.processedJsonData;\n          gridDimensions.value = {\n            x: result.processedJsonData.gridX,\n            y: result.processedJsonData.gridY,\n          };\n          console.log('✅ 網格數據載入成功:', gridData.value);\n        } else {\n          // 行政區示意圖數據\n          nodeData.value = result.processedJsonData;\n          console.log('✅ 行政區數據載入成功:', nodeData.value);\n          setLinkData();\n        }\n      } else if (result.dataTableData && result.dataTableData.length > 0) {\n        // 表格數據格式，轉換為示意圖格式\n        const schematicData = result.dataTableData.map((item) => ({\n          color: item.color,\n          name: item.name,\n          nodes: item.nodes || [],\n        }));\n\n        // 為每個路線的節點隨機分配 1-5 的數值\n        const processedData = schematicData.map((line) => ({\n          ...line,\n          nodes: randomizeNodeValues(line.nodes),\n        }));\n\n        nodeData.value = processedData;\n        console.log('✅ 表格數據轉換成功:', nodeData.value);\n        setLinkData();\n      } else {\n        throw new Error('無法從圖層數據中提取示意圖數據');\n      }\n    } catch (error) {\n      console.error('❌ 無法載入圖層數據:', error.message);\n    }\n  };\n\n  /**\n   * 📊 設定連接數據 (Set Link Data)\n   */\n  const setLinkData = () => {\n    if (!nodeData.value) return;\n\n    linkData.value = [];\n\n    nodeData.value.forEach((path) => {\n      let thisX, thisY;\n      let nodes = [];\n\n      path.nodes.slice(0, path.nodes.length - 1).forEach((node) => {\n        thisX = node.coord.x;\n        thisY = node.coord.y;\n\n        switch (node.type) {\n          case 1:\n          case 6:\n          case 21:\n          case 41:\n            thisX = node.coord.x + 0.5;\n            thisY = node.coord.y;\n            break;\n          case 2:\n          case 8:\n          case 12:\n          case 32:\n            thisX = node.coord.x;\n            thisY = node.coord.y - 0.5;\n            break;\n          case 3:\n          case 5:\n          case 23:\n          case 43:\n            thisX = node.coord.x - 0.5;\n            thisY = node.coord.y;\n            break;\n          case 4:\n          case 7:\n          case 14:\n          case 34:\n            thisX = node.coord.x;\n            thisY = node.coord.y + 0.5;\n            break;\n        }\n\n        nodes.push({\n          value: node.value,\n          type: node.type,\n          coord: { x: thisX, y: thisY },\n        });\n      });\n\n      let data = {\n        color: colorMap[path.color] || path.color,\n        name: path.name,\n        nodes: nodes,\n      };\n\n      linkData.value.push(data);\n    });\n\n    console.log('linkData', linkData.value);\n  };\n\n  // ==================== 📏 容器尺寸和繪製函數 (Container Dimensions and Drawing Functions) ====================\n\n  /**\n   * 📏 獲取容器尺寸 (Get Container Dimensions)\n   * @returns {Object} 包含 width 和 height 的尺寸物件\n   */\n  const getDimensions = () => {\n    const container = document.getElementById('schematic-container');\n    if (container) {\n      // 獲取容器的實際可用尺寸\n      const rect = container.getBoundingClientRect();\n      const width = container.clientWidth || rect.width;\n      const height = container.clientHeight || rect.height;\n\n      console.log('📏 容器尺寸:', {\n        width,\n        height,\n        clientWidth: container.clientWidth,\n        clientHeight: container.clientHeight,\n        rectWidth: rect.width,\n        rectHeight: rect.height,\n      });\n\n      const dimensions = {\n        width: Math.max(width, 400),\n        height: Math.max(height, 300),\n      };\n\n      // 更新 dataStore 中的尺寸狀態\n      dataStore.updateD3jsDimensions(dimensions.width, dimensions.height);\n\n      return dimensions;\n    }\n    // 如果找不到容器，使用預設尺寸\n    const defaultDimensions = {\n      width: 800,\n      height: 600,\n    };\n\n    // 更新 dataStore 中的尺寸狀態\n    dataStore.updateD3jsDimensions(defaultDimensions.width, defaultDimensions.height);\n\n    return defaultDimensions;\n  };\n\n  /**\n   * 🎨 繪製網格示意圖 (Draw Grid Schematic)\n   */\n  const drawGridSchematic = () => {\n    if (!gridData.value) return;\n\n    // 獲取容器尺寸\n    const dimensions = getDimensions();\n\n    // 添加適當的邊距\n    const margin = { top: 20, right: 20, bottom: 20, left: 20 };\n    const width = dimensions.width - margin.left - margin.right;\n    const height = dimensions.height - margin.top - margin.bottom;\n\n    // 檢查是否已存在 SVG，如果存在且尺寸相同則不需要重繪\n    const existingSvg = d3.select('#schematic-container').select('svg');\n    if (existingSvg.size() > 0) {\n      const existingWidth = parseFloat(existingSvg.attr('width'));\n      const existingHeight = parseFloat(existingSvg.attr('height'));\n\n      // 如果尺寸變化很小（小於 2px），則只更新尺寸而不重繪\n      // 降低閾值以確保寬度變化時能正確重繪\n      if (\n        Math.abs(existingWidth - (width + margin.left + margin.right)) < 2 &&\n        Math.abs(existingHeight - (height + margin.top + margin.bottom)) < 2\n      ) {\n        console.log('📏 示意圖尺寸變化太小，跳過重繪');\n        return;\n      }\n    }\n\n    // 清除之前的圖表\n    d3.select('#schematic-container').selectAll('svg').remove();\n\n    // 創建 SVG 元素\n    const svg = d3\n      .select('#schematic-container')\n      .append('svg')\n      .attr('width', width + margin.left + margin.right)\n      .attr('height', height + margin.top + margin.bottom)\n      .style('background-color', COLOR_CONFIG.BACKGROUND)\n      .style('transition', 'all 0.2s ease-in-out');\n\n    // 計算網格單元格尺寸\n    const cellWidth = width / gridDimensions.value.x;\n    const cellHeight = height / gridDimensions.value.y;\n\n    console.log('📊 網格單元格尺寸:', { cellWidth, cellHeight });\n\n    // 繪製網格線\n    drawGridLines(svg, width, height, cellWidth, cellHeight, margin);\n\n    // 繪製網格節點\n    drawGridNodes(svg, cellWidth, cellHeight, margin);\n  };\n\n  /**\n   * 📏 繪製網格線 (Draw Grid Lines)\n   * @param {Object} svg - D3 SVG 選擇器\n   * @param {number} width - 繪圖區域寬度\n   * @param {number} height - 繪圖區域高度\n   * @param {number} cellWidth - 單元格寬度\n   * @param {number} cellHeight - 單元格高度\n   * @param {Object} margin - 邊距配置\n   */\n  const drawGridLines = (svg, width, height, cellWidth, cellHeight, margin) => {\n    // 繪製垂直網格線\n    for (let i = 0; i <= gridDimensions.value.x; i++) {\n      svg\n        .append('line')\n        .style('stroke', COLOR_CONFIG.GRID_LINE)\n        .style('stroke-width', 1)\n        .attr('x1', margin.left + i * cellWidth)\n        .attr('y1', margin.top)\n        .attr('x2', margin.left + i * cellWidth)\n        .attr('y2', margin.top + height);\n    }\n\n    // 繪製水平網格線\n    for (let i = 0; i <= gridDimensions.value.y; i++) {\n      svg\n        .append('line')\n        .style('stroke', COLOR_CONFIG.GRID_LINE)\n        .style('stroke-width', 1)\n        .attr('x1', margin.left)\n        .attr('y1', margin.top + i * cellHeight)\n        .attr('x2', margin.left + width)\n        .attr('y2', margin.top + i * cellHeight);\n    }\n\n    // 繪製次要網格線（網格中心線）\n    for (let i = 0; i < gridDimensions.value.x; i++) {\n      svg\n        .append('line')\n        .style('stroke', COLOR_CONFIG.GRID_LINE_SECONDARY)\n        .style('stroke-width', 0.5)\n        .attr('x1', margin.left + (i + 0.5) * cellWidth)\n        .attr('y1', margin.top)\n        .attr('x2', margin.left + (i + 0.5) * cellWidth)\n        .attr('y2', margin.top + height);\n    }\n\n    for (let i = 0; i < gridDimensions.value.y; i++) {\n      svg\n        .append('line')\n        .style('stroke', COLOR_CONFIG.GRID_LINE_SECONDARY)\n        .style('stroke-width', 0.5)\n        .attr('x1', margin.left)\n        .attr('y1', margin.top + (i + 0.5) * cellHeight)\n        .attr('x2', margin.left + width)\n        .attr('y2', margin.top + (i + 0.5) * cellHeight);\n    }\n  };\n\n  /**\n   * 🔢 繪製網格節點 (Draw Grid Nodes)\n   * @param {Object} svg - D3 SVG 選擇器\n   * @param {number} cellWidth - 單元格寬度\n   * @param {number} cellHeight - 單元格高度\n   * @param {Object} margin - 邊距配置\n   */\n  const drawGridNodes = (svg, cellWidth, cellHeight, margin) => {\n    if (!gridData.value || !gridData.value.nodes) return;\n\n    // 創建節點群組\n    const nodeGroup = svg.append('g').attr('class', 'grid-nodes');\n\n    // 繪製每個節點\n    gridData.value.nodes.forEach((node) => {\n      const x = margin.left + (node.x + 0.5) * cellWidth;\n      const y = margin.top + (node.y + 0.5) * cellHeight;\n\n      // 繪製節點圓圈\n      nodeGroup\n        .append('circle')\n        .attr('cx', x)\n        .attr('cy', y)\n        .attr('r', Math.min(cellWidth, cellHeight) * 0.3)\n        .style('fill', COLOR_CONFIG.NODE_FILL)\n        .style('stroke', COLOR_CONFIG.NODE_STROKE)\n        .style('stroke-width', 2)\n        .style('opacity', 0.8)\n        .on('mouseover', function () {\n          d3.select(this).style('opacity', 1).style('stroke-width', 3);\n        })\n        .on('mouseout', function () {\n          d3.select(this).style('opacity', 0.8).style('stroke-width', 2);\n        });\n\n      // 繪製節點數值文字\n      nodeGroup\n        .append('text')\n        .attr('x', x)\n        .attr('y', y)\n        .attr('text-anchor', 'middle')\n        .attr('dominant-baseline', 'middle')\n        .attr('font-size', Math.min(cellWidth, cellHeight) * 0.2)\n        .attr('font-weight', 'bold')\n        .attr('fill', COLOR_CONFIG.TEXT_FILL)\n        .text(node.value);\n    });\n  };\n\n  /**\n   * 🎨 繪製行政區示意圖 (Draw Administrative District Schematic)\n   */\n  const drawAdministrativeSchematic = () => {\n    if (!nodeData.value) return;\n\n    // 畫布長寬px\n    let dimensions = getDimensions();\n\n    // 添加適當的邊距，確保內容不被截斷\n    const margin = { top: 20, right: 20, bottom: 20, left: 20 };\n    const width = dimensions.width - margin.left - margin.right;\n    const height = dimensions.height - margin.top - margin.bottom;\n\n    // 獲取所有節點座標\n    const allPoints = nodeData.value.flatMap((d) =>\n      d.nodes.map((node) => ({\n        x: node.coord.x,\n        y: node.coord.y,\n      }))\n    );\n\n    console.log('allPoints', allPoints);\n\n    // 找到點的最大最小值\n    let xMax = d3.max(allPoints, (d) => d.x);\n    let yMax = d3.max(allPoints, (d) => d.y);\n\n    console.log('Maximum x: ', xMax);\n    console.log('Maximum y: ', yMax);\n\n    // 檢查是否已存在 SVG，如果存在且尺寸相同則不需要重繪\n    const existingSvg = d3.select('#schematic-container').select('svg');\n    if (existingSvg.size() > 0) {\n      const existingWidth = parseFloat(existingSvg.attr('width'));\n      const existingHeight = parseFloat(existingSvg.attr('height'));\n\n      // 如果尺寸變化很小（小於 2px），則只更新尺寸而不重繪\n      // 降低閾值以確保寬度變化時能正確重繪\n      if (\n        Math.abs(existingWidth - (width + margin.left + margin.right)) < 2 &&\n        Math.abs(existingHeight - (height + margin.top + margin.bottom)) < 2\n      ) {\n        console.log('📏 示意圖尺寸變化太小，跳過重繪');\n        return;\n      }\n    }\n\n    // 清除之前的圖表\n    d3.select('#schematic-container').selectAll('svg').remove();\n\n    // 創建 SVG 元素\n    const svg = d3\n      .select('#schematic-container')\n      .append('svg')\n      .attr('width', width + margin.left + margin.right)\n      .attr('height', height + margin.top + margin.bottom)\n      .style('background-color', COLOR_CONFIG.BACKGROUND)\n      .style('transition', 'all 0.2s ease-in-out'); // 添加平滑過渡效果\n\n    // 直接使用容器的完整尺寸，允許形狀變形以完全填滿容器\n    const actualWidth = width;\n    const actualHeight = height;\n\n    // 繪製參數已準備就緒\n\n    // 設定比例尺，使用實際繪圖區域\n    const x = d3\n      .scaleLinear()\n      .domain([0, xMax])\n      .range([margin.left, margin.left + actualWidth]);\n    const y = d3\n      .scaleLinear()\n      .domain([yMax, 0])\n      .range([margin.top, margin.top + actualHeight]);\n\n    // 繪製主要網格線\n    for (let i = 0; i <= xMax; i++) {\n      svg\n        .append('line')\n        .style('stroke', COLOR_CONFIG.GRID_LINE)\n        .attr('x1', x(i))\n        .attr('y1', margin.top)\n        .attr('x2', x(i))\n        .attr('y2', margin.top + actualHeight);\n    }\n\n    for (let i = 0; i <= yMax; i++) {\n      svg\n        .append('line')\n        .style('stroke', COLOR_CONFIG.GRID_LINE)\n        .attr('x1', margin.left)\n        .attr('y1', y(i))\n        .attr('x2', margin.left + actualWidth)\n        .attr('y2', y(i));\n    }\n\n    // 繪製次要網格線\n    for (let i = 0; i < xMax; i++) {\n      svg\n        .append('line')\n        .style('stroke', COLOR_CONFIG.GRID_LINE_SECONDARY)\n        .attr('x1', (x(i) + x(i + 1)) / 2)\n        .attr('y1', margin.top)\n        .attr('x2', (x(i) + x(i + 1)) / 2)\n        .attr('y2', margin.top + actualHeight);\n    }\n\n    for (let i = 0; i < yMax; i++) {\n      svg\n        .append('line')\n        .style('stroke', COLOR_CONFIG.GRID_LINE_SECONDARY)\n        .attr('x1', margin.left)\n        .attr('y1', (y(i) + y(i + 1)) / 2)\n        .attr('x2', margin.left + actualWidth)\n        .attr('y2', (y(i) + y(i + 1)) / 2);\n    }\n\n    // 創建線條生成器\n    const lineGenerator = d3\n      .line()\n      .x((d) => x(d.x))\n      .y((d) => y(d.y))\n      .curve(d3.curveNatural);\n\n    // 繪製每個路徑的節點連接\n    nodeData.value.forEach((path) => {\n      path.nodes.forEach((node) => {\n        let dString = '';\n        let nodes = [];\n\n        console.log('node.coord.type', node.type);\n\n        switch (node.type) {\n          case 1:\n            nodes = [\n              { x: node.coord.x - 0.5, y: node.coord.y },\n              { x: node.coord.x + 0.5, y: node.coord.y },\n            ];\n            dString = lineGenerator(nodes);\n            break;\n          case 2:\n            nodes = [\n              { x: node.coord.x, y: node.coord.y - 0.5 },\n              { x: node.coord.x, y: node.coord.y + 0.5 },\n            ];\n            dString = lineGenerator(nodes);\n            break;\n          case 3:\n            nodes = [\n              { x: node.coord.x + 0.5, y: node.coord.y },\n              { x: node.coord.x - 0.5, y: node.coord.y },\n            ];\n            dString = lineGenerator(nodes);\n            break;\n          case 4:\n            nodes = [\n              { x: node.coord.x, y: node.coord.y + 0.5 },\n              { x: node.coord.x, y: node.coord.y - 0.5 },\n            ];\n            dString = lineGenerator(nodes);\n            break;\n          case 5:\n            nodes = [\n              { x: node.coord.x, y: node.coord.y },\n              { x: node.coord.x - 0.5, y: node.coord.y },\n            ];\n            dString = lineGenerator(nodes);\n            break;\n          case 6:\n            nodes = [\n              { x: node.coord.x + 0.5, y: node.coord.y },\n              { x: node.coord.x, y: node.coord.y },\n            ];\n            dString = lineGenerator(nodes);\n            break;\n          case 7:\n            nodes = [\n              { x: node.coord.x, y: node.coord.y + 0.5 },\n              { x: node.coord.x, y: node.coord.y },\n            ];\n            dString = lineGenerator(nodes);\n            break;\n          case 8:\n            nodes = [\n              { x: node.coord.x, y: node.coord.y },\n              { x: node.coord.x, y: node.coord.y - 0.5 },\n            ];\n            dString = lineGenerator(nodes);\n            break;\n          case 12:\n          case 43: {\n            let xWidth = Math.abs(x(node.coord.x - 0.5) - x(node.coord.x));\n            let yHeight = Math.abs(y(node.coord.y) - y(node.coord.y - 0.5));\n\n            let arcWidth = 0;\n\n            if (xWidth < yHeight) {\n              arcWidth = xWidth;\n\n              nodes = [\n                { x: node.coord.x, y: y.invert(y(node.coord.y) + arcWidth) },\n                { x: node.coord.x, y: node.coord.y - 0.5 },\n              ];\n            } else {\n              arcWidth = yHeight;\n\n              nodes = [\n                { x: node.coord.x - 0.5, y: node.coord.y },\n                { x: x.invert(x(node.coord.x) - arcWidth), y: node.coord.y },\n              ];\n            }\n\n            console.log('xWidth yHeight arcWidth', xWidth, yHeight, arcWidth);\n\n            console.log('nodes', nodes);\n\n            dString = lineGenerator(nodes);\n\n            console.log('dString', dString);\n\n            const arc = d3\n              .arc()\n              .innerRadius(arcWidth - 3)\n              .outerRadius(arcWidth + 3)\n              .startAngle(0)\n              .endAngle(Math.PI / 2);\n\n            svg\n              .append('path')\n              .attr('d', arc)\n              .attr(\n                'transform',\n                `translate(${x(node.coord.x) - arcWidth}, ${y(node.coord.y) + arcWidth})`\n              )\n              .attr('fill', path.color);\n            break;\n          }\n          case 21:\n          case 34: {\n            let xWidth = Math.abs(x(node.coord.x - 0.5) - x(node.coord.x));\n            let yHeight = Math.abs(y(node.coord.y) - y(node.coord.y - 0.5));\n\n            let arcWidth = 0;\n\n            if (xWidth < yHeight) {\n              arcWidth = xWidth;\n\n              nodes = [\n                { x: node.coord.x, y: y.invert(y(node.coord.y) - arcWidth) },\n                { x: node.coord.x, y: node.coord.y + 0.5 },\n              ];\n            } else {\n              arcWidth = yHeight;\n\n              nodes = [\n                { x: node.coord.x + 0.5, y: node.coord.y },\n                { x: x.invert(x(node.coord.x) + arcWidth), y: node.coord.y },\n              ];\n            }\n\n            console.log('xWidth yHeight arcWidth', xWidth, yHeight, arcWidth);\n\n            console.log('nodes', nodes);\n\n            dString = lineGenerator(nodes);\n\n            console.log('dString', dString);\n\n            const arc = d3\n              .arc()\n              .innerRadius(arcWidth - 3)\n              .outerRadius(arcWidth + 3)\n              .startAngle(-Math.PI / 2)\n              .endAngle(-Math.PI);\n\n            svg\n              .append('path')\n              .attr('d', arc)\n              .attr(\n                'transform',\n                `translate(${x(node.coord.x) + arcWidth}, ${y(node.coord.y) - arcWidth})`\n              )\n              .attr('fill', path.color);\n            break;\n          }\n          case 14:\n          case 23: {\n            let xWidth = Math.abs(x(node.coord.x - 0.5) - x(node.coord.x));\n            let yHeight = Math.abs(y(node.coord.y) - y(node.coord.y - 0.5));\n\n            let arcWidth = 0;\n\n            if (xWidth < yHeight) {\n              arcWidth = xWidth;\n\n              nodes = [\n                { x: node.coord.x, y: y.invert(y(node.coord.y) - arcWidth) },\n                { x: node.coord.x, y: node.coord.y + 0.5 },\n              ];\n            } else {\n              arcWidth = yHeight;\n\n              nodes = [\n                { x: node.coord.x - 0.5, y: node.coord.y },\n                { x: x.invert(x(node.coord.x) - arcWidth), y: node.coord.y },\n              ];\n            }\n\n            console.log('xWidth yHeight arcWidth', xWidth, yHeight, arcWidth);\n\n            console.log('nodes', nodes);\n\n            dString = lineGenerator(nodes);\n\n            console.log('dString', dString);\n\n            const arc = d3\n              .arc()\n              .innerRadius(arcWidth - 3)\n              .outerRadius(arcWidth + 3)\n              .startAngle(Math.PI / 2)\n              .endAngle(Math.PI);\n\n            svg\n              .append('path')\n              .attr('d', arc)\n              .attr(\n                'transform',\n                `translate(${x(node.coord.x) - arcWidth}, ${y(node.coord.y) - arcWidth})`\n              )\n              .attr('fill', path.color);\n            break;\n          }\n          case 32:\n          case 41: {\n            let xWidth = Math.abs(x(node.coord.x - 0.5) - x(node.coord.x));\n            let yHeight = Math.abs(y(node.coord.y) - y(node.coord.y - 0.5));\n\n            let arcWidth = 0;\n\n            if (xWidth < yHeight) {\n              arcWidth = xWidth;\n\n              nodes = [\n                { x: node.coord.x, y: y.invert(y(node.coord.y) + arcWidth) },\n                { x: node.coord.x, y: node.coord.y - 0.5 },\n              ];\n            } else {\n              arcWidth = yHeight;\n\n              nodes = [\n                { x: node.coord.x + 0.5, y: node.coord.y },\n                { x: x.invert(x(node.coord.x) + arcWidth), y: node.coord.y },\n              ];\n            }\n\n            console.log('xWidth yHeight arcWidth', xWidth, yHeight, arcWidth);\n\n            console.log('nodes', nodes);\n\n            dString = lineGenerator(nodes);\n\n            console.log('dString', dString);\n\n            const arc = d3\n              .arc()\n              .innerRadius(arcWidth - 3)\n              .outerRadius(arcWidth + 3)\n              .startAngle(0)\n              .endAngle(-Math.PI / 2);\n\n            svg\n              .append('path')\n              .attr('d', arc)\n              .attr(\n                'transform',\n                `translate(${x(node.coord.x) + arcWidth}, ${y(node.coord.y) + arcWidth})`\n              )\n              .attr('fill', path.color);\n            break;\n          }\n          default:\n            break;\n        }\n\n        if (dString !== '') {\n          svg\n            .append('path')\n            .attr('d', dString)\n            .attr('stroke', path.color)\n            .attr('fill', 'none')\n            .attr('stroke-width', 6);\n        }\n      });\n    });\n\n    // 繪製節點數值標籤\n    if (linkData.value) {\n      const allLinks = linkData.value.flatMap((line) =>\n        line.nodes.map((node) => ({\n          ...node,\n        }))\n      );\n\n      console.log('allLinks', allLinks);\n\n      allLinks.forEach((node) => {\n        svg\n          .append('text')\n          .attr('x', x(node.coord.x))\n          .attr('y', y(node.coord.y))\n          .attr('text-anchor', 'middle')\n          .attr('dominant-baseline', 'middle')\n          .attr('font-size', '10px')\n          .attr('fill', 'white')\n          .text(`${node.value}`);\n      });\n    }\n  };\n\n  /**\n   * 🎨 統一繪製函數 (Unified Drawing Function)\n   * 根據圖層類型選擇相應的繪製方法\n   */\n  const drawSchematic = () => {\n    if (isGridSchematicLayer(activeLayerTab.value)) {\n      drawGridSchematic();\n    } else {\n      drawAdministrativeSchematic();\n    }\n  };\n\n  /**\n   * 📏 調整尺寸 (Resize)\n   * 響應容器尺寸變化，重新繪製示意圖\n   */\n  const resize = () => {\n    console.log('📏 D3jsTab: 觸發 resize，重新繪製示意圖');\n    // 先更新尺寸狀態，再重新繪製\n    getDimensions();\n    drawSchematic();\n  };\n\n  // 記錄上一次的圖層列表用於比較\n  const previousLayers = ref([]);\n\n  /**\n   * 👀 監聽可見圖層變化，自動切換到新開啟的圖層分頁\n   */\n  watch(\n    () => visibleLayers.value,\n    (newLayers) => {\n      // 如果沒有可見圖層，清除選中的分頁\n      if (newLayers.length === 0) {\n        activeLayerTab.value = null;\n        previousLayers.value = [];\n        return;\n      }\n\n      // 找出新增的圖層（比較新舊圖層列表）\n      const previousLayerIds = previousLayers.value.map((layer) => layer.layerId);\n      const newLayerIds = newLayers.map((layer) => layer.layerId);\n      const addedLayerIds = newLayerIds.filter((id) => !previousLayerIds.includes(id));\n\n      // 如果有新增的圖層，自動切換到最新新增的圖層\n      if (addedLayerIds.length > 0) {\n        const newestAddedLayerId = addedLayerIds[addedLayerIds.length - 1];\n        activeLayerTab.value = newestAddedLayerId;\n      }\n      // 如果當前沒有選中分頁，或選中的分頁不在可見列表中，選中第一個\n      else if (\n        !activeLayerTab.value ||\n        !newLayers.find((layer) => layer.layerId === activeLayerTab.value)\n      ) {\n        activeLayerTab.value = newLayers[0].layerId;\n      }\n\n      // 更新記錄的圖層列表\n      previousLayers.value = [...newLayers];\n    },\n    { deep: true, immediate: true }\n  );\n\n  /**\n   * 👀 監聽活動圖層變化，載入數據並繪製示意圖\n   */\n  watch(\n    () => activeLayerTab.value,\n    async (newLayerId, oldLayerId) => {\n      if (newLayerId && newLayerId !== oldLayerId) {\n        console.log('🔄 監聽器觸發圖層切換:', oldLayerId, '->', newLayerId);\n\n        // 確保 SVG 內容已清除（雙重保險）\n        d3.select('#schematic-container').selectAll('svg').remove();\n        console.log('🗑️ 監聽器：已清除 SVG 內容');\n\n        // 清除舊數據（雙重保險）\n        gridData.value = null;\n        nodeData.value = null;\n        linkData.value = null;\n        console.log('🗑️ 監聽器：已清除數據狀態');\n\n        // 載入新圖層數據\n        console.log('📊 開始載入新圖層數據:', newLayerId);\n        await loadLayerData(newLayerId);\n\n        // 等待 DOM 更新後繪製\n        await nextTick();\n        console.log('🎨 開始繪製新圖層示意圖');\n        drawSchematic();\n        console.log('✅ 圖層切換完成');\n      }\n    }\n  );\n\n  /**\n   * 👀 監聽容器高度變化，觸發示意圖重繪\n   */\n  watch(\n    () => props.containerHeight,\n    () => {\n      // 觸發示意圖重繪以適應新高度\n      nextTick(() => {\n        resize();\n      });\n    }\n  );\n\n  /**\n   * 🚀 組件掛載事件 (Component Mounted Event)\n   */\n  onMounted(async () => {\n    console.log('D3jsTab mounted - visibleLayers:', visibleLayers.value);\n    console.log('D3jsTab mounted - activeLayerTab:', activeLayerTab.value);\n\n    // 初始化第一個可見圖層為作用中分頁\n    if (visibleLayers.value.length > 0 && !activeLayerTab.value) {\n      activeLayerTab.value = visibleLayers.value[0].layerId;\n      console.log('D3jsTab - Set initial activeLayerTab to:', activeLayerTab.value);\n\n      // 載入初始數據\n      await loadLayerData(activeLayerTab.value);\n      await nextTick();\n      drawSchematic();\n    }\n\n    // 監聽窗口大小變化\n    window.addEventListener('resize', resize);\n\n    // 監聽容器尺寸變化\n    const container = document.getElementById('schematic-container');\n    if (container && window.ResizeObserver) {\n      resizeObserver = new ResizeObserver((entries) => {\n        for (let entry of entries) {\n          const { width, height } = entry.contentRect;\n          if (width > 0 && height > 0) {\n            resize();\n          }\n        }\n      });\n      resizeObserver.observe(container);\n\n      // 同時監聽父容器\n      const parentContainer = container.parentElement;\n      if (parentContainer) {\n        resizeObserver.observe(parentContainer);\n      }\n    }\n  });\n\n  /**\n   * 🚀 組件卸載事件 (Component Unmounted Event)\n   */\n  onUnmounted(() => {\n    window.removeEventListener('resize', resize);\n\n    // 清理 ResizeObserver\n    if (resizeObserver) {\n      resizeObserver.disconnect();\n      resizeObserver = null;\n    }\n  });\n\n  // 暴露方法給父組件使用\n  defineExpose({\n    resize, // 調整尺寸方法\n  });\n</script>\n\n<template>\n  <!-- 📊 多圖層 D3.js 數據視覺化儀表板視圖組件 -->\n  <div class=\"d-flex flex-column my-bgcolor-gray-200 h-100\">\n    <!-- 📑 圖層分頁導航 -->\n    <div v-if=\"visibleLayers.length > 0\" class=\"\">\n      <ul class=\"nav nav-tabs nav-fill\">\n        <li\n          v-for=\"layer in visibleLayers\"\n          :key=\"layer.layerId\"\n          class=\"nav-item d-flex flex-column align-items-center\"\n        >\n          <!-- tab按鈕 -->\n          <div\n            class=\"btn nav-link rounded-0 border-0 position-relative d-flex align-items-center justify-content-center my-bgcolor-gray-200\"\n            :class=\"{\n              active: activeLayerTab === layer.layerId,\n            }\"\n            @click=\"setActiveLayerTab(layer.layerId)\"\n          >\n            <span>\n              <span v-if=\"getLayerFullTitle(layer).groupName\" class=\"my-title-xs-gray\"\n                >{{ getLayerFullTitle(layer).groupName }} -\n              </span>\n              <span class=\"my-title-sm-black\">{{ getLayerFullTitle(layer).layerName }}</span>\n            </span>\n          </div>\n          <div class=\"w-100\" :class=\"`my-bgcolor-${layer.colorName}`\" style=\"min-height: 4px\"></div>\n        </li>\n      </ul>\n    </div>\n\n    <!-- 有開啟圖層時的內容 -->\n    <div v-if=\"visibleLayers.length > 0\" class=\"flex-grow-1 d-flex flex-column my-bgcolor-white\">\n      <!-- 📊 圖層摘要資料 -->\n      <div v-if=\"currentLayerSummary\" class=\"flex-grow-1 d-flex flex-column\">\n        <!-- D3.js 示意圖 - 根據容器高度動態調整 -->\n        <div class=\"flex-grow-1 d-flex flex-column\">\n          <div\n            class=\"flex-grow-1\"\n            :style=\"{\n              height: Math.max(props.containerHeight - 100, 300) + 'px',\n              minHeight: '300px',\n            }\"\n          >\n            <!-- 🎨 統一示意圖容器 (Unified Schematic Container) -->\n            <div\n              id=\"schematic-container\"\n              class=\"w-100 h-100\"\n              style=\"min-height: 300px; overflow: hidden\"\n            ></div>\n          </div>\n        </div>\n      </div>\n      <div v-else class=\"flex-grow-1 d-flex align-items-center justify-content-center\">\n        <div class=\"text-center\">\n          <div class=\"my-title-md-gray\">此圖層沒有可用的摘要資訊</div>\n        </div>\n      </div>\n    </div>\n\n    <!-- 沒有開啟圖層時的空狀態 -->\n    <div v-else class=\"flex-grow-1 d-flex align-items-center justify-content-center\">\n      <div class=\"text-center\">\n        <div class=\"my-title-md-gray p-3\">沒有開啟的圖層</div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<style scoped>\n  /**\n   * 🎨 D3jsTab 組件樣式 (D3jsTab Component Styles)\n   *\n   * 定義組件內部元素的樣式規則，使用 scoped 避免樣式污染\n   * 主要樣式規則已在 common.css 中定義，此處僅包含組件特定調整\n   */\n\n  /* 📊 示意圖容器樣式 (Schematic Container Styles) */\n  #schematic-container {\n    position: relative;\n    overflow: hidden;\n  }\n\n  /* 🎨 網格節點懸停效果 (Grid Node Hover Effects) */\n  :deep(.grid-nodes circle) {\n    transition: all 0.2s ease-in-out;\n    cursor: pointer;\n  }\n\n  :deep(.grid-nodes circle:hover) {\n    filter: brightness(1.2);\n  }\n\n  /* 📝 網格文字樣式 (Grid Text Styles) */\n  :deep(.grid-nodes text) {\n    pointer-events: none;\n    user-select: none;\n  }\n\n  /* 🎯 D3.js 圖表互動樣式 (D3.js Chart Interaction Styles) */\n  :deep(.bar:hover) {\n    cursor: pointer;\n  }\n\n  :deep(.scatter:hover) {\n    cursor: pointer;\n  }\n\n  :deep(.dot:hover) {\n    cursor: pointer;\n  }\n</style>\n","import script from \"./D3jsTab.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./D3jsTab.vue?vue&type=script&setup=true&lang=js\"\n\nimport \"./D3jsTab.vue?vue&type=style&index=0&id=9ebc9f04&scoped=true&lang=css\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-9ebc9f04\"]])\n\nexport default __exports__","<script setup>\n  import { ref, computed, watch, onMounted } from 'vue';\n  import { useDataStore } from '@/stores/dataStore.js';\n\n  const dataStore = useDataStore();\n\n  const activeLayerTab = ref(null); /** 📑 當前作用中的圖層分頁 */\n\n  // 獲取所有開啟且有資料的圖層\n  const visibleLayers = computed(() => {\n    const allLayers = dataStore.getAllLayers();\n    return allLayers.filter((layer) => layer.visible);\n  });\n\n  /**\n   * 📑 設定作用中圖層分頁 (Set Active Layer Tab)\n   * @param {string} layerId - 圖層 ID\n   */\n  const setActiveLayerTab = (layerId) => {\n    activeLayerTab.value = layerId;\n  };\n\n  /**\n   * 📊 取得當前圖層名稱 (Get Current Selected Layer Name)\n   */\n  const currentLayerName = computed(() => {\n    if (!activeLayerTab.value) return '無開啟圖層';\n    const layer = visibleLayers.value.find((l) => l.layerId === activeLayerTab.value);\n    return layer ? layer.layerName || '未知圖層' : '無開啟圖層';\n  });\n\n  /**\n   * 📊 取得圖層完整標題 (包含群組名稱) (Get Layer Full Title with Group Name)\n   */\n  const getLayerFullTitle = (layer) => {\n    if (!layer) return { groupName: null, layerName: '未知圖層' };\n    const groupName = dataStore.findGroupNameByLayerId(layer.layerId);\n    return {\n      groupName: groupName,\n      layerName: layer.layerName,\n    };\n  };\n\n  /**\n   * 📊 取得當前圖層的 processedJsonData (Get Current Layer Processed JSON Data)\n   */\n  const getCurrentLayerProcessedJsonData = () => {\n    if (!activeLayerTab.value) return null;\n    const currentLayer = visibleLayers.value.find(\n      (layer) => layer.layerId === activeLayerTab.value\n    );\n    return currentLayer ? currentLayer.processedJsonData || null : null;\n  };\n\n  // 記錄上一次的圖層列表用於比較\n  const previousLayers = ref([]);\n\n  /**\n   * 👀 監聽可見圖層變化，自動切換到新開啟的圖層分頁\n   */\n  watch(\n    () => visibleLayers.value,\n    (newLayers) => {\n      // 如果沒有可見圖層，清除選中的分頁\n      if (newLayers.length === 0) {\n        activeLayerTab.value = null;\n        previousLayers.value = [];\n        return;\n      }\n\n      // 找出新增的圖層（比較新舊圖層列表）\n      const previousLayerIds = previousLayers.value.map((layer) => layer.layerId);\n      const newLayerIds = newLayers.map((layer) => layer.layerId);\n      const addedLayerIds = newLayerIds.filter((id) => !previousLayerIds.includes(id));\n\n      // 如果有新增的圖層，自動切換到最新新增的圖層\n      if (addedLayerIds.length > 0) {\n        const newestAddedLayerId = addedLayerIds[addedLayerIds.length - 1];\n        activeLayerTab.value = newestAddedLayerId;\n        console.log(\n          `🔄 自動切換到新開啟的圖層: ${newLayers.find((layer) => layer.layerId === newestAddedLayerId)?.layerName}`\n        );\n      }\n      // 如果當前沒有選中分頁，或選中的分頁不在可見列表中，選中第一個\n      else if (\n        !activeLayerTab.value ||\n        !newLayers.find((layer) => layer.layerId === activeLayerTab.value)\n      ) {\n        activeLayerTab.value = newLayers[0].layerId;\n      }\n\n      // 更新記錄的圖層列表\n      previousLayers.value = [...newLayers];\n    },\n    { deep: true, immediate: true }\n  );\n\n  /**\n   * 🚀 組件掛載事件 (Component Mounted Event)\n   */\n  onMounted(() => {\n    console.log('[ProcessedJsonDataTab] Component Mounted');\n\n    // 初始化第一個可見圖層為作用中分頁\n    if (visibleLayers.value.length > 0 && !activeLayerTab.value) {\n      activeLayerTab.value = visibleLayers.value[0].layerId;\n    }\n  });\n</script>\n\n<template>\n  <!-- 📊 處理後 JSON 數據視圖組件 -->\n  <div class=\"d-flex flex-column my-bgcolor-gray-200 h-100\">\n    <!-- 📑 圖層分頁導航 -->\n    <div v-if=\"visibleLayers.length > 0\" class=\"\">\n      <ul class=\"nav nav-tabs nav-fill\">\n        <li\n          v-for=\"layer in visibleLayers\"\n          :key=\"layer.layerId\"\n          class=\"nav-item d-flex flex-column align-items-center\"\n        >\n          <!-- tab按鈕 -->\n          <div\n            class=\"btn nav-link rounded-0 border-0 position-relative d-flex align-items-center justify-content-center my-bgcolor-gray-200\"\n            :class=\"{\n              active: activeLayerTab === layer.layerId,\n            }\"\n            @click=\"setActiveLayerTab(layer.layerId)\"\n          >\n            <span>\n              <span v-if=\"getLayerFullTitle(layer).groupName\" class=\"my-title-xs-gray\"\n                >{{ getLayerFullTitle(layer).groupName }} -\n              </span>\n              <span class=\"my-title-sm-black\">{{ getLayerFullTitle(layer).layerName }}</span>\n            </span>\n          </div>\n          <div class=\"w-100\" :class=\"`my-bgcolor-${layer.colorName}`\" style=\"min-height: 4px\"></div>\n        </li>\n      </ul>\n    </div>\n\n    <!-- 有開啟圖層時的內容 -->\n    <div v-if=\"visibleLayers.length > 0\" class=\"flex-grow-1 overflow-auto my-bgcolor-white p-3\">\n      <!-- 📊 當前圖層資訊 -->\n      <div class=\"mb-4\">\n        <h5 class=\"my-title-md-black\">{{ currentLayerName }}</h5>\n      </div>\n\n      <!-- 📊 處理後 JSON 數據 -->\n      <div class=\"rounded-4 my-bgcolor-gray-100 p-4 mb-3\">\n        <h6 class=\"mb-3\">處理後 JSON 數據</h6>\n        <pre\n          class=\"my-font-size-sm\"\n          style=\"white-space: pre-wrap; word-wrap: break-word; max-height: 500px; overflow-y: auto\"\n          >{{ JSON.stringify(getCurrentLayerProcessedJsonData(), null, 2) }}</pre\n        >\n      </div>\n    </div>\n\n    <!-- 沒有開啟圖層時的空狀態 -->\n    <div v-else class=\"flex-grow-1 d-flex align-items-center justify-content-center\">\n      <div class=\"text-center\">\n        <div class=\"my-title-md-gray p-3\">沒有開啟的圖層</div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<style scoped></style>\n","import script from \"./processedJsonDataTab.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./processedJsonDataTab.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","<script setup>\n  import { ref, computed, watch, onMounted } from 'vue';\n  import { useDataStore } from '@/stores/dataStore.js';\n\n  const dataStore = useDataStore();\n\n  const activeLayerTab = ref(null); /** 📑 當前作用中的圖層分頁 */\n\n  // 獲取所有開啟且有資料的圖層\n  const visibleLayers = computed(() => {\n    const allLayers = dataStore.getAllLayers();\n    return allLayers.filter((layer) => layer.visible);\n  });\n\n  /**\n   * 📑 設定作用中圖層分頁 (Set Active Layer Tab)\n   * @param {string} layerId - 圖層 ID\n   */\n  const setActiveLayerTab = (layerId) => {\n    activeLayerTab.value = layerId;\n  };\n\n  /**\n   * 📊 取得當前圖層名稱 (Get Current Selected Layer Name)\n   */\n  const currentLayerName = computed(() => {\n    if (!activeLayerTab.value) return '無開啟圖層';\n    const layer = visibleLayers.value.find((l) => l.layerId === activeLayerTab.value);\n    return layer ? layer.layerName || '未知圖層' : '無開啟圖層';\n  });\n\n  /**\n   * 📊 取得圖層完整標題 (包含群組名稱) (Get Layer Full Title with Group Name)\n   */\n  const getLayerFullTitle = (layer) => {\n    if (!layer) return { groupName: null, layerName: '未知圖層' };\n    const groupName = dataStore.findGroupNameByLayerId(layer.layerId);\n    return {\n      groupName: groupName,\n      layerName: layer.layerName,\n    };\n  };\n\n  /**\n   * 📊 取得當前圖層的 jsonData (Get Current Layer JSON Data)\n   */\n  const getCurrentLayerJsonData = () => {\n    if (!activeLayerTab.value) return null;\n    const currentLayer = visibleLayers.value.find(\n      (layer) => layer.layerId === activeLayerTab.value\n    );\n    return currentLayer ? currentLayer.jsonData || null : null;\n  };\n\n  // 記錄上一次的圖層列表用於比較\n  const previousLayers = ref([]);\n\n  /**\n   * 👀 監聽可見圖層變化，自動切換到新開啟的圖層分頁\n   */\n  watch(\n    () => visibleLayers.value,\n    (newLayers) => {\n      // 如果沒有可見圖層，清除選中的分頁\n      if (newLayers.length === 0) {\n        activeLayerTab.value = null;\n        previousLayers.value = [];\n        return;\n      }\n\n      // 找出新增的圖層（比較新舊圖層列表）\n      const previousLayerIds = previousLayers.value.map((layer) => layer.layerId);\n      const newLayerIds = newLayers.map((layer) => layer.layerId);\n      const addedLayerIds = newLayerIds.filter((id) => !previousLayerIds.includes(id));\n\n      // 如果有新增的圖層，自動切換到最新新增的圖層\n      if (addedLayerIds.length > 0) {\n        const newestAddedLayerId = addedLayerIds[addedLayerIds.length - 1];\n        activeLayerTab.value = newestAddedLayerId;\n        console.log(\n          `🔄 自動切換到新開啟的圖層: ${newLayers.find((layer) => layer.layerId === newestAddedLayerId)?.layerName}`\n        );\n      }\n      // 如果當前沒有選中分頁，或選中的分頁不在可見列表中，選中第一個\n      else if (\n        !activeLayerTab.value ||\n        !newLayers.find((layer) => layer.layerId === activeLayerTab.value)\n      ) {\n        activeLayerTab.value = newLayers[0].layerId;\n      }\n\n      // 更新記錄的圖層列表\n      previousLayers.value = [...newLayers];\n    },\n    { deep: true, immediate: true }\n  );\n\n  /**\n   * 🚀 組件掛載事件 (Component Mounted Event)\n   */\n  onMounted(() => {\n    console.log('[JsonDataTab] Component Mounted');\n\n    // 初始化第一個可見圖層為作用中分頁\n    if (visibleLayers.value.length > 0 && !activeLayerTab.value) {\n      activeLayerTab.value = visibleLayers.value[0].layerId;\n    }\n  });\n</script>\n\n<template>\n  <!-- 📊 原始 JSON 數據視圖組件 -->\n  <div class=\"d-flex flex-column my-bgcolor-gray-200 h-100\">\n    <!-- 📑 圖層分頁導航 -->\n    <div v-if=\"visibleLayers.length > 0\" class=\"\">\n      <ul class=\"nav nav-tabs nav-fill\">\n        <li\n          v-for=\"layer in visibleLayers\"\n          :key=\"layer.layerId\"\n          class=\"nav-item d-flex flex-column align-items-center\"\n        >\n          <!-- tab按鈕 -->\n          <div\n            class=\"btn nav-link rounded-0 border-0 position-relative d-flex align-items-center justify-content-center my-bgcolor-gray-200\"\n            :class=\"{\n              active: activeLayerTab === layer.layerId,\n            }\"\n            @click=\"setActiveLayerTab(layer.layerId)\"\n          >\n            <span>\n              <span v-if=\"getLayerFullTitle(layer).groupName\" class=\"my-title-xs-gray\"\n                >{{ getLayerFullTitle(layer).groupName }} -\n              </span>\n              <span class=\"my-title-sm-black\">{{ getLayerFullTitle(layer).layerName }}</span>\n            </span>\n          </div>\n          <div class=\"w-100\" :class=\"`my-bgcolor-${layer.colorName}`\" style=\"min-height: 4px\"></div>\n        </li>\n      </ul>\n    </div>\n\n    <!-- 有開啟圖層時的內容 -->\n    <div v-if=\"visibleLayers.length > 0\" class=\"flex-grow-1 overflow-auto my-bgcolor-white p-3\">\n      <!-- 📊 當前圖層資訊 -->\n      <div class=\"mb-4\">\n        <h5 class=\"my-title-md-black\">{{ currentLayerName }}</h5>\n      </div>\n\n      <!-- 📊 原始 JSON 數據 -->\n      <div v-if=\"getCurrentLayerJsonData()\">\n        <div class=\"rounded-4 my-bgcolor-gray-100 p-4 mb-3\">\n          <h6 class=\"mb-3\">原始 JSON 數據</h6>\n          <pre\n            class=\"my-font-size-sm\"\n            style=\"\n              white-space: pre-wrap;\n              word-wrap: break-word;\n              max-height: 500px;\n              overflow-y: auto;\n            \"\n            >{{ JSON.stringify(getCurrentLayerJsonData(), null, 2) }}</pre\n          >\n        </div>\n      </div>\n      <div v-else class=\"text-center py-5\">\n        <div class=\"my-title-md-gray\">此圖層沒有可用的原始 JSON 數據</div>\n      </div>\n    </div>\n\n    <!-- 沒有開啟圖層時的空狀態 -->\n    <div v-else class=\"flex-grow-1 d-flex align-items-center justify-content-center\">\n      <div class=\"text-center\">\n        <div class=\"my-title-md-gray p-3\">沒有開啟的圖層</div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<style scoped></style>\n","import script from \"./jsonDataTab.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./jsonDataTab.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","import { render } from \"./UpperView.vue?vue&type=template&id=1a47f2ac\"\nimport script from \"./UpperView.vue?vue&type=script&lang=js\"\nexport * from \"./UpperView.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","<script>\n  import { ref, watch, nextTick } from 'vue';\n  import DataTableTab from '../tabs/DataTableTab.vue';\n\n  export default {\n    name: 'BottomView',\n\n    /**\n     * 🧩 組件註冊 (Component Registration)\n     * 註冊底部面板內使用的子組件\n     */\n    components: {\n      DataTableTab, // 資料表格分頁組件\n    },\n\n    /**\n     * 🔧 組件屬性定義 (Component Props)\n     * 接收來自父組件的配置和狀態數據\n     */\n    props: {\n      activeBottomTab: { type: String, default: 'table' },\n      bottomViewHeight: { type: Number, default: 300 },\n      isPanelDragging: { type: Boolean, default: false },\n    },\n\n    /**\n     * 📡 組件事件定義 (Component Events)\n     * 定義向父組件發送的事件類型\n     */\n    emits: [\n      'update:activeBottomTab', // 更新作用中底部分頁\n      'highlight-on-map', // 在地圖上高亮顯示\n      'feature-selected', // 選中特徵事件\n      'reset-view', // 重設視圖\n    ],\n\n    /**\n     * 🔧 組件設定函數 (Component Setup)\n     * 使用 Composition API 設定組件邏輯\n     */\n    setup(props) {\n      // 建立一個 ref 來引用模板中的底部分頁內容 DOM 元素\n      const bottomTabContentRef = ref(null);\n\n      /**\n       * 👀 監聽作用中底部分頁的變化\n       * 當分頁切換時，確保 DOM 更新完成\n       */\n      watch(\n        () => props.activeBottomTab,\n        () => {\n          // 使用 nextTick 確保 DOM 更新完成後再進行任何後續操作\n          nextTick(() => {\n            // 這裡可以添加分頁切換後的特殊處理邏輯\n            console.log(`✅ 底部分頁已切換至: ${props.activeBottomTab}`);\n          });\n        }\n      );\n\n      // 📤 將需要暴露給 <template> 使用的數據和方法返回\n      return {\n        bottomTabContentRef,\n      };\n    },\n  };\n</script>\n\n<template>\n  <!-- 📋 底部面板組件 (Bottom Panel Component) -->\n  <!-- 提供資料表格顯示功能 -->\n  <div class=\"d-flex flex-column\" :style=\"{ height: bottomViewHeight + 'px' }\">\n    <!-- 📄 底部分頁內容區域 (Bottom Tab Content Area) -->\n    <!-- 顯示資料表格內容組件 -->\n    <div ref=\"bottomTabContentRef\" class=\"flex-grow-1 h-100 overflow-auto\">\n      <!-- 📊 資料表格分頁內容 (Data Table Tab Content) -->\n      <!-- 顯示載入的地理資料，支援搜尋、排序、高亮等功能 -->\n      <div class=\"h-100\">\n        <DataTableTab\n          @highlight-on-map=\"$emit('highlight-on-map', $event)\"\n          @feature-selected=\"$emit('feature-selected', $event)\"\n        />\n      </div>\n    </div>\n  </div>\n</template>\n\n<style scoped></style>\n","/** * 📊 多圖層資料表格分頁組件 (Multi-Layer Data Table Tab Component) * * 功能說明 (Features): * 1.\n📋 多圖層資料表格顯示：支援同時顯示多個圖層的資料表格 * 2. 🔄\n動態欄位偵測：根據資料內容自動偵測並顯示適合的欄位 * 3. 📊\n排序功能：支援點擊欄位標題進行升序/降序排序 * 4. 🎯\n項目點擊互動：點擊表格項目可觸發高亮顯示和屬性選擇 * 5. 📱 響應式設計：適配不同螢幕尺寸的顯示需求 *\n6. 🎨 視覺化增強：特殊欄位（如顏色、節點數）提供視覺化顯示 * * 技術特點 (Technical Features): * -\n使用 Vue 3 Composition API 進行狀態管理 * - 支援動態欄位生成和類型檢測 * - 實現多圖層分頁切換機制 *\n- 提供完整的排序和篩選功能 * - 整合 Pinia 狀態管理系統 * * 支援的資料類型 (Supported Data Types): *\n- 示意圖節點資料：color, name, nodes 等欄位 * - 地理空間資料：包含空間分析結果的各種屬性 * -\n統計資料：人口統計、感染率等數值資料 * * @file DataTableTab.vue * @version 2.0.0 * @author Kevin\nCheng * @since 1.0.0 */\n<script setup>\n  // ==================== 📦 第三方庫引入 (Third-Party Library Imports) ====================\n\n  /**\n   * Vue 3 Composition API 核心功能引入\n   * 提供響應式數據、計算屬性、生命週期鉤子等功能\n   *\n   * @see https://vuejs.org/\n   */\n  import { ref, computed, defineEmits, onMounted, watch } from 'vue';\n\n  /**\n   * Pinia 狀態管理庫引入\n   * 提供集中式狀態管理和跨組件數據共享\n   *\n   * @see https://pinia.vuejs.org/\n   */\n  import { useDataStore } from '@/stores/dataStore.js';\n  import { getIcon } from '../utils/utils.js';\n\n  // ==================== 📡 組件事件定義 (Component Events Definition) ====================\n\n  /**\n   * 定義組件向父組件發送的事件\n   * 採用事件驅動模式，實現組件間的鬆耦合通信\n   */\n  const emit = defineEmits([\n    'highlight-on-map', // 在地圖上高亮顯示指定項目\n    'feature-selected', // 選中特徵事件，用於觸發屬性面板顯示\n  ]);\n\n  // ==================== 🏪 狀態管理初始化 (State Management Initialization) ====================\n\n  /**\n   * 獲取 Pinia 數據存儲實例\n   * 用於訪問全域狀態和圖層數據\n   */\n  const dataStore = useDataStore();\n\n  // ==================== 📊 響應式狀態定義 (Reactive State Definition) ====================\n\n  /**\n   * 📑 當前作用中的圖層分頁 (Active Layer Tab)\n   * 追蹤使用者當前選中的圖層分頁，用於控制表格內容顯示\n   *\n   * @type {Ref<string|null>}\n   * @description 存儲當前選中圖層的 layerId，null 表示沒有選中任何圖層\n   */\n  const activeLayerTab = ref(null);\n\n  /**\n   * 📊 每個圖層的排序狀態 (Layer Sort States)\n   * 存儲每個圖層的排序配置，包括排序欄位和排序方向\n   *\n   * @type {Ref<Object>}\n   * @description 物件結構：{ [layerId]: { key: string, order: 'asc'|'desc' } }\n   */\n  const layerSortStates = ref({});\n\n  // ==================== 📊 計算屬性定義 (Computed Properties Definition) ====================\n\n  /**\n   * 獲取所有開啟且有資料的圖層 (Get All Visible Layers with Data)\n   * 從全域狀態中篩選出可見且已載入資料的圖層\n   *\n   * @type {ComputedRef<Array>}\n   * @description 返回包含所有可見圖層的陣列，用於生成分頁導航\n   * @returns {Array<Object>} 可見圖層陣列，每個圖層包含 layerId, layerName, dataTableData 等屬性\n   */\n  const visibleLayers = computed(() => {\n    // 從數據存儲中獲取所有圖層\n    const allLayers = dataStore.getAllLayers();\n    // 篩選出可見的圖層（layer.visible === true）\n    return allLayers.filter((layer) => layer.visible);\n  });\n\n  // ==================== 🔧 核心功能函數定義 (Core Function Definitions) ====================\n\n  /**\n   * 📑 設定作用中圖層分頁 (Set Active Layer Tab)\n   * 切換當前選中的圖層分頁，觸發表格內容更新\n   *\n   * @param {string} layerId - 要設為作用中的圖層唯一識別碼\n   * @description 當使用者點擊圖層分頁標籤時調用此函數\n   * @example setActiveLayerTab('data_layer') // 切換到數據圖層\n   */\n  const setActiveLayerTab = (layerId) => {\n    activeLayerTab.value = layerId;\n  };\n\n  /**\n   * 📊 取得圖層完整標題 (包含群組名稱) (Get Layer Full Title with Group Name)\n   * 為圖層生成完整的顯示標題，包含群組名稱和圖層名稱\n   *\n   * @param {Object} layer - 圖層物件\n   * @param {string} layer.layerId - 圖層唯一識別碼\n   * @param {string} layer.layerName - 圖層名稱\n   * @returns {Object} 包含群組名稱和圖層名稱的物件\n   * @returns {string|null} returns.groupName - 群組名稱，可能為 null\n   * @returns {string} returns.layerName - 圖層名稱，預設為 '未知圖層'\n   * @description 用於在分頁標籤中顯示完整的圖層標題\n   * @example getLayerFullTitle(layer) // { groupName: '數據圖層', layerName: '示意圖數據' }\n   */\n  const getLayerFullTitle = (layer) => {\n    // 如果圖層不存在，返回預設值\n    if (!layer) return { groupName: null, layerName: '未知圖層' };\n\n    // 從數據存儲中查找圖層所屬的群組名稱\n    const groupName = dataStore.findGroupNameByLayerId(layer.layerId);\n\n    // 返回包含群組名稱和圖層名稱的物件\n    return {\n      groupName: groupName,\n      layerName: layer.layerName,\n    };\n  };\n\n  /**\n   * 📊 動態獲取圖層表格欄位名稱 (Get Layer Table Column Names Dynamically)\n   * 根據圖層資料內容自動偵測並生成適合在表格中顯示的欄位名稱\n   *\n   * 功能說明：\n   * - 自動掃描所有資料項目，收集出現的欄位名稱\n   * - 過濾掉不適合顯示的欄位（如複雜物件、函數等）\n   * - 特別保留示意圖資料的基本欄位（color, name, nodes）\n   * - 支援動態資料結構，適應不同類型的圖層資料\n   *\n   * @param {Object} layer - 圖層物件\n   * @param {Array} layer.dataTableData - 圖層的表格資料陣列\n   * @returns {string[]} 適合顯示的欄位名稱陣列\n   * @description 用於動態生成表格標題行，確保只顯示有意義的欄位\n   * @example getLayerColumns(layer) // ['#', 'color', 'name', 'nodes', 'count']\n   */\n  const getLayerColumns = (layer) => {\n    // 使用原始資料而不是排序後的資料，避免因排序影響欄位偵測\n    // 確保欄位偵測的穩定性和一致性\n    const data = layer.dataTableData;\n\n    // 如果沒有資料或資料為空，返回一個空陣列\n    // 避免在空資料情況下進行無意義的處理\n    if (!data || data.length === 0) {\n      return [];\n    }\n\n    // 使用 Set 收集所有資料項目中出現的欄位名稱\n    // Set 自動去重，確保每個欄位名稱只出現一次\n    const allKeys = new Set();\n\n    // 遍歷所有資料項目，收集欄位名稱\n    data.forEach((item) => {\n      // 獲取每個資料項目的所有屬性鍵\n      Object.keys(item).forEach((key) => {\n        const value = item[key];\n\n        // 特別處理示意圖資料的基本欄位\n        // 這些欄位即使包含複雜資料結構也需要顯示\n        if (key === 'color' || key === 'name' || key === 'nodes') {\n          allKeys.add(key);\n        }\n        // 過濾掉複雜物件，只保留基本資料類型\n        // 確保表格顯示的資料是可讀的\n        else if (typeof value !== 'object' || value === null) {\n          allKeys.add(key);\n        }\n      });\n    });\n\n    // 將 Set 轉換為陣列並返回\n    return Array.from(allKeys);\n  };\n\n  /**\n   * 📊 取得圖層資料數量 (Get Layer Data Count)\n   * 計算指定圖層的資料項目數量，用於在分頁標籤中顯示資料統計\n   *\n   * @param {Object} layer - 圖層物件\n   * @param {string} layer.layerId - 圖層唯一識別碼\n   * @param {string} layer.layerName - 圖層名稱\n   * @param {Array} layer.dataTableData - 圖層的表格資料陣列\n   * @returns {number} 資料項目數量，如果沒有資料則返回 0\n   * @description 用於在分頁標籤中顯示資料數量，提供使用者即時的資料統計資訊\n   * @example getLayerDataCount(layer) // 15 (表示該圖層有 15 筆資料)\n   */\n  const getLayerDataCount = (layer) => {\n    // 使用可選鏈運算符安全地獲取資料長度，避免 undefined 錯誤\n    const count = layer.dataTableData?.length || 0;\n\n    // 記錄詳細的除錯資訊，用於開發和問題排查\n    console.log('DataTable - Layer data count:', {\n      layerId: layer.layerId,\n      layerName: layer.layerName,\n      hasTableData: !!layer.dataTableData,\n      dataCount: count,\n      sampleData: layer.dataTableData?.[0] || null,\n    });\n\n    return count;\n  };\n\n  /**\n   * 📊 取得排序後的資料 (Get Sorted Data)\n   * 根據當前圖層的排序狀態對資料進行排序，支援多種資料類型的排序\n   *\n   * 功能說明：\n   * - 支援數值欄位的數值排序（即使資料以字串形式儲存）\n   * - 支援字串欄位的字典序排序\n   * - 支援升序和降序排序\n   * - 保持原始資料不變，返回排序後的副本\n   *\n   * @param {Object} layer - 圖層物件\n   * @param {string} layer.layerId - 圖層唯一識別碼\n   * @param {Array} layer.dataTableData - 圖層的表格資料陣列\n   * @returns {Array} 排序後的資料陣列副本\n   * @description 用於在表格中顯示按指定欄位和方向排序的資料\n   * @example getSortedData(layer) // 返回按指定欄位排序的資料陣列\n   */\n  const getSortedData = (layer) => {\n    // 如果圖層沒有資料，返回空陣列\n    if (!layer.dataTableData) return [];\n\n    // 獲取當前圖層的排序狀態\n    const sortState = layerSortStates.value[layer.layerId];\n\n    // 如果沒有排序狀態或沒有指定排序欄位，返回原始資料\n    if (!sortState || !sortState.key) {\n      return layer.dataTableData;\n    }\n\n    // 使用展開運算符創建資料副本，避免修改原始資料\n    return [...layer.dataTableData].sort((a, b) => {\n      // 獲取要比較的兩個值\n      const aValue = a[sortState.key];\n      const bValue = b[sortState.key];\n\n      // 定義應該按數值排序的欄位（即使它們被儲存為字串）\n      // 這些欄位通常包含統計數據或計數值\n      const numericFields = ['count', 'spatial_lag', '#', 'P_CNT', '感染率(%)'];\n\n      // 如果是數值欄位，強制轉換為數值進行排序\n      if (numericFields.includes(sortState.key)) {\n        // 使用 parseFloat 轉換為數值，轉換失敗時使用 0 作為預設值\n        const aNum = parseFloat(aValue) || 0;\n        const bNum = parseFloat(bValue) || 0;\n        // 根據排序方向返回比較結果\n        return sortState.order === 'asc' ? aNum - bNum : bNum - aNum;\n      }\n\n      // 字串類型的比較，使用 localeCompare 進行本地化排序\n      if (typeof aValue === 'string' && typeof bValue === 'string') {\n        return sortState.order === 'asc'\n          ? aValue.localeCompare(bValue)\n          : bValue.localeCompare(aValue);\n      }\n\n      // 一般數值類型的比較（用於純數值欄位）\n      return sortState.order === 'asc' ? aValue - bValue : bValue - aValue;\n    });\n  };\n\n  /**\n   * 📊 處理排序點擊 (Handle Sort Click)\n   * @param {string} layerId - 圖層 ID\n   * @param {string} key - 排序欄位\n   */\n  const handleSort = (layerId, key) => {\n    if (!layerSortStates.value[layerId]) {\n      layerSortStates.value[layerId] = { key: null, order: 'asc' };\n    }\n\n    const sortState = layerSortStates.value[layerId];\n\n    if (sortState.key === key) {\n      // 切換排序方向\n      sortState.order = sortState.order === 'asc' ? 'desc' : 'asc';\n    } else {\n      // 設定新的排序欄位\n      sortState.key = key;\n      sortState.order = 'asc';\n    }\n  };\n\n  /**\n   * 🎨 取得排序圖示 (Get Sort Icon)\n   * @param {string} layerId - 圖層 ID\n   * @param {string} key - 欄位名稱\n   * @returns {string} FontAwesome 圖示類別\n   */\n  const getSortIcon = (layerId, key) => {\n    const sortState = layerSortStates.value[layerId];\n    if (!sortState || sortState.key !== key) {\n      return getIcon('sort').icon;\n    }\n    return sortState.order === 'asc' ? getIcon('sort_up').icon : getIcon('sort_down').icon;\n  };\n\n  /**\n   * 🎯 處理項目點擊 (Handle Item Click)\n   * @param {Object} item - 點擊的項目\n   * @param {Object} layer - 圖層物件\n   */\n  const handleItemClick = (item, layer) => {\n    console.log('點擊項目:', { item, layer: layer.layerName });\n\n    // 創建符合 PropertiesTab 期望的 feature 格式\n    const feature = {\n      properties: {\n        id: item['#'] || item.id || 'unknown',\n        layerId: layer.layerId,\n        propertyData: { ...item },\n        itemColor: item.color || '#6c757d',\n      },\n    };\n\n    console.log('設置 selectedFeature:', feature);\n    dataStore.setSelectedFeature(feature);\n\n    // 觸發 feature-selected 事件，讓 HomeView 自動切換到屬性標籤\n    emit('feature-selected', feature);\n  };\n\n  // 記錄上一次的圖層列表用於比較\n  const previousLayers = ref([]);\n\n  /**\n   * 👀 監聽可見圖層變化，自動切換到新開啟的圖層分頁\n   */\n  watch(\n    () => visibleLayers.value,\n    (newLayers) => {\n      // 如果沒有可見圖層，清除選中的分頁\n      if (newLayers.length === 0) {\n        activeLayerTab.value = null;\n        previousLayers.value = [];\n        return;\n      }\n\n      // 找出新增的圖層（比較新舊圖層列表）\n      const previousLayerIds = previousLayers.value.map((layer) => layer.layerId);\n      const newLayerIds = newLayers.map((layer) => layer.layerId);\n      const addedLayerIds = newLayerIds.filter((id) => !previousLayerIds.includes(id));\n\n      // 如果有新增的圖層，自動切換到最新新增的圖層\n      if (addedLayerIds.length > 0) {\n        const newestAddedLayerId = addedLayerIds[addedLayerIds.length - 1];\n        activeLayerTab.value = newestAddedLayerId;\n        console.log(\n          `🔄 自動切換到新開啟的圖層: ${newLayers.find((layer) => layer.layerId === newestAddedLayerId)?.layerName}`\n        );\n      }\n      // 如果當前沒有選中分頁，或選中的分頁不在可見列表中，選中第一個\n      else if (\n        !activeLayerTab.value ||\n        !newLayers.find((layer) => layer.layerId === activeLayerTab.value)\n      ) {\n        activeLayerTab.value = newLayers[0].layerId;\n      }\n\n      // 更新記錄的圖層列表\n      previousLayers.value = [...newLayers];\n    },\n    { deep: true, immediate: true }\n  );\n\n  /**\n   * 🚀 組件掛載事件 (Component Mounted Event)\n   */\n  onMounted(() => {\n    console.log('[DataTableTab] Component Mounted');\n\n    // 初始化第一個可見圖層為作用中分頁\n    if (visibleLayers.value.length > 0 && !activeLayerTab.value) {\n      activeLayerTab.value = visibleLayers.value[0].layerId;\n    }\n  });\n</script>\n\n<template>\n  <!-- 📊 多圖層資料表格分頁組件 -->\n  <div class=\"d-flex flex-column my-bgcolor-gray-200 h-100\">\n    <!-- 📑 圖層分頁導航 -->\n    <div v-if=\"visibleLayers.length > 0\" class=\"\">\n      <ul class=\"nav nav-tabs nav-fill\">\n        <li\n          v-for=\"layer in visibleLayers\"\n          :key=\"layer.layerId\"\n          class=\"nav-item d-flex flex-column align-items-center\"\n        >\n          <!-- tab按鈕 -->\n          <div\n            class=\"btn nav-link rounded-0 border-0 position-relative d-flex align-items-center justify-content-center my-bgcolor-gray-200\"\n            :class=\"{\n              active: activeLayerTab === layer.layerId,\n            }\"\n            @click=\"setActiveLayerTab(layer.layerId)\"\n          >\n            <span class=\"my-title-sm-black\">\n              <span v-if=\"getLayerFullTitle(layer).groupName\" class=\"my-title-xs-gray\"\n                >{{ getLayerFullTitle(layer).groupName }} -\n              </span>\n              <span>{{ getLayerFullTitle(layer).layerName }}</span>\n              <span class=\"my-content-xs-gray ms-2\" v-if=\"getLayerDataCount(layer)\">\n                {{ getLayerDataCount(layer) }}\n              </span>\n            </span>\n          </div>\n          <div class=\"w-100\" :class=\"`my-bgcolor-${layer.colorName}`\" style=\"min-height: 4px\"></div>\n        </li>\n      </ul>\n    </div>\n\n    <!-- 📋 圖層表格內容區域 -->\n    <div v-if=\"visibleLayers.length > 0\" class=\"flex-grow-1 overflow-hidden\">\n      <div\n        v-for=\"layer in visibleLayers\"\n        :key=\"layer.layerId\"\n        v-show=\"activeLayerTab === layer.layerId\"\n        class=\"h-100\"\n      >\n        <div class=\"h-100 d-flex flex-column\">\n          <div class=\"flex-grow-1 overflow-auto\">\n            <table class=\"table w-100 mb-0\">\n              <thead class=\"sticky-top my-table-thead\">\n                <tr class=\"text-center text-nowrap\">\n                  <template v-for=\"column in getLayerColumns(layer)\" :key=\"column\">\n                    <th\n                      v-if=\"!column.endsWith('_color')\"\n                      @click=\"handleSort(layer.layerId, column)\"\n                      class=\"my-bgcolor-white-hover p-1 my-cursor-pointer\"\n                    >\n                      <span class=\"my-title-xs-gray text-nowrap\">\n                        {{ column === 'nodes' ? '節點數' : column }}\n                      </span>\n                      <span class=\"my-title-xs-gray text-nowrap ms-2\">\n                        <i :class=\"getSortIcon(layer.layerId, column)\"></i>\n                      </span>\n                    </th>\n                  </template>\n                </tr>\n              </thead>\n              <tbody>\n                <tr\n                  v-for=\"item in getSortedData(layer)\"\n                  :key=\"item.id\"\n                  class=\"my-table-tr-hover text-center text-nowrap border-bottom my-cursor-pointer\"\n                  @click=\"handleItemClick(item, layer)\"\n                >\n                  <template v-for=\"column in getLayerColumns(layer)\" :key=\"column\">\n                    <td\n                      v-if=\"!column.endsWith('_color')\"\n                      class=\"border-0 text-nowrap text-truncate p-0\"\n                      style=\"max-width: 80px\"\n                    >\n                      <!-- 特殊處理：color 欄位顯示顏色圓點 -->\n                      <div\n                        v-if=\"column === 'color'\"\n                        class=\"d-flex align-items-center justify-content-center px-3 py-2\"\n                      >\n                        <div\n                          class=\"rounded-circle me-2\"\n                          style=\"width: 12px; height: 12px; flex-shrink: 0\"\n                          :style=\"{\n                            backgroundColor: item[column],\n                          }\"\n                          :title=\"item[column]\"\n                        ></div>\n                        <div class=\"my-content-xs-black\">\n                          {{ item[column] || '-' }}\n                        </div>\n                      </div>\n                      <!-- 特殊處理：nodes 欄位顯示節點數量 -->\n                      <div v-else-if=\"column === 'nodes'\" class=\"my-content-xs-black px-3 py-2\">\n                        {{ Array.isArray(item[column]) ? item[column].length : '-' }}\n                      </div>\n                      <!-- 特殊處理：name 欄位 -->\n                      <div v-else-if=\"column === 'name'\" class=\"my-content-xs-black px-3 py-2\">\n                        {{ item[column] || '-' }}\n                      </div>\n                      <div v-else-if=\"column === '#'\" class=\"d-flex p-0\">\n                        <div\n                          style=\"min-width: 6px\"\n                          :style=\"{\n                            backgroundColor: item['color'],\n                          }\"\n                        ></div>\n                        <div class=\"my-content-xs-black w-100 px-3 py-2\">\n                          {{ item[column] || '-' }}\n                        </div>\n                      </div>\n                      <!-- 特殊處理：spatial_lag 欄位顯示顏色圓點在數字前面 -->\n                      <div\n                        v-else-if=\"column === 'spatial_lag'\"\n                        class=\"d-flex align-items-center justify-content-center px-3 py-2\"\n                      >\n                        <div\n                          v-if=\"item['spatial_lag_color']\"\n                          class=\"rounded-circle me-2\"\n                          style=\"width: 12px; height: 12px; flex-shrink: 0\"\n                          :style=\"{\n                            backgroundColor: item['spatial_lag_color'],\n                          }\"\n                          :title=\"item['spatial_lag_color']\"\n                        ></div>\n                        <div class=\"my-content-xs-black\">\n                          {{\n                            typeof item[column] === 'number'\n                              ? item[column].toFixed(2)\n                              : item[column] || '-'\n                          }}\n                        </div>\n                      </div>\n                      <!-- 特殊處理：binaryValue 欄位顯示顏色圓點在數字前面 -->\n                      <div\n                        v-else-if=\"column === 'binaryValue'\"\n                        class=\"d-flex align-items-center justify-content-center px-3 py-2\"\n                      >\n                        <div\n                          v-if=\"item['joinCounts_color']\"\n                          class=\"rounded-circle me-2\"\n                          style=\"width: 12px; height: 12px; flex-shrink: 0\"\n                          :style=\"{\n                            backgroundColor: item['joinCounts_color'],\n                          }\"\n                          :title=\"item['joinCounts_color']\"\n                        ></div>\n                        <div class=\"my-content-xs-black\">\n                          {{ item[column] }}\n                        </div>\n                      </div>\n                      <!-- 特殊處理：count 欄位顯示顏色圓點在數字前面 -->\n                      <div\n                        v-else-if=\"column === 'count'\"\n                        class=\"d-flex align-items-center justify-content-center px-3 py-2\"\n                      >\n                        <div\n                          v-if=\"item['color']\"\n                          class=\"rounded-circle me-2\"\n                          style=\"width: 12px; height: 12px; flex-shrink: 0\"\n                          :style=\"{\n                            backgroundColor: item['color'],\n                          }\"\n                          :title=\"item['color']\"\n                        ></div>\n                        <div class=\"my-content-xs-black\">\n                          {{ item[column] }}\n                        </div>\n                      </div>\n                      <!-- 特殊處理：感染率(%) 欄位顯示顏色圓點在數字前面 -->\n                      <div\n                        v-else-if=\"column === '感染率(%)'\"\n                        class=\"d-flex align-items-center justify-content-center px-3 py-2\"\n                      >\n                        <div\n                          v-if=\"item['infection_rate_color']\"\n                          class=\"rounded-circle me-2\"\n                          style=\"width: 12px; height: 12px; flex-shrink: 0\"\n                          :style=\"{\n                            backgroundColor: item['infection_rate_color'],\n                          }\"\n                          :title=\"item['infection_rate_color']\"\n                        ></div>\n                        <div class=\"my-content-xs-black\">\n                          {{ item[column] || '-' }}\n                        </div>\n                      </div>\n                      <div v-else class=\"my-content-xs-black px-3 py-2\">\n                        {{ item[column] || '-' }}\n                      </div>\n                    </td>\n                  </template>\n                </tr>\n              </tbody>\n            </table>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <!-- 📭 無開啟圖層的空狀態 -->\n    <div v-else class=\"flex-grow-1 d-flex align-items-center justify-content-center\">\n      <div class=\"text-center\">\n        <div class=\"my-title-md-gray p-3\">沒有開啟的圖層</div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<style scoped>\n  .my-table-thead {\n    border-bottom: 2px solid var(--my-color-gray-300) !important;\n  }\n</style>\n","import script from \"./DataTableTab.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./DataTableTab.vue?vue&type=script&setup=true&lang=js\"\n\nimport \"./DataTableTab.vue?vue&type=style&index=0&id=59b326e6&scoped=true&lang=css\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-59b326e6\"]])\n\nexport default __exports__","import { render } from \"./BottomView.vue?vue&type=template&id=04e523aa\"\nimport script from \"./BottomView.vue?vue&type=script&lang=js\"\nexport * from \"./BottomView.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","/** * 🗺️ 中間主要內容面板組件 (Middle Main Content Panel Component) * * 功能說明 (Features): * 1. 📊\n分層佈局管理：管理上半部（地圖/儀表板）和下半部（表格）的垂直佈局 * 2. 🖱️\n拖曳調整功能：提供垂直拖曳調整器，讓使用者動態調整上下面板高度比例 * 3. 📱\n響應式設計：根據螢幕尺寸和面板狀態自動調整佈局 * 4. 🔄\n事件轉發：將子組件事件轉發給父組件，實現組件間通信 * 5. 🎯 高亮功能：提供地圖要素高亮顯示的統一介面\n* 6. 📏 尺寸計算：動態計算各面板的實際像素高度 * * 技術特點 (Technical Features): * - 使用 Vue 3\nComposition API 進行狀態管理 * - 支援動態面板高度調整和響應式佈局 * - 實現完整的拖曳調整功能 * -\n提供事件轉發和狀態同步機制 * - 整合多個子組件的協調工作 * * 佈局結構 (Layout Structure): * -\n上半部：UpperView（地圖、儀表板、D3.js 圖表等） * - 中間：垂直拖曳調整器 * -\n下半部：BottomView（資料表格、樣式設定等） * * @file MiddleView.vue * @version 2.0.0 * @author Kevin\nCheng * @since 1.0.0 */\n<script setup>\n  // ==================== 📦 第三方庫引入 (Third-Party Library Imports) ====================\n\n  /**\n   * Vue 3 Composition API 核心功能引入\n   * 提供響應式數據、計算屬性、生命週期鉤子等功能\n   *\n   * @see https://vuejs.org/\n   */\n  import {\n    ref, // 響應式引用\n    computed, // 計算屬性\n    onMounted, // 組件掛載生命週期\n    onUnmounted, // 組件卸載生命週期\n    defineProps, // 定義組件屬性\n    defineEmits, // 定義組件事件\n    defineExpose, // 暴露組件方法\n    watch, // 監聽器\n  } from 'vue';\n\n  // ==================== 🧩 子組件引入 (Subcomponent Imports) ====================\n\n  /**\n   * 上半部區域組件引入\n   * 包含地圖、儀表板、D3.js 圖表等主要內容\n   *\n   * @see ./UpperView.vue\n   */\n  import UpperView from './UpperView.vue';\n\n  /**\n   * 下半部區域組件引入\n   * 包含資料表格、樣式設定等輔助功能\n   *\n   * @see ./BottomView.vue\n   */\n  import BottomView from './BottomView.vue';\n\n  // --- 📥 組件屬性定義 (Component Props) ---\n  /**\n   * 📋 接收來自父組件 (HomeView) 的所有必要數據和狀態\n   * 包含面板尺寸、分頁狀態、地圖設定、資料等\n   */\n  const props = defineProps({\n    // 🎛️ 分頁和面板設定 (Tab and Panel Settings)\n    activeUpperTab: { type: String, default: 'd3js' },\n    activeBottomTab: { type: String, default: 'table' },\n    mainPanelWidth: { type: Number, default: 60 },\n    dynamicMainAreaHeight: { type: Number, default: 500 },\n\n    // 🗺️ 圖層和地圖設定 (Layer and Map Settings)\n    selectedFilter: { type: String, default: '' },\n\n    // 🔧 其他設定 (Other Settings)\n    zoomLevel: { type: Number, default: 11 },\n    currentCoords: { type: Object, default: () => ({ lat: 25.033, lng: 121.5654 }) },\n    activeMarkers: { type: Number, default: 0 },\n    isSidePanelDragging: { type: Boolean, default: false },\n  });\n\n  // --- 📤 組件事件定義 (Component Events) ---\n  /**\n   * 📡 定義向父組件 (HomeView) 發送的所有事件\n   * 採用事件轉發模式，確保資料流向清晰\n   */\n  defineEmits([\n    // 📊 分頁更新事件 (Tab Update Events)\n    'update:activeUpperTab', // 更新主要分頁\n    'update:activeBottomTab', // 更新底部分頁\n\n    // 🗺️ 地圖狀態更新事件 (Map State Update Events)\n    'update:zoomLevel', // 更新縮放等級\n    'update:currentCoords', // 更新目前座標\n    'update:activeMarkers', // 更新作用中標記數\n\n    // 📊 表格相關事件\n    'update:tableSearchQuery', // 更新搜尋查詢\n    'sort-table', // 表格排序\n    'highlight-on-map', // 在地圖上高亮顯示\n    'feature-selected', // 選中特徵事件\n\n    // 🔄 操作相關事件\n    'reset-view', // 重設視圖\n  ]);\n\n  // --- 📚 內部組件引用 (Internal Component References) ---\n  /** 📊 主內容面板引用 (用於呼叫 UpperView 的方法如 highlightFeature) */\n  const mainContentRef = ref(null);\n\n  // --- 🔧 內部垂直拖曳調整邏輯 (Internal Vertical Resizing Logic) ---\n\n  /** 📏 底部面板高度百分比 (預設 30%，可透過拖曳調整) */\n  const bottomViewHeightPercent = ref(30);\n\n  /** 🖱️ 是否正在進行垂直拖曳 (追蹤垂直拖曳狀態) */\n  const isVerticalDragging = ref(false);\n\n  /**\n   * 🖱️ 計算是否有任何拖曳正在進行 (影響滑鼠指標事件)\n   * 結合側邊面板拖曳和垂直拖曳狀態，用於禁用指標事件\n   */\n  const isOverallDragging = computed(() => {\n    return props.isSidePanelDragging || isVerticalDragging.value;\n  });\n\n  /**\n   * 📏 中間區域總高度計算 (Computing Total Middle Section Height)\n   * 從父組件傳入的動態高度，確保不為負數\n   */\n  const middleSectionTotalHeight = computed(() => {\n    const totalHeight = props.dynamicMainAreaHeight;\n    console.log(`🔧 MiddleView: middleSectionTotalHeight (from prop): ${totalHeight}`);\n    return Math.max(totalHeight, 0); // 確保不為負數，避免佈局錯誤\n  });\n\n  /**\n   * 📏 底部面板實際像素高度計算 (Computing Actual Bottom View Pixel Height)\n   * 根據百分比和總高度計算實際像素值\n   */\n  const actualBottomViewPixelHeight = computed(() => {\n    const pixelHeight = (bottomViewHeightPercent.value / 100) * middleSectionTotalHeight.value;\n    console.log(\n      `🔧 MiddleView: actualBottomViewPixelHeight calculated: ${pixelHeight} (percent: ${bottomViewHeightPercent.value}%, totalMiddle: ${middleSectionTotalHeight.value})`\n    );\n    return pixelHeight;\n  });\n\n  /**\n   * 📏 主內容區域高度計算 (Computing Main Content Area Height)\n   * 總高度減去底部面板高度，得到上部區域可用高度\n   */\n  const contentHeight = computed(() => {\n    const mainContentH = middleSectionTotalHeight.value - actualBottomViewPixelHeight.value;\n    console.log(\n      `🔧 MiddleView: contentHeight (for MainContent) calculated: ${mainContentH}, totalMiddle: ${middleSectionTotalHeight.value}, bottomViewPx: ${actualBottomViewPixelHeight.value}`\n    );\n    return mainContentH;\n  });\n\n  /**\n   * 🖱️ 開始垂直拖曳調整 (Start Vertical Resize)\n   * 處理滑鼠按下事件，開始垂直面板大小調整\n   *\n   * @param {MouseEvent} event - 滑鼠按下事件\n   */\n  const startVerticalResize = (event) => {\n    // 阻止預設行為和事件冒泡，避免干擾其他元素\n    event.preventDefault();\n    event.stopPropagation();\n\n    // 設定拖曳狀態和視覺回饋\n    isVerticalDragging.value = true;\n    document.body.classList.add('my-no-select'); // 防止文字選取，提升拖曳體驗\n\n    // 記錄初始位置和狀態，用於計算拖曳變化量\n    const startY = event.clientY;\n    const startBottomPercent = bottomViewHeightPercent.value;\n    const currentMiddleSectionHeight = middleSectionTotalHeight.value;\n\n    /**\n     * 🖱️ 處理滑鼠移動事件 (Handle Mouse Move)\n     * 計算拖曳距離並更新面板高度比例\n     *\n     * @param {MouseEvent} moveEvent - 滑鼠移動事件\n     */\n    const handleMouseMove = (moveEvent) => {\n      moveEvent.preventDefault();\n      const deltaY = moveEvent.clientY - startY;\n\n      // 防止除零錯誤\n      if (currentMiddleSectionHeight === 0) return;\n\n      // 計算百分比變化 (Y座標變化轉換為高度百分比變化)\n      const deltaPercent = (deltaY / currentMiddleSectionHeight) * 100;\n\n      // 向上拖曳 (deltaY < 0) 增加底部面板高度百分比\n      // 向下拖曳 (deltaY > 0) 減少底部面板高度百分比\n      let newPercent = startBottomPercent - deltaPercent;\n\n      // 限制在合理範圍 (0-100%)，確保佈局穩定\n      newPercent = Math.max(0, Math.min(100, newPercent));\n\n      // 四捨五入到小數點後一位，避免精度問題\n      bottomViewHeightPercent.value = Math.round(newPercent * 10) / 10;\n    };\n\n    /**\n     * 🖱️ 處理滑鼠放開事件 (Handle Mouse Up)\n     * 清理拖曳狀態，移除事件監聽器\n     */\n    const handleMouseUp = () => {\n      // 清除拖曳狀態和視覺回饋\n      isVerticalDragging.value = false;\n      document.body.classList.remove('my-no-select');\n\n      // 移除臨時事件監聽器，避免記憶體洩漏\n      document.removeEventListener('mousemove', handleMouseMove);\n      document.removeEventListener('mouseup', handleMouseUp);\n    };\n\n    // 註冊全域事件監聽器，確保拖曳行為在整個頁面範圍內有效\n    document.addEventListener('mousemove', handleMouseMove);\n    document.addEventListener('mouseup', handleMouseUp);\n  };\n\n  /**\n   * 👀 監聽 activeUpperTab 變化 (Watch activeUpperTab Changes)\n   * 當分頁切換時記錄日誌，用於除錯和狀態追蹤\n   */\n  watch(\n    () => props.activeUpperTab,\n    (newTab, oldTab) => {\n      console.log(\n        `🔧 MiddleView Watcher: activeUpperTab changed from \"${oldTab}\" to \"${newTab}\". Current bottomViewHeightPercent: ${bottomViewHeightPercent.value}%`\n      );\n    }\n  );\n\n  /**\n   * 🚀 組件掛載時初始化 (Component Mounted Initialization)\n   * 組件載入完成後的初始化工作\n   */\n  onMounted(() => {\n    // 初始計算將依賴從 HomeView 傳遞的正確 prop\n    console.log('🚀 MiddleView mounted');\n  });\n\n  /**\n   * 🗑️ 組件卸載時清理 (Component Unmounted Cleanup)\n   * 組件銷毀前的清理工作，確保沒有記憶體洩漏\n   */\n  onUnmounted(() => {\n    console.log('🗑️ MiddleView unmounted');\n  });\n\n  // --- 🔧 可從父組件呼叫的方法 (Methods Callable from Parent) ---\n\n  /**\n   * 🎯 高亮顯示特徵 (Highlight Feature)\n   * 透過 mainContentRef 呼叫主內容面板的高亮功能\n   * 用於從表格或其他來源觸發地圖上的要素高亮\n   *\n   * @param {Object} highlightData - 包含 layerId 和 id 的高亮數據物件\n   */\n  const highlightFeature = (highlightData) => {\n    if (!mainContentRef.value) {\n      console.warn('⚠️ 無法高亮顯示：mainContentRef 未定義');\n      return;\n    }\n    console.log('🎯 MiddleView: 呼叫 highlightFeature', highlightData);\n    mainContentRef.value.highlightFeature(highlightData);\n  };\n\n  /**\n   * 🗺️ 適應台南邊界 (Fit to Tainan Bounds)\n   * 透過 mainContentRef 呼叫地圖適應邊界功能\n   * 將地圖視圖調整到顯示完整的台南市範圍\n   */\n  const fitToTainanBounds = () => {\n    if (mainContentRef.value) {\n      console.log('🗺️ MiddleView: 呼叫 fitToTainanBounds');\n      mainContentRef.value.fitToTainanBounds();\n    }\n  };\n\n  /**\n   * 🔄 重設地圖視圖 (Reset Map View)\n   * MapTab已移除，此功能不再需要\n   */\n  const resetMapTab = () => {\n    console.log('🔄 MiddleView: MapTab已移除，resetMapTab功能已停用');\n  };\n\n  /**\n   * 📏 刷新地圖尺寸 (Invalidate Map Size)\n   * 透過 mainContentRef 呼叫地圖尺寸重新計算功能\n   * 當容器大小變化但自動偵測失效時使用\n   */\n  const invalidateMapSize = () => {\n    if (mainContentRef.value) {\n      console.log('📏 MiddleView: 呼叫地圖尺寸刷新');\n      mainContentRef.value.invalidateMapSize();\n    }\n  };\n\n  /**\n   * 🛑 停止地圖點擊模式 (Stop Map Click Mode)\n   * 透過 mainContentRef 呼叫停止地圖點擊功能\n   */\n  const stopMapClickMode = () => {\n    if (mainContentRef.value) {\n      console.log('🛑 MiddleView: 停止地圖點擊模式');\n      mainContentRef.value.stopMapClickMode();\n    }\n  };\n\n  /**\n   * 📤 暴露方法給父組件使用 (Expose Methods to Parent Component)\n   * 讓 HomeView 可以直接呼叫這些方法，實現組件間的方法調用\n   */\n  defineExpose({\n    highlightFeature, // 高亮顯示功能\n    fitToTainanBounds, // 地圖邊界適應\n    resetMapTab, // 地圖視圖重設\n    invalidateMapSize, // 地圖尺寸刷新\n    stopMapClickMode, // 停止地圖點擊模式\n    // 如果 HomeView 需要直接存取子組件，可以暴露 mainContentRef 和 bottomViewRef\n    // mainContentRef,    // 主內容組件引用\n    // bottomViewRef      // 底部視圖組件引用\n  });\n</script>\n\n<template>\n  <!-- 🎛️ 中間面板組件 (Middle Panel Component) -->\n  <!-- 負責管理上下兩個面板的佈局和垂直拖曳調整功能 -->\n  <!-- 這是一個佈局容器，使用 flexbox 垂直排列，填滿可用空間 -->\n  <div class=\"d-flex flex-column overflow-hidden h-100\">\n    <!-- 📊 上半部內容區域 (Upper Content Area) -->\n    <!-- 包含地圖、儀表板等主要顯示內容 -->\n    <!-- 動態高度根據 contentHeight 計算，拖曳時禁用指標事件避免干擾 -->\n    <div\n      :style=\"{\n        pointerEvents: isOverallDragging ? 'none' : 'auto',\n        height: contentHeight + 'px',\n        overflow: 'hidden',\n      }\"\n    >\n      <!-- 🗺️ 上層視圖組件 (Upper View Component) -->\n      <!-- 傳遞所有必要的 props 給 UpperView，包含地圖狀態、資料、樣式設定等 -->\n      <UpperView\n        ref=\"mainContentRef\"\n        :activeUpperTab=\"activeUpperTab\"\n        :mainPanelWidth=\"mainPanelWidth\"\n        :contentHeight=\"contentHeight\"\n        :selectedFilter=\"selectedFilter\"\n        :zoomLevel=\"zoomLevel\"\n        :isPanelDragging=\"isOverallDragging\"\n        :activeMarkers=\"activeMarkers\"\n        @update:activeUpperTab=\"$emit('update:activeUpperTab', $event)\"\n        @update:zoomLevel=\"$emit('update:zoomLevel', $event)\"\n        @update:currentCoords=\"$emit('update:currentCoords', $event)\"\n        @update:activeMarkers=\"$emit('update:activeMarkers', $event)\"\n        @feature-selected=\"$emit('feature-selected', $event)\"\n      />\n    </div>\n\n    <!-- 🔧 水平拖曳調整器 (Horizontal Resizer) -->\n    <!-- 用於調整上下面板的高度比例 -->\n    <!-- 監聽 mousedown 事件開始拖曳，動態顯示拖曳狀態的樣式 -->\n    <div\n      class=\"my-resizer my-resizer-horizontal my-resizer-middle\"\n      :class=\"{ 'my-dragging': isVerticalDragging }\"\n      @mousedown=\"startVerticalResize\"\n      title=\"拖曳調整底部面板高度\"\n    ></div>\n\n    <!-- 📋 下半部內容區域 (Bottom Content Area) -->\n    <!-- 包含資料表格、控制項等輔助顯示內容 -->\n    <!-- 動態高度根據 actualBottomViewPixelHeight 計算 -->\n    <div\n      class=\"overflow-hidden\"\n      :style=\"{\n        pointerEvents: isOverallDragging ? 'none' : 'auto',\n        height: actualBottomViewPixelHeight + 'px',\n      }\"\n    >\n      <!-- 📊 底部視圖組件 (Bottom View Component) -->\n      <!-- 傳遞表格資料、樣式設定、面板狀態等 props -->\n      <BottomView\n        :activeBottomTab=\"activeBottomTab\"\n        :bottomViewHeight=\"actualBottomViewPixelHeight\"\n        :isPanelDragging=\"isOverallDragging\"\n        @update:activeBottomTab=\"$emit('update:activeBottomTab', $event)\"\n        @highlight-on-map=\"$emit('highlight-on-map', $event)\"\n        @feature-selected=\"$emit('feature-selected', $event)\"\n        @reset-view=\"$emit('reset-view')\"\n      />\n    </div>\n  </div>\n</template>\n\n<style scoped></style>\n","import script from \"./MiddleView.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./MiddleView.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","<script>\n  import { computed, ref, onMounted, onUnmounted } from 'vue';\n  import { getIcon } from '../utils/utils.js';\n  import LayersTab from '../tabs/LayersTab.vue';\n  import DataTableTab from '../tabs/DataTableTab.vue';\n  import PropertiesTab from '../tabs/PropertiesTab.vue';\n  import LayerInfo from '../tabs/layerInfoTab.vue';\n\n  export default {\n    name: 'ResponsiveLowerView',\n\n    /**\n     * 🧩 組件註冊 (Component Registration)\n     * 註冊響應式下半部面板內使用的子組件\n     */\n    components: {\n      LayersTab, // 圖層列表分頁組件\n      DataTableTab, // 資料表格分頁組件\n      PropertiesTab, // 物件屬性分頁組件\n      LayerInfo, // 圖層資訊分頁組件\n    },\n\n    /**\n     * 🔧 組件屬性定義 (Component Props)\n     * 接收來自父組件的配置和狀態數據\n     */\n    props: {\n      activeTab: { type: String, default: 'layers' },\n      activeRightTab: { type: String, default: 'layer-info' },\n      activeBottomTab: { type: String, default: 'table' },\n    },\n\n    /**\n     * 📡 組件事件定義 (Component Events)\n     * 定義向父組件發送的事件類型\n     */\n    emits: [\n      'update:activeTab', // 更新作用中分頁\n      'update:activeRightTab', // 更新右側分頁\n      'update:activeBottomTab', // 更新底部分頁\n      'highlight-on-map', // 在地圖上高亮顯示\n      'highlight-feature', // 高亮顯示特徵\n      'feature-selected', // 特徵選中事件\n    ],\n\n    /**\n     * 🔧 組件設定函數 (Component Setup)\n     * 使用 Composition API 設定組件邏輯\n     */\n    setup(props, { emit }) {\n      // 📱 動態視窗高度偵測 (Dynamic Viewport Height Detection)\n      const bottomSafeArea = ref(0);\n\n      /**\n       * 📊 計算可用的分頁列表 (Compute Available Tabs)\n       * 根據需求顯示不同的分頁選項\n       */\n      const availableTabs = computed(() => [\n        { id: 'layers', name: '圖層', icon: getIcon('layer_group').icon },\n        { id: 'table', name: '資料表', icon: getIcon('table').icon },\n        { id: 'properties', name: '屬性', icon: getIcon('location_dot').icon },\n        { id: 'layer-info', name: '圖層資訊', icon: getIcon('info_circle').icon },\n      ]);\n\n      /**\n       * 📱 計算底部安全區域 (Calculate Bottom Safe Area)\n       * 動態計算瀏覽器界面佔用的空間\n       */\n      const calculateBottomSafeArea = () => {\n        const windowHeight = window.innerHeight;\n        const visualHeight = window.visualViewport?.height || windowHeight;\n        const heightDiff = windowHeight - visualHeight;\n\n        // 如果可視高度小於視窗高度，說明有瀏覽器界面佔用空間\n        bottomSafeArea.value = heightDiff > 0 ? heightDiff : 0;\n      };\n\n      /**\n       * 🎨 動態底部導航樣式 (Dynamic Bottom Navigation Style)\n       * 根據瀏覽器界面動態調整高度和位置\n       */\n      const getBottomNavStyle = computed(() => {\n        const baseHeight = 60;\n        const extraPadding = bottomSafeArea.value > 0 ? bottomSafeArea.value + 10 : 10;\n\n        return {\n          'min-height': `${baseHeight}px`,\n          height: `${baseHeight + extraPadding}px`,\n          padding: `8px 4px ${extraPadding}px 4px`,\n        };\n      });\n\n      /**\n       * 🔘 切換分頁 (Switch Tab)\n       * @param {string} tabId - 分頁 ID\n       */\n      const switchTab = (tabId) => {\n        emit('update:activeTab', tabId);\n      };\n\n      /**\n       * 🚀 組件掛載時初始化 (Component Mounted Initialization)\n       */\n      onMounted(() => {\n        // 初始計算\n        calculateBottomSafeArea();\n\n        // 監聽視窗大小變化\n        window.addEventListener('resize', calculateBottomSafeArea);\n\n        // 監聽 Visual Viewport API（支援的瀏覽器）\n        if (window.visualViewport) {\n          window.visualViewport.addEventListener('resize', calculateBottomSafeArea);\n          window.visualViewport.addEventListener('scroll', calculateBottomSafeArea);\n        }\n\n        // 監聽方向變化\n        window.addEventListener('orientationchange', () => {\n          // 延遲執行，等待瀏覽器完成方向變化\n          setTimeout(calculateBottomSafeArea, 300);\n        });\n      });\n\n      /**\n       * 🗑️ 組件卸載時清理 (Component Unmounted Cleanup)\n       */\n      onUnmounted(() => {\n        window.removeEventListener('resize', calculateBottomSafeArea);\n\n        if (window.visualViewport) {\n          window.visualViewport.removeEventListener('resize', calculateBottomSafeArea);\n          window.visualViewport.removeEventListener('scroll', calculateBottomSafeArea);\n        }\n\n        window.removeEventListener('orientationchange', calculateBottomSafeArea);\n      });\n\n      // 📤 返回響應式數據和函數給模板使用\n      return {\n        availableTabs,\n        switchTab,\n        getBottomNavStyle,\n        bottomSafeArea,\n      };\n    },\n  };\n</script>\n\n<template>\n  <!-- 📱 響應式下半部面板組件 (Responsive Lower Panel Component) -->\n  <div class=\"d-flex flex-column h-100 my-bgcolor-gray-200\">\n    <!-- 📄 分頁內容區域 (Tab Content Area) -->\n    <div\n      class=\"flex-grow-1 overflow-hidden\"\n      :style=\"{\n        'padding-bottom': `70px`,\n      }\"\n    >\n      <!-- 📋 圖層分頁內容 -->\n      <div v-show=\"activeTab === 'layers'\" class=\"h-100\">\n        <LayersTab />\n      </div>\n\n      <!-- 📊 資料表格分頁內容 -->\n      <div v-show=\"activeTab === 'table'\" class=\"h-100\">\n        <DataTableTab\n          @highlight-on-map=\"$emit('highlight-on-map', $event)\"\n          @feature-selected=\"$emit('feature-selected', $event)\"\n        />\n      </div>\n\n      <!-- 📈 物件屬性分頁內容 -->\n      <div v-show=\"activeTab === 'properties'\" class=\"h-100\">\n        <PropertiesTab @highlight-feature=\"$emit('highlight-feature', $event)\" />\n      </div>\n\n      <!-- 📊 圖層資訊分頁內容 -->\n      <div v-show=\"activeTab === 'layer-info'\" class=\"h-100\">\n        <LayerInfo />\n      </div>\n    </div>\n\n    <!-- 📑 分頁導航 (Tab Navigation) - 固定在底部，動態適應瀏覽器界面 -->\n    <div\n      class=\"position-fixed bottom-0 start-0 end-0 d-flex align-items-center justify-content-between my-bgcolor-gray-200 border-top z-100 w-100\"\n      :style=\"getBottomNavStyle\"\n    >\n      <button\n        v-for=\"tab in availableTabs\"\n        :key=\"tab.id\"\n        class=\"d-flex rounded-3 border-0 flex-grow-1 py-2 mx-1\"\n        :class=\"{\n          'my-btn-transparent': activeTab !== tab.id,\n          'my-btn-blue': activeTab === tab.id,\n        }\"\n        :style=\"{\n          'min-height': '44px',\n          'touch-action': 'manipulation',\n          '-webkit-appearance': 'none !important',\n        }\"\n        @click=\"switchTab(tab.id)\"\n      >\n        <div class=\"d-flex flex-column align-items-center justify-content-center w-100\">\n          <span class=\"my-font-size-sm\"><i :class=\"tab.icon\" class=\"mb-1\"></i></span>\n          <span class=\"my-font-size-xs\">{{ tab.name }}</span>\n        </div>\n      </button>\n    </div>\n  </div>\n</template>\n\n<style scoped></style>\n","import { render } from \"./ResponsiveLowerView.vue?vue&type=template&id=49bdd4fa\"\nimport script from \"./ResponsiveLowerView.vue?vue&type=script&lang=js\"\nexport * from \"./ResponsiveLowerView.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { render } from \"./HomeView.vue?vue&type=template&id=d9680e66\"\nimport script from \"./HomeView.vue?vue&type=script&lang=js\"\nexport * from \"./HomeView.vue?vue&type=script&lang=js\"\n\nimport \"./HomeView.vue?vue&type=style&index=0&id=d9680e66&lang=css\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","/**\n * 🗺️ 路由管理模組 (Router Management Module)\n * 示意圖響應式網站的路由管理系統\n *\n * 功能說明 (Features):\n * 1. 🛣️ 路由配置管理：定義應用程式的所有路由規則\n * 2. 📱 響應式路由：支援不同設備的路由導航\n * 3. 🔄 路由守衛：提供路由切換的權限控制和驗證\n * 4. 📊 路由狀態管理：追蹤當前路由狀態和歷史記錄\n * 5. 🎯 動態路由：支援動態路由參數和查詢字符串\n *\n * 技術特點 (Technical Features):\n * - 使用 Vue Router 4 最新版本\n * - 支援 HTML5 History API 模式\n * - 提供完整的路由生命週期管理\n * - 支援路由懶載入和程式碼分割\n *\n * 路由結構 (Route Structure):\n * - /: 首頁（示意圖主界面）\n * - 其他路由可根據需要擴展\n *\n * @file index.js\n * @version 2.0.0\n * @author Kevin Cheng\n * @since 1.0.0\n */\n\n// ==================== 📦 第三方庫引入 (Third-Party Library Imports) ====================\n\n/**\n * Vue Router 4 核心功能引入\n * 提供現代化的單頁應用路由管理功能\n *\n * @see https://router.vuejs.org/\n */\nimport { createRouter, createWebHistory } from 'vue-router';\n\n/**\n * 首頁視圖組件引入\n * 包含示意圖的主要功能界面\n *\n * @see ../views/HomeView.vue\n */\nimport HomeView from '../views/HomeView.vue';\n\n// ==================== 📍 路由配置定義 (Route Configuration Definition) ====================\n\n/**\n * 📍 路由配置陣列 (Routes Configuration Array)\n *\n * 定義應用程式的所有路由規則，包含路徑、組件、元數據等\n * 每個路由物件包含必要的路由資訊，支援嵌套路由和動態路由\n *\n * 設計原則：\n * - 使用語義化的路由名稱\n * - 保持路由結構的簡潔性\n * - 支援未來擴展需求\n * - 提供完整的路由元數據\n *\n * @type {Array<Object>}\n * @description 路由配置陣列，每個物件定義一個路由規則\n */\nconst routes = [\n  {\n    path: '/', // 🏠 根路徑\n    name: 'Home', // 路由名稱，用於程式化導航\n    component: HomeView, // 對應的 Vue 組件\n    meta: {\n      title: '示意圖響應式網站', // 頁面標題\n      description: 'Schematic Map系統的示意圖展示平台', // 頁面描述\n      requiresAuth: false, // 是否需要身份驗證\n    },\n  },\n  // 未來可在此處添加更多路由\n  // {\n  //   path: '/about',\n  //   name: 'About',\n  //   component: () => import('../views/AboutView.vue'),\n  //   meta: {\n  //     title: '關於我們',\n  //     description: '了解我們的團隊和使命',\n  //     requiresAuth: false,\n  //   },\n  // },\n];\n\n// ==================== 🛣️ 路由器實例創建 (Router Instance Creation) ====================\n\n/**\n * 🛣️ 路由器實例創建 (Router Instance Creation)\n *\n * 使用 Vue Router 4 創建路由器實例，配置路由模式和基礎路徑\n * 支援 HTML5 History API 模式，提供更自然的 URL 結構\n *\n * 配置說明：\n * - history: 使用 HTML5 History API 模式，支援瀏覽器前進後退\n * - base: 設定應用程式的基礎路徑，用於 GitHub Pages 部署\n * - routes: 路由配置陣列，定義所有可用的路由規則\n * - scrollBehavior: 路由切換時的滾動行為（可選）\n *\n * @type {Router}\n * @description Vue Router 實例，提供路由導航功能\n */\nconst router = createRouter({\n  /**\n   * 使用 HTML5 History API 模式\n   * 提供更自然的 URL 結構，不包含 # 符號\n   * 需要服務器配置支援，確保所有路由都指向 index.html\n   */\n  history: createWebHistory('/schematic-map-rwd/'),\n\n  /**\n   * 路由配置陣列\n   * 包含所有定義的路由規則\n   */\n  routes,\n\n  /**\n   * 滾動行為配置（可選）\n   * 定義路由切換時的滾動位置\n   */\n  scrollBehavior(to, from, savedPosition) {\n    // 如果有保存的位置（瀏覽器前進後退），恢復該位置\n    if (savedPosition) {\n      return savedPosition;\n    }\n    // 否則滾動到頁面頂部\n    return { top: 0 };\n  },\n});\n\n// ==================== 🔒 路由守衛配置 (Route Guards Configuration) ====================\n\n/**\n * 🔒 全域前置守衛 (Global Before Guard)\n *\n * 在每個路由切換前執行，用於權限控制、身份驗證等\n * 可以在此處添加登入檢查、權限驗證等邏輯\n *\n * @param {RouteLocationNormalized} to - 即將進入的路由\n * @param {RouteLocationNormalized} from - 即將離開的路由\n * @param {Function} next - 路由控制函數\n */\nrouter.beforeEach((to, from, next) => {\n  // 設定頁面標題\n  if (to.meta.title) {\n    document.title = `${to.meta.title} - 示意圖響應式網站`;\n  } else {\n    document.title = '示意圖響應式網站';\n  }\n\n  // 記錄路由切換日誌（開發環境）\n  if (process.env.NODE_ENV === 'development') {\n    console.log(`🛣️ 路由切換: ${from.path} → ${to.path}`);\n  }\n\n  // 繼續路由導航\n  next();\n});\n\n/**\n * 🔒 全域後置守衛 (Global After Guard)\n *\n * 在每個路由切換完成後執行，用於頁面分析、統計等\n * 可以在此處添加 Google Analytics、頁面追蹤等邏輯\n *\n * @param {RouteLocationNormalized} to - 已進入的路由\n * @param {RouteLocationNormalized} from - 已離開的路由\n */\nrouter.afterEach((to) => {\n  // 記錄路由切換完成日誌\n  if (process.env.NODE_ENV === 'development') {\n    console.log(`✅ 路由切換完成: ${to.path}`);\n  }\n\n  // 可以在這裡添加頁面分析代碼\n  // 例如：Google Analytics 頁面追蹤\n  // gtag('config', 'GA_MEASUREMENT_ID', {\n  //   page_path: to.fullPath,\n  // });\n});\n\n// ==================== 📤 模組導出 (Module Export) ====================\n\n/**\n * 導出路由器實例\n * 供 main.js 使用，註冊到 Vue 應用程式中\n */\nexport default router;\n","/**\n * 🚀 應用程式主入口文件 (Main Application Entry Point)\n *\n * 功能說明 (Features):\n * 1. 🎨 引入 Bootstrap 5 和自定義主題樣式系統\n * 2. 🧩 初始化 Vue 3 應用程式和全域組件註冊\n * 3. 🗺️ 設定 Vue Router 4 路由導航系統\n * 4. 📦 配置 Pinia 狀態管理系統\n * 5. 🌍 掛載應用程式到 DOM 容器中\n * 6. 🔧 整合第三方庫（Font Awesome、Bootstrap）\n * 7. 🐛 提供開發環境調試資訊輸出\n *\n * 技術棧 (Technology Stack):\n * - Vue 3 (Composition API) - 現代化前端框架\n * - Vue Router 4 - 單頁應用路由管理\n * - Pinia - Vue 3 官方推薦的狀態管理庫\n * - Bootstrap 5 - 響應式 UI 框架\n * - Font Awesome - 圖示字體庫\n * - D3.js - 數據視覺化庫\n *\n * 架構設計 (Architecture Design):\n * - 採用 Composition API 提供更好的 TypeScript 支援\n * - 使用 Pinia 進行集中式狀態管理\n * - 模組化的樣式系統，支援主題切換\n * - 完整的第三方庫整合和配置\n *\n * 開發環境 (Development Environment):\n * - 支援熱重載和快速開發\n * - 整合 ESLint 和 Prettier 程式碼品質控制\n * - 提供詳細的調試資訊輸出\n *\n * @file main.js\n * @version 2.0.0\n * @author Kevin Cheng\n * @since 1.0.0\n */\n\n// ==================== 🔧 Vue 核心模組引入 (Vue Core Module Imports) ====================\n\n/**\n * Vue 3 核心功能引入\n * 使用 createApp 創建 Vue 應用程式實例，支援 Composition API\n */\nimport { createApp } from 'vue';\n\n/**\n * Pinia 狀態管理庫引入\n * Vue 3 官方推薦的狀態管理解決方案，提供更好的 TypeScript 支援\n */\nimport { createPinia } from 'pinia';\n\n// ==================== 🧩 應用程式組件引入 (Application Component Imports) ====================\n\n/**\n * 應用程式根組件\n * 定義整體佈局結構和全域狀態管理\n */\nimport App from './App.vue';\n\n/**\n * Vue Router 路由配置\n * 管理單頁應用的路由導航和頁面切換\n */\nimport router from './router';\n\n// ==================== 🎨 第三方樣式文件引入 (Third-Party Style Files) ====================\n\n/**\n * Bootstrap 5 CSS 框架\n * 提供響應式佈局系統、UI 組件和工具類\n * 版本：5.3.0\n */\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n/**\n * Font Awesome 圖示庫\n * 提供豐富的圖示字體，支援品牌圖示和通用圖示\n * 版本：6.7.2\n */\nimport '@fortawesome/fontawesome-free/css/all.min.css';\n\n// ==================== 🎨 自定義樣式文件引入 (Custom Style Files) ====================\n\n/**\n * 共用樣式文件\n * 包含自定義 CSS 變數、主題配置和通用樣式\n * 整合了所有組件的樣式定義\n */\nimport './assets/css/common.css';\n\n// ==================== ⚙️ 第三方 JavaScript 文件引入 (Third-Party JavaScript Files) ====================\n\n/**\n * Bootstrap 5 JavaScript 功能\n * 包含 Popper.js，提供以下互動功能：\n * - 下拉選單 (Dropdown)\n * - 模態框 (Modal)\n * - 工具提示 (Tooltip)\n * - 彈出提示 (Popover)\n * - 手風琴 (Collapse)\n * - 輪播圖 (Carousel)\n * 版本：5.3.0\n */\nimport 'bootstrap/dist/js/bootstrap.bundle.min.js';\n\n// ==================== 🐛 開發環境調試資訊 (Development Debug Information) ====================\n\n/**\n * 樣式文件載入完成確認\n * 在開發環境中提供視覺化確認，確保所有樣式正確載入\n */\nconsole.log('🎨 樣式文件載入完成');\n\n// ==================== 🚀 Vue 應用程式實例創建與配置 (Vue Application Instance Creation) ====================\n\n/**\n * 創建 Vue 3 應用程式實例\n * 使用 createApp 函數創建應用程式實例，傳入根組件 App\n *\n * @type {App} Vue 應用程式實例\n */\nconst app = createApp(App);\n\n// ==================== 📦 Pinia 狀態管理實例創建 (Pinia State Management Instance Creation) ====================\n\n/**\n * 創建 Pinia 狀態管理實例\n * Pinia 是 Vue 3 官方推薦的狀態管理庫，提供更好的 TypeScript 支援\n * 和更簡潔的 API 設計\n *\n * @type {Store} Pinia 狀態管理實例\n */\nconst pinia = createPinia();\n\n// ==================== 🗺️ 路由系統註冊 (Router System Registration) ====================\n\n/**\n * 註冊 Vue Router 路由系統\n * 啟用單頁應用的路由導航功能，支援：\n * - 程式碼分割和懶載入\n * - 路由守衛和導航守衛\n * - 動態路由和嵌套路由\n * - 歷史模式路由\n */\napp.use(router);\n\n// ==================== 📦 狀態管理系統註冊 (State Management System Registration) ====================\n\n/**\n * 註冊 Pinia 狀態管理系統\n * 啟用全域狀態管理功能，支援：\n * - 集中式狀態管理\n * - 響應式狀態更新\n * - 模組化狀態組織\n * - 開發者工具支援\n */\napp.use(pinia);\n\n// ==================== 🌍 應用程式掛載 (Application Mounting) ====================\n\n/**\n * 將 Vue 應用程式掛載到 DOM 元素\n * 將應用程式實例掛載到 index.html 中 id=\"app\" 的元素上\n * 這會觸發應用程式的初始化和渲染過程\n *\n * @param {string} '#app' - DOM 元素選擇器\n */\napp.mount('#app');\n\n// ==================== 🐛 應用程式啟動完成調試資訊 (Application Startup Debug Information) ====================\n\n/**\n * 輸出應用程式啟動完成的調試資訊\n * 在開發環境中提供詳細的啟動狀態確認\n * 幫助開發者確認所有系統組件正確初始化\n */\nconsole.log('🚀 Schematic Map平台已啟動');\nconsole.log('📦 Pinia 狀態管理已初始化');\nconsole.log('🗺️ Vue Router 路由系統已就緒');\nconsole.log('🎨 Bootstrap 5 UI 框架已載入');\nconsole.log('🔤 Font Awesome 圖示庫已載入');\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","var deferred = [];\n__webpack_require__.O = function(result, chunkIds, fn, priority) {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar chunkIds = deferred[i][0];\n\t\tvar fn = deferred[i][1];\n\t\tvar priority = deferred[i][2];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every(function(key) { return __webpack_require__.O[key](chunkIds[j]); })) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = function(module) {\n\tvar getter = module && module.__esModule ?\n\t\tfunction() { return module['default']; } :\n\t\tfunction() { return module; };\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t524: 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = function(chunkId) { return installedChunks[chunkId] === 0; };\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = function(parentChunkLoadingFunction, data) {\n\tvar chunkIds = data[0];\n\tvar moreModules = data[1];\n\tvar runtime = data[2];\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some(function(id) { return installedChunks[id] !== 0; })) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunkschematic_map_rwd\"] = self[\"webpackChunkschematic_map_rwd\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [504], function() { return __webpack_require__(532); })\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n"],"names":["id","class","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","_createVNode","_component_router_view","name","components","setup","isLoading","ref","loadingText","loadingProgress","showLoadingProgress","loadingSubText","__exports__","render","_component_LoadingOverlay","isVisible","$setup","isAnyLayerLoading","progress","showProgress","subText","_ctx","$route","path","_hoisted_3","_hoisted_4","_hoisted_5","leftViewWidth","style","_normalizeStyle","width","leftViewWidthPx","_component_LeftView","_normalizeClass","isSidePanelDragging","onMousedown","_cache","$event","startResize","title","_component_MiddleView","mainPanelWidthPx","dynamicMainAreaHeight","calculatedMiddleViewHeight","activeUpperTab","activeBottomTab","mainPanelWidth","selectedFilter","zoomLevel","currentCoords","activeMarkers","isLoadingData","onResetView","resetView","onHighlightOnMap","handleHighlight","onHighlightFeature","onFeatureSelected","handleFeatureSelected","rightViewWidth","rightViewWidthPx","_component_RightView","activeRightTab","_hoisted_6","mobileBottomViewHeight","height","_createBlock","_component_UpperView","key","mobileMapKey","contentHeight","Math","max","windowHeight","isPanelDragging","isVerticalDragging","args","startVerticalResize","onTouchstart","_component_ResponsiveLowerView","activeTab","activeLowerTab","_hoisted_7","PATH_CONFIG","JSON","FALLBACK_JSON","async","loadFile","primaryPath","fallbackPath","console","log","response","fetch","ok","Error","status","statusText","error","warn","message","fallbackResponse","fallbackError","loadDataLayerJson","layer","fileName","jsonFileName","dataPath","jsonData","json","processDataLayerJson","randomizeNodeValues","nodes","length","randomizedNodes","map","node","newValue","floor","random","coord","x","y","value","slice","loadGridSchematicJson","processGridSchematicJson","gridX","parseInt","gridY","gridNodes","push","type","dashboardData","totalNodes","gridSize","nodeCount","layerInfoData","dataTableData","processedJsonData","Array","isArray","line","totalLines","reduce","sum","lineNames","index","color","totalCount","itemNames","item","totalItems","hasFeatures","some","features","hasProperties","properties","useDataStore","defineStore","layerStates","layers","groupName","groupLayers","layerId","layerName","visible","isLoaded","shape","colorName","jsonLoader","isDataLayer","hideFromMap","display","isGridSchematic","saveLayerState","stateData","Object","assign","findLayerById","mainGroup","getAllLayers","allLayers","toggleLayerVisibility","currentVisible","shouldLoad","result","selectedFeature","d3jsDimensions","updateD3jsDimensions","round","setSelectedFeature","feature","clearSelectedFeature","findGroupNameByLayerId","visibleLayers","computed","filter","loadingLayers","persist","$props","role","_toDisplayString","_hoisted_8","props","Boolean","default","required","String","Number","validator","_component_LayersTab","_Fragment","_renderList","onClick","toggleLayer","_hoisted_10","_hoisted_11","_withModifiers","checked","disabled","onChange","handleToggleChange","for","dataStore","layerListRef","event","stopPropagation","flatMap","find","l","targetChecked","target","LayersTab","availableTabs","tab","switchTab","_component_PropertiesTab","$emit","_component_LayerInfo","selectedLayer","customColor","undefined","propertyData","_component_DetailItem","label","$options","formatValue","DetailItem","itemColor","keys","methods","toLocaleString","ICONS","chart_line","zh","en","icon","chart_bar","spinner","sort","sort_up","sort_down","info_circle","location_dot","layer_group","table","getIcon","iconKey","lang","iconInfo","text","classMatch","match","iconClass","getIconHtml","additionalClasses","replace","activeLayerTab","analysisResults","isLoadingAnalysis","setActiveLayerTab","getLayerFullTitle","getCurrentLayerInfoData","currentLayer","previousLayers","watch","newLayers","previousLayerIds","newLayerIds","addedLayerIds","includes","newestAddedLayerId","deep","immediate","newLayerId","loadLayerInfo","Promise","resolve","setTimeout","stats","totalFeatures","totalPopulation","f","P_CNT","count","avgPopulation","avgCount","timestamp","Date","statistics","details","onMounted","_hoisted_9","innerHTML","_unref","_hoisted_12","_hoisted_13","_hoisted_14","join","_hoisted_15","_hoisted_16","_hoisted_17","_hoisted_18","_hoisted_19","_hoisted_20","PropertiesTab","LayerInfo","analysisList","selectedAnalysisId","emits","emit","tabId","getActiveAnalysisCount","a","newFeature","store","selectedFeatureComputed","_component_D3jsTab","containerHeight","_component_DashboardTab","_component_ProcessedJsonDataTab","_component_JsonDataTab","currentLayerSummary","currentLayerName","stringify","__props","gridData","gridDimensions","nodeData","linkData","COLOR_CONFIG","BACKGROUND","GRID_LINE","GRID_LINE_SECONDARY","NODE_FILL","NODE_STROKE","TEXT_FILL","colorMap","red","lightpink","blue","green","lightgreen","orange","brown","yellow","purple","paleturquoise","limegreen","resizeObserver","d3","selectAll","remove","isGridSchematicLayer","loadLayerData","targetLayer","setLinkData","schematicData","processedData","forEach","thisX","thisY","data","getDimensions","container","document","getElementById","rect","getBoundingClientRect","clientWidth","clientHeight","rectWidth","rectHeight","dimensions","defaultDimensions","drawGridSchematic","margin","top","right","bottom","left","existingSvg","select","size","existingWidth","parseFloat","attr","existingHeight","abs","svg","append","cellWidth","cellHeight","drawGridLines","drawGridNodes","i","nodeGroup","min","on","this","drawAdministrativeSchematic","allPoints","d","xMax","yMax","actualWidth","actualHeight","domain","range","lineGenerator","curve","dString","xWidth","yHeight","arcWidth","invert","arc","innerRadius","outerRadius","startAngle","endAngle","PI","allLinks","drawSchematic","resize","oldLayerId","nextTick","window","addEventListener","ResizeObserver","entries","entry","contentRect","observe","parentContainer","parentElement","onUnmounted","removeEventListener","disconnect","__expose","getCurrentLayerProcessedJsonData","getCurrentLayerJsonData","DashboardTab","D3jsTab","ProcessedJsonDataTab","JsonDataTab","dashboardContainerRef","d3jsContainerRef","processedJsonDataContainerRef","jsonDataContainerRef","dragging","pointerEvents","newTab","oldTab","highlightFeature","highlightData","fitToTainanBounds","invalidateMapSize","bottomViewHeight","_component_DataTableTab","__emit","layerSortStates","getLayerColumns","allKeys","Set","add","from","getLayerDataCount","hasTableData","dataCount","sampleData","getSortedData","sortState","b","aValue","bValue","numericFields","aNum","bNum","order","localeCompare","handleSort","getSortIcon","handleItemClick","column","endsWith","_hoisted_21","_hoisted_22","_hoisted_23","_hoisted_24","_hoisted_25","_hoisted_26","_hoisted_28","toFixed","_hoisted_29","_hoisted_31","_hoisted_32","_hoisted_34","_hoisted_35","_hoisted_37","_hoisted_38","_hoisted_39","DataTableTab","bottomTabContentRef","mainContentRef","bottomViewHeightPercent","isOverallDragging","middleSectionTotalHeight","totalHeight","actualBottomViewPixelHeight","pixelHeight","mainContentH","preventDefault","body","classList","startY","clientY","startBottomPercent","currentMiddleSectionHeight","handleMouseMove","moveEvent","deltaY","deltaPercent","newPercent","handleMouseUp","resetMapTab","stopMapClickMode","UpperView","BottomView","getBottomNavStyle","bottomSafeArea","calculateBottomSafeArea","innerHeight","visualHeight","visualViewport","heightDiff","baseHeight","extraPadding","padding","LoadingOverlay","LeftView","RightView","MiddleView","ResponsiveLowerView","middlePanelRef","mobileUpperViewRef","appFooterRef","MIN_LEFT_PANEL_WIDTH_PERCENT","windowWidth","innerWidth","footerHeight","loading","loadingLayer","lat","lng","direction","startX","clientX","startLeftWidth","startRightWidth","currentWindowWidth","leftWidth","rightWidth","deltaX","deltaXPercent","newWidth","validatePanelSizes","mainWidth","handleResize","prevWidth","prevIsDesktop","currentIsDesktop","handleScreenSizeChange","offsetHeight","minHeight","calculateMinBottomHeight","screenSizeObserver","isXlAndAbove","wasXlAndAbove","contains","toggle","updateActiveMarkers","storeSelectedFeature","isDesktop","minNavigationHeight","currentWindowHeight","isTouch","startsWith","touches","startBottomHeight","handleMove","currentY","newHeight","minHeightPercent","handleEnd","finalHeight","passive","Event","dispatchEvent","routes","component","HomeView","meta","description","requiresAuth","router","createRouter","history","createWebHistory","scrollBehavior","to","savedPosition","beforeEach","next","afterEach","process","app","createApp","App","pinia","createPinia","use","mount","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","__webpack_modules__","call","m","deferred","O","chunkIds","fn","priority","notFulfilled","Infinity","fulfilled","j","every","splice","r","n","getter","__esModule","definition","o","defineProperty","enumerable","get","g","globalThis","Function","e","obj","prop","prototype","hasOwnProperty","installedChunks","chunkId","webpackJsonpCallback","parentChunkLoadingFunction","moreModules","runtime","chunkLoadingGlobal","self","bind","__webpack_exports__"],"sourceRoot":""}